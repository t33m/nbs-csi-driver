// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.0
// source: cloud/blockstore/public/api/protos/disk.proto

package protos

import (
	protos "github.com/ydb-platform/nbs/cloud/storage/core/protos"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EDiskState int32

const (
	EDiskState_DISK_STATE_ONLINE                  EDiskState = 0
	EDiskState_DISK_STATE_WARNING                 EDiskState = 1
	EDiskState_DISK_STATE_TEMPORARILY_UNAVAILABLE EDiskState = 2
	EDiskState_DISK_STATE_ERROR                   EDiskState = 3
)

// Enum value maps for EDiskState.
var (
	EDiskState_name = map[int32]string{
		0: "DISK_STATE_ONLINE",
		1: "DISK_STATE_WARNING",
		2: "DISK_STATE_TEMPORARILY_UNAVAILABLE",
		3: "DISK_STATE_ERROR",
	}
	EDiskState_value = map[string]int32{
		"DISK_STATE_ONLINE":                  0,
		"DISK_STATE_WARNING":                 1,
		"DISK_STATE_TEMPORARILY_UNAVAILABLE": 2,
		"DISK_STATE_ERROR":                   3,
	}
)

func (x EDiskState) Enum() *EDiskState {
	p := new(EDiskState)
	*p = x
	return p
}

func (x EDiskState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDiskState) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_blockstore_public_api_protos_disk_proto_enumTypes[0].Descriptor()
}

func (EDiskState) Type() protoreflect.EnumType {
	return &file_cloud_blockstore_public_api_protos_disk_proto_enumTypes[0]
}

func (x EDiskState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EDiskState.Descriptor instead.
func (EDiskState) EnumDescriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_disk_proto_rawDescGZIP(), []int{0}
}

type EDevicePoolKind int32

const (
	// Default global pool without name.
	EDevicePoolKind_DEVICE_POOL_KIND_DEFAULT EDevicePoolKind = 0
	// Named global pools.
	EDevicePoolKind_DEVICE_POOL_KIND_GLOBAL EDevicePoolKind = 1
	// Named local pools.
	EDevicePoolKind_DEVICE_POOL_KIND_LOCAL EDevicePoolKind = 2
)

// Enum value maps for EDevicePoolKind.
var (
	EDevicePoolKind_name = map[int32]string{
		0: "DEVICE_POOL_KIND_DEFAULT",
		1: "DEVICE_POOL_KIND_GLOBAL",
		2: "DEVICE_POOL_KIND_LOCAL",
	}
	EDevicePoolKind_value = map[string]int32{
		"DEVICE_POOL_KIND_DEFAULT": 0,
		"DEVICE_POOL_KIND_GLOBAL":  1,
		"DEVICE_POOL_KIND_LOCAL":   2,
	}
)

func (x EDevicePoolKind) Enum() *EDevicePoolKind {
	p := new(EDevicePoolKind)
	*p = x
	return p
}

func (x EDevicePoolKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDevicePoolKind) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_blockstore_public_api_protos_disk_proto_enumTypes[1].Descriptor()
}

func (EDevicePoolKind) Type() protoreflect.EnumType {
	return &file_cloud_blockstore_public_api_protos_disk_proto_enumTypes[1]
}

func (x EDevicePoolKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EDevicePoolKind.Descriptor instead.
func (EDevicePoolKind) EnumDescriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_disk_proto_rawDescGZIP(), []int{1}
}

type TDiskState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskId       string     `protobuf:"bytes,1,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	State        EDiskState `protobuf:"varint,2,opt,name=State,proto3,enum=NCloud.NBlockStore.NProto.EDiskState" json:"State,omitempty"`
	StateMessage string     `protobuf:"bytes,3,opt,name=StateMessage,proto3" json:"StateMessage,omitempty"`
}

func (x *TDiskState) Reset() {
	*x = TDiskState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDiskState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDiskState) ProtoMessage() {}

func (x *TDiskState) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDiskState.ProtoReflect.Descriptor instead.
func (*TDiskState) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_disk_proto_rawDescGZIP(), []int{0}
}

func (x *TDiskState) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TDiskState) GetState() EDiskState {
	if x != nil {
		return x.State
	}
	return EDiskState_DISK_STATE_ONLINE
}

func (x *TDiskState) GetStateMessage() string {
	if x != nil {
		return x.StateMessage
	}
	return ""
}

type TDeviceOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device UUID.
	Device string `protobuf:"bytes,1,opt,name=Device,proto3" json:"Device,omitempty"`
	// DiskId for which this override takes effect.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Overridden BlocksCount.
	BlocksCount uint64 `protobuf:"varint,3,opt,name=BlocksCount,proto3" json:"BlocksCount,omitempty"`
}

func (x *TDeviceOverride) Reset() {
	*x = TDeviceOverride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDeviceOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDeviceOverride) ProtoMessage() {}

func (x *TDeviceOverride) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDeviceOverride.ProtoReflect.Descriptor instead.
func (*TDeviceOverride) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_disk_proto_rawDescGZIP(), []int{1}
}

func (x *TDeviceOverride) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *TDeviceOverride) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TDeviceOverride) GetBlocksCount() uint64 {
	if x != nil {
		return x.BlocksCount
	}
	return 0
}

type TKnownDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device UUID.
	DeviceUUID string `protobuf:"bytes,1,opt,name=DeviceUUID,proto3" json:"DeviceUUID,omitempty"`
	// Device Serial number.
	SerialNumber string `protobuf:"bytes,2,opt,name=SerialNumber,proto3" json:"SerialNumber,omitempty"`
}

func (x *TKnownDevice) Reset() {
	*x = TKnownDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TKnownDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TKnownDevice) ProtoMessage() {}

func (x *TKnownDevice) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TKnownDevice.ProtoReflect.Descriptor instead.
func (*TKnownDevice) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_disk_proto_rawDescGZIP(), []int{2}
}

func (x *TKnownDevice) GetDeviceUUID() string {
	if x != nil {
		return x.DeviceUUID
	}
	return ""
}

func (x *TKnownDevice) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

type TKnownDiskAgent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Disk Agent Id which is used for registration in Disk registry.
	AgentId string `protobuf:"bytes,1,opt,name=AgentId,proto3" json:"AgentId,omitempty"`
	// List of device UUIDs which are allowed for this Disk Agent.
	Devices []string `protobuf:"bytes,2,rep,name=Devices,proto3" json:"Devices,omitempty"` // deprecated
	// List of devices which are allowed for this Disk Agent.
	KnownDevices []*TKnownDevice `protobuf:"bytes,3,rep,name=KnownDevices,proto3" json:"KnownDevices,omitempty"`
}

func (x *TKnownDiskAgent) Reset() {
	*x = TKnownDiskAgent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TKnownDiskAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TKnownDiskAgent) ProtoMessage() {}

func (x *TKnownDiskAgent) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TKnownDiskAgent.ProtoReflect.Descriptor instead.
func (*TKnownDiskAgent) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_disk_proto_rawDescGZIP(), []int{3}
}

func (x *TKnownDiskAgent) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *TKnownDiskAgent) GetDevices() []string {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *TKnownDiskAgent) GetKnownDevices() []*TKnownDevice {
	if x != nil {
		return x.KnownDevices
	}
	return nil
}

type TKnownDevicePool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device pool name.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Allocation unit for this pool (in bytes).
	AllocationUnit uint64 `protobuf:"varint,2,opt,name=AllocationUnit,proto3" json:"AllocationUnit,omitempty"`
	// Device pool kind.
	Kind EDevicePoolKind `protobuf:"varint,3,opt,name=Kind,proto3,enum=NCloud.NBlockStore.NProto.EDevicePoolKind" json:"Kind,omitempty"`
}

func (x *TKnownDevicePool) Reset() {
	*x = TKnownDevicePool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TKnownDevicePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TKnownDevicePool) ProtoMessage() {}

func (x *TKnownDevicePool) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TKnownDevicePool.ProtoReflect.Descriptor instead.
func (*TKnownDevicePool) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_disk_proto_rawDescGZIP(), []int{4}
}

func (x *TKnownDevicePool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TKnownDevicePool) GetAllocationUnit() uint64 {
	if x != nil {
		return x.AllocationUnit
	}
	return 0
}

func (x *TKnownDevicePool) GetKind() EDevicePoolKind {
	if x != nil {
		return x.Kind
	}
	return EDevicePoolKind_DEVICE_POOL_KIND_DEFAULT
}

type TUpdateDiskRegistryConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Disk registry config version.
	Version uint32 `protobuf:"varint,2,opt,name=Version,proto3" json:"Version,omitempty"`
	// List of agents allowed to connect to the Disk Registry
	KnownAgents []*TKnownDiskAgent `protobuf:"bytes,4,rep,name=KnownAgents,proto3" json:"KnownAgents,omitempty"`
	// Ignore config version and force to apply config
	IgnoreVersion bool `protobuf:"varint,5,opt,name=IgnoreVersion,proto3" json:"IgnoreVersion,omitempty"`
	// List of device property overrides for specific volumes.
	DeviceOverrides []*TDeviceOverride `protobuf:"bytes,6,rep,name=DeviceOverrides,proto3" json:"DeviceOverrides,omitempty"`
	// List of device pool configs.
	KnownDevicePools []*TKnownDevicePool `protobuf:"bytes,7,rep,name=KnownDevicePools,proto3" json:"KnownDevicePools,omitempty"`
}

func (x *TUpdateDiskRegistryConfigRequest) Reset() {
	*x = TUpdateDiskRegistryConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TUpdateDiskRegistryConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TUpdateDiskRegistryConfigRequest) ProtoMessage() {}

func (x *TUpdateDiskRegistryConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TUpdateDiskRegistryConfigRequest.ProtoReflect.Descriptor instead.
func (*TUpdateDiskRegistryConfigRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_disk_proto_rawDescGZIP(), []int{5}
}

func (x *TUpdateDiskRegistryConfigRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TUpdateDiskRegistryConfigRequest) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TUpdateDiskRegistryConfigRequest) GetKnownAgents() []*TKnownDiskAgent {
	if x != nil {
		return x.KnownAgents
	}
	return nil
}

func (x *TUpdateDiskRegistryConfigRequest) GetIgnoreVersion() bool {
	if x != nil {
		return x.IgnoreVersion
	}
	return false
}

func (x *TUpdateDiskRegistryConfigRequest) GetDeviceOverrides() []*TDeviceOverride {
	if x != nil {
		return x.DeviceOverrides
	}
	return nil
}

func (x *TUpdateDiskRegistryConfigRequest) GetKnownDevicePools() []*TKnownDevicePool {
	if x != nil {
		return x.KnownDevicePools
	}
	return nil
}

type TUpdateDiskRegistryConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Affected disks
	AffectedDisks []string `protobuf:"bytes,2,rep,name=AffectedDisks,proto3" json:"AffectedDisks,omitempty"`
}

func (x *TUpdateDiskRegistryConfigResponse) Reset() {
	*x = TUpdateDiskRegistryConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TUpdateDiskRegistryConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TUpdateDiskRegistryConfigResponse) ProtoMessage() {}

func (x *TUpdateDiskRegistryConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TUpdateDiskRegistryConfigResponse.ProtoReflect.Descriptor instead.
func (*TUpdateDiskRegistryConfigResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_disk_proto_rawDescGZIP(), []int{6}
}

func (x *TUpdateDiskRegistryConfigResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TUpdateDiskRegistryConfigResponse) GetAffectedDisks() []string {
	if x != nil {
		return x.AffectedDisks
	}
	return nil
}

type TDescribeDiskRegistryConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
}

func (x *TDescribeDiskRegistryConfigRequest) Reset() {
	*x = TDescribeDiskRegistryConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDescribeDiskRegistryConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDescribeDiskRegistryConfigRequest) ProtoMessage() {}

func (x *TDescribeDiskRegistryConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDescribeDiskRegistryConfigRequest.ProtoReflect.Descriptor instead.
func (*TDescribeDiskRegistryConfigRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_disk_proto_rawDescGZIP(), []int{7}
}

func (x *TDescribeDiskRegistryConfigRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

type TDescribeDiskRegistryConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Disk registry config version.
	Version uint32 `protobuf:"varint,2,opt,name=Version,proto3" json:"Version,omitempty"`
	// List of agents allowed to connect to the Disk Registry.
	KnownAgents []*TKnownDiskAgent `protobuf:"bytes,3,rep,name=KnownAgents,proto3" json:"KnownAgents,omitempty"`
	// List of device property overrides for specific volumes.
	DeviceOverrides []*TDeviceOverride `protobuf:"bytes,4,rep,name=DeviceOverrides,proto3" json:"DeviceOverrides,omitempty"`
	// List of device pool configs.
	KnownDevicePools []*TKnownDevicePool `protobuf:"bytes,5,rep,name=KnownDevicePools,proto3" json:"KnownDevicePools,omitempty"`
}

func (x *TDescribeDiskRegistryConfigResponse) Reset() {
	*x = TDescribeDiskRegistryConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDescribeDiskRegistryConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDescribeDiskRegistryConfigResponse) ProtoMessage() {}

func (x *TDescribeDiskRegistryConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDescribeDiskRegistryConfigResponse.ProtoReflect.Descriptor instead.
func (*TDescribeDiskRegistryConfigResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_disk_proto_rawDescGZIP(), []int{8}
}

func (x *TDescribeDiskRegistryConfigResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TDescribeDiskRegistryConfigResponse) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TDescribeDiskRegistryConfigResponse) GetKnownAgents() []*TKnownDiskAgent {
	if x != nil {
		return x.KnownAgents
	}
	return nil
}

func (x *TDescribeDiskRegistryConfigResponse) GetDeviceOverrides() []*TDeviceOverride {
	if x != nil {
		return x.DeviceOverrides
	}
	return nil
}

func (x *TDescribeDiskRegistryConfigResponse) GetKnownDevicePools() []*TKnownDevicePool {
	if x != nil {
		return x.KnownDevicePools
	}
	return nil
}

type TCreateVolumeFromDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Label of volume to create.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Owner information.
	ProjectId string `protobuf:"bytes,3,opt,name=ProjectId,proto3" json:"ProjectId,omitempty"`
	// User folder Id, used for billing.
	FolderId string `protobuf:"bytes,4,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	// Cloud Id, used for billing.
	CloudId string `protobuf:"bytes,5,opt,name=CloudId,proto3" json:"CloudId,omitempty"`
	// FQDN of the agent on which the device is located.
	AgentId string `protobuf:"bytes,6,opt,name=AgentId,proto3" json:"AgentId,omitempty"`
	// Path to the device on the specified agent.
	Path string `protobuf:"bytes,7,opt,name=Path,proto3" json:"Path,omitempty"`
}

func (x *TCreateVolumeFromDeviceRequest) Reset() {
	*x = TCreateVolumeFromDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCreateVolumeFromDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCreateVolumeFromDeviceRequest) ProtoMessage() {}

func (x *TCreateVolumeFromDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCreateVolumeFromDeviceRequest.ProtoReflect.Descriptor instead.
func (*TCreateVolumeFromDeviceRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_disk_proto_rawDescGZIP(), []int{9}
}

func (x *TCreateVolumeFromDeviceRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TCreateVolumeFromDeviceRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TCreateVolumeFromDeviceRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *TCreateVolumeFromDeviceRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *TCreateVolumeFromDeviceRequest) GetCloudId() string {
	if x != nil {
		return x.CloudId
	}
	return ""
}

func (x *TCreateVolumeFromDeviceRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *TCreateVolumeFromDeviceRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type TCreateVolumeFromDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TCreateVolumeFromDeviceResponse) Reset() {
	*x = TCreateVolumeFromDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCreateVolumeFromDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCreateVolumeFromDeviceResponse) ProtoMessage() {}

func (x *TCreateVolumeFromDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCreateVolumeFromDeviceResponse.ProtoReflect.Descriptor instead.
func (*TCreateVolumeFromDeviceResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_disk_proto_rawDescGZIP(), []int{10}
}

func (x *TCreateVolumeFromDeviceResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TResumeDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Host name.
	AgentId string `protobuf:"bytes,2,opt,name=AgentId,proto3" json:"AgentId,omitempty"`
	// Device path.
	Path string `protobuf:"bytes,3,opt,name=Path,proto3" json:"Path,omitempty"`
}

func (x *TResumeDeviceRequest) Reset() {
	*x = TResumeDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TResumeDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TResumeDeviceRequest) ProtoMessage() {}

func (x *TResumeDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TResumeDeviceRequest.ProtoReflect.Descriptor instead.
func (*TResumeDeviceRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_disk_proto_rawDescGZIP(), []int{11}
}

func (x *TResumeDeviceRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TResumeDeviceRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *TResumeDeviceRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type TResumeDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TResumeDeviceResponse) Reset() {
	*x = TResumeDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TResumeDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TResumeDeviceResponse) ProtoMessage() {}

func (x *TResumeDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TResumeDeviceResponse.ProtoReflect.Descriptor instead.
func (*TResumeDeviceResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_disk_proto_rawDescGZIP(), []int{12}
}

func (x *TResumeDeviceResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_cloud_blockstore_public_api_protos_disk_proto protoreflect.FileDescriptor

var file_cloud_blockstore_public_api_protos_disk_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x19, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x85, 0x01, 0x0a, 0x0a, 0x54, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x63, 0x0a, 0x0f, 0x54,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x52, 0x0a, 0x0c, 0x54, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x92, 0x01, 0x0a, 0x0f, 0x54, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x44,
	0x69, 0x73, 0x6b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0c,
	0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x4b, 0x6e, 0x6f,
	0x77, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x10, 0x54, 0x4b,
	0x6e, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x4b, 0x69,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x22, 0x9e, 0x03, 0x0a, 0x20, 0x54,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0b, 0x4b, 0x6e, 0x6f, 0x77,
	0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4b, 0x6e, 0x6f, 0x77, 0x6e,
	0x44, 0x69, 0x73, 0x6b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x4b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x49,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x0f,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x52, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x10, 0x4b, 0x6e, 0x6f, 0x77, 0x6e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x22, 0x76, 0x0a, 0x21, 0x54,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x24, 0x0a,
	0x0d, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x69,
	0x73, 0x6b, 0x73, 0x22, 0x63, 0x0a, 0x22, 0x54, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0xe9, 0x02, 0x0a, 0x23, 0x54, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0b, 0x4b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x44,
	0x69, 0x73, 0x6b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x0f, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x4b,
	0x6e, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x10, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x22, 0xf9, 0x01, 0x0a, 0x1e, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68,
	0x22, 0x4e, 0x0a, 0x1f, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x83, 0x01, 0x0a, 0x14, 0x54, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x22, 0x44, 0x0a, 0x15, 0x54, 0x52, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2a, 0x79, 0x0a, 0x0a,
	0x45, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x49,
	0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x49, 0x53,
	0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4f, 0x52, 0x41, 0x52,
	0x49, 0x4c, 0x59, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x2a, 0x68, 0x0a, 0x0f, 0x45, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x44,
	0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x47, 0x4c, 0x4f,
	0x42, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10,
	0x02, 0x42, 0x35, 0x5a, 0x33, 0x61, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x72, 0x75, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_blockstore_public_api_protos_disk_proto_rawDescOnce sync.Once
	file_cloud_blockstore_public_api_protos_disk_proto_rawDescData = file_cloud_blockstore_public_api_protos_disk_proto_rawDesc
)

func file_cloud_blockstore_public_api_protos_disk_proto_rawDescGZIP() []byte {
	file_cloud_blockstore_public_api_protos_disk_proto_rawDescOnce.Do(func() {
		file_cloud_blockstore_public_api_protos_disk_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_blockstore_public_api_protos_disk_proto_rawDescData)
	})
	return file_cloud_blockstore_public_api_protos_disk_proto_rawDescData
}

var file_cloud_blockstore_public_api_protos_disk_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_cloud_blockstore_public_api_protos_disk_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_cloud_blockstore_public_api_protos_disk_proto_goTypes = []interface{}{
	(EDiskState)(0),                             // 0: NCloud.NBlockStore.NProto.EDiskState
	(EDevicePoolKind)(0),                        // 1: NCloud.NBlockStore.NProto.EDevicePoolKind
	(*TDiskState)(nil),                          // 2: NCloud.NBlockStore.NProto.TDiskState
	(*TDeviceOverride)(nil),                     // 3: NCloud.NBlockStore.NProto.TDeviceOverride
	(*TKnownDevice)(nil),                        // 4: NCloud.NBlockStore.NProto.TKnownDevice
	(*TKnownDiskAgent)(nil),                     // 5: NCloud.NBlockStore.NProto.TKnownDiskAgent
	(*TKnownDevicePool)(nil),                    // 6: NCloud.NBlockStore.NProto.TKnownDevicePool
	(*TUpdateDiskRegistryConfigRequest)(nil),    // 7: NCloud.NBlockStore.NProto.TUpdateDiskRegistryConfigRequest
	(*TUpdateDiskRegistryConfigResponse)(nil),   // 8: NCloud.NBlockStore.NProto.TUpdateDiskRegistryConfigResponse
	(*TDescribeDiskRegistryConfigRequest)(nil),  // 9: NCloud.NBlockStore.NProto.TDescribeDiskRegistryConfigRequest
	(*TDescribeDiskRegistryConfigResponse)(nil), // 10: NCloud.NBlockStore.NProto.TDescribeDiskRegistryConfigResponse
	(*TCreateVolumeFromDeviceRequest)(nil),      // 11: NCloud.NBlockStore.NProto.TCreateVolumeFromDeviceRequest
	(*TCreateVolumeFromDeviceResponse)(nil),     // 12: NCloud.NBlockStore.NProto.TCreateVolumeFromDeviceResponse
	(*TResumeDeviceRequest)(nil),                // 13: NCloud.NBlockStore.NProto.TResumeDeviceRequest
	(*TResumeDeviceResponse)(nil),               // 14: NCloud.NBlockStore.NProto.TResumeDeviceResponse
	(*THeaders)(nil),                            // 15: NCloud.NBlockStore.NProto.THeaders
	(*protos.TError)(nil),                       // 16: NCloud.NProto.TError
}
var file_cloud_blockstore_public_api_protos_disk_proto_depIdxs = []int32{
	0,  // 0: NCloud.NBlockStore.NProto.TDiskState.State:type_name -> NCloud.NBlockStore.NProto.EDiskState
	4,  // 1: NCloud.NBlockStore.NProto.TKnownDiskAgent.KnownDevices:type_name -> NCloud.NBlockStore.NProto.TKnownDevice
	1,  // 2: NCloud.NBlockStore.NProto.TKnownDevicePool.Kind:type_name -> NCloud.NBlockStore.NProto.EDevicePoolKind
	15, // 3: NCloud.NBlockStore.NProto.TUpdateDiskRegistryConfigRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	5,  // 4: NCloud.NBlockStore.NProto.TUpdateDiskRegistryConfigRequest.KnownAgents:type_name -> NCloud.NBlockStore.NProto.TKnownDiskAgent
	3,  // 5: NCloud.NBlockStore.NProto.TUpdateDiskRegistryConfigRequest.DeviceOverrides:type_name -> NCloud.NBlockStore.NProto.TDeviceOverride
	6,  // 6: NCloud.NBlockStore.NProto.TUpdateDiskRegistryConfigRequest.KnownDevicePools:type_name -> NCloud.NBlockStore.NProto.TKnownDevicePool
	16, // 7: NCloud.NBlockStore.NProto.TUpdateDiskRegistryConfigResponse.Error:type_name -> NCloud.NProto.TError
	15, // 8: NCloud.NBlockStore.NProto.TDescribeDiskRegistryConfigRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	16, // 9: NCloud.NBlockStore.NProto.TDescribeDiskRegistryConfigResponse.Error:type_name -> NCloud.NProto.TError
	5,  // 10: NCloud.NBlockStore.NProto.TDescribeDiskRegistryConfigResponse.KnownAgents:type_name -> NCloud.NBlockStore.NProto.TKnownDiskAgent
	3,  // 11: NCloud.NBlockStore.NProto.TDescribeDiskRegistryConfigResponse.DeviceOverrides:type_name -> NCloud.NBlockStore.NProto.TDeviceOverride
	6,  // 12: NCloud.NBlockStore.NProto.TDescribeDiskRegistryConfigResponse.KnownDevicePools:type_name -> NCloud.NBlockStore.NProto.TKnownDevicePool
	15, // 13: NCloud.NBlockStore.NProto.TCreateVolumeFromDeviceRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	16, // 14: NCloud.NBlockStore.NProto.TCreateVolumeFromDeviceResponse.Error:type_name -> NCloud.NProto.TError
	15, // 15: NCloud.NBlockStore.NProto.TResumeDeviceRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	16, // 16: NCloud.NBlockStore.NProto.TResumeDeviceResponse.Error:type_name -> NCloud.NProto.TError
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_cloud_blockstore_public_api_protos_disk_proto_init() }
func file_cloud_blockstore_public_api_protos_disk_proto_init() {
	if File_cloud_blockstore_public_api_protos_disk_proto != nil {
		return
	}
	file_cloud_blockstore_public_api_protos_headers_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDiskState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDeviceOverride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TKnownDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TKnownDiskAgent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TKnownDevicePool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TUpdateDiskRegistryConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TUpdateDiskRegistryConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDescribeDiskRegistryConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDescribeDiskRegistryConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCreateVolumeFromDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCreateVolumeFromDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TResumeDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_disk_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TResumeDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_blockstore_public_api_protos_disk_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_blockstore_public_api_protos_disk_proto_goTypes,
		DependencyIndexes: file_cloud_blockstore_public_api_protos_disk_proto_depIdxs,
		EnumInfos:         file_cloud_blockstore_public_api_protos_disk_proto_enumTypes,
		MessageInfos:      file_cloud_blockstore_public_api_protos_disk_proto_msgTypes,
	}.Build()
	File_cloud_blockstore_public_api_protos_disk_proto = out.File
	file_cloud_blockstore_public_api_protos_disk_proto_rawDesc = nil
	file_cloud_blockstore_public_api_protos_disk_proto_goTypes = nil
	file_cloud_blockstore_public_api_protos_disk_proto_depIdxs = nil
}
