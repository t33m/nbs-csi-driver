// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.0
// source: cloud/blockstore/public/api/protos/io.proto

package protos

import (
	protos "github.com/ydb-platform/nbs/cloud/storage/core/protos"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TIOVector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// I/O buffers.
	Buffers [][]byte `protobuf:"bytes,1,rep,name=Buffers,proto3" json:"Buffers,omitempty"`
}

func (x *TIOVector) Reset() {
	*x = TIOVector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_io_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TIOVector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TIOVector) ProtoMessage() {}

func (x *TIOVector) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_io_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TIOVector.ProtoReflect.Descriptor instead.
func (*TIOVector) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_io_proto_rawDescGZIP(), []int{0}
}

func (x *TIOVector) GetBuffers() [][]byte {
	if x != nil {
		return x.Buffers
	}
	return nil
}

type TReadBlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Label of volume to read from.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Start block index.
	StartIndex uint64 `protobuf:"varint,3,opt,name=StartIndex,proto3" json:"StartIndex,omitempty"`
	// Number of blocks to read.
	BlocksCount uint32 `protobuf:"varint,4,opt,name=BlocksCount,proto3" json:"BlocksCount,omitempty"`
	// Additional flags. Do we need it?
	Flags uint32 `protobuf:"varint,5,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// Checkpoint identifier.
	CheckpointId string `protobuf:"bytes,6,opt,name=CheckpointId,proto3" json:"CheckpointId,omitempty"`
	// Session identifier.
	SessionId string `protobuf:"bytes,7,opt,name=SessionId,proto3" json:"SessionId,omitempty"`
}

func (x *TReadBlocksRequest) Reset() {
	*x = TReadBlocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_io_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TReadBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TReadBlocksRequest) ProtoMessage() {}

func (x *TReadBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_io_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TReadBlocksRequest.ProtoReflect.Descriptor instead.
func (*TReadBlocksRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_io_proto_rawDescGZIP(), []int{1}
}

func (x *TReadBlocksRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TReadBlocksRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TReadBlocksRequest) GetStartIndex() uint64 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *TReadBlocksRequest) GetBlocksCount() uint32 {
	if x != nil {
		return x.BlocksCount
	}
	return 0
}

func (x *TReadBlocksRequest) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *TReadBlocksRequest) GetCheckpointId() string {
	if x != nil {
		return x.CheckpointId
	}
	return ""
}

func (x *TReadBlocksRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type TReadBlocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Requested blocks.
	Blocks *TIOVector `protobuf:"bytes,2,opt,name=Blocks,proto3" json:"Blocks,omitempty"`
	// Request traces.
	Trace *protos.TTraceInfo `protobuf:"bytes,3,opt,name=Trace,proto3" json:"Trace,omitempty"`
	// Bitmask for unencrypted blocks
	UnencryptedBlockMask []byte `protobuf:"bytes,4,opt,name=UnencryptedBlockMask,proto3" json:"UnencryptedBlockMask,omitempty"`
	// Throttler delay.
	ThrottlerDelay uint64 `protobuf:"varint,5,opt,name=ThrottlerDelay,proto3" json:"ThrottlerDelay,omitempty"`
}

func (x *TReadBlocksResponse) Reset() {
	*x = TReadBlocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_io_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TReadBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TReadBlocksResponse) ProtoMessage() {}

func (x *TReadBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_io_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TReadBlocksResponse.ProtoReflect.Descriptor instead.
func (*TReadBlocksResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_io_proto_rawDescGZIP(), []int{2}
}

func (x *TReadBlocksResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TReadBlocksResponse) GetBlocks() *TIOVector {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *TReadBlocksResponse) GetTrace() *protos.TTraceInfo {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *TReadBlocksResponse) GetUnencryptedBlockMask() []byte {
	if x != nil {
		return x.UnencryptedBlockMask
	}
	return nil
}

func (x *TReadBlocksResponse) GetThrottlerDelay() uint64 {
	if x != nil {
		return x.ThrottlerDelay
	}
	return 0
}

type TWriteBlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Label of volume to write to.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Start block index.
	StartIndex uint64 `protobuf:"varint,3,opt,name=StartIndex,proto3" json:"StartIndex,omitempty"`
	// Blocks to write.
	Blocks *TIOVector `protobuf:"bytes,4,opt,name=Blocks,proto3" json:"Blocks,omitempty"`
	// Additional flags. Do we need it?
	Flags uint32 `protobuf:"varint,5,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// Session identifier.
	SessionId string `protobuf:"bytes,6,opt,name=SessionId,proto3" json:"SessionId,omitempty"`
}

func (x *TWriteBlocksRequest) Reset() {
	*x = TWriteBlocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_io_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TWriteBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TWriteBlocksRequest) ProtoMessage() {}

func (x *TWriteBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_io_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TWriteBlocksRequest.ProtoReflect.Descriptor instead.
func (*TWriteBlocksRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_io_proto_rawDescGZIP(), []int{3}
}

func (x *TWriteBlocksRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TWriteBlocksRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TWriteBlocksRequest) GetStartIndex() uint64 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *TWriteBlocksRequest) GetBlocks() *TIOVector {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *TWriteBlocksRequest) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *TWriteBlocksRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type TWriteBlocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Request traces.
	Trace *protos.TTraceInfo `protobuf:"bytes,2,opt,name=Trace,proto3" json:"Trace,omitempty"`
	// Throttler delay.
	ThrottlerDelay uint64 `protobuf:"varint,3,opt,name=ThrottlerDelay,proto3" json:"ThrottlerDelay,omitempty"`
}

func (x *TWriteBlocksResponse) Reset() {
	*x = TWriteBlocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_io_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TWriteBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TWriteBlocksResponse) ProtoMessage() {}

func (x *TWriteBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_io_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TWriteBlocksResponse.ProtoReflect.Descriptor instead.
func (*TWriteBlocksResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_io_proto_rawDescGZIP(), []int{4}
}

func (x *TWriteBlocksResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TWriteBlocksResponse) GetTrace() *protos.TTraceInfo {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *TWriteBlocksResponse) GetThrottlerDelay() uint64 {
	if x != nil {
		return x.ThrottlerDelay
	}
	return 0
}

type TZeroBlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Label of volume to write to.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Start block index.
	StartIndex uint64 `protobuf:"varint,3,opt,name=StartIndex,proto3" json:"StartIndex,omitempty"`
	// Number of blocks to delete.
	BlocksCount uint32 `protobuf:"varint,4,opt,name=BlocksCount,proto3" json:"BlocksCount,omitempty"`
	// Additional flags. Do we need it?
	Flags uint32 `protobuf:"varint,5,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// Session identifier.
	SessionId string `protobuf:"bytes,6,opt,name=SessionId,proto3" json:"SessionId,omitempty"`
}

func (x *TZeroBlocksRequest) Reset() {
	*x = TZeroBlocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_io_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TZeroBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TZeroBlocksRequest) ProtoMessage() {}

func (x *TZeroBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_io_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TZeroBlocksRequest.ProtoReflect.Descriptor instead.
func (*TZeroBlocksRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_io_proto_rawDescGZIP(), []int{5}
}

func (x *TZeroBlocksRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TZeroBlocksRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TZeroBlocksRequest) GetStartIndex() uint64 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *TZeroBlocksRequest) GetBlocksCount() uint32 {
	if x != nil {
		return x.BlocksCount
	}
	return 0
}

func (x *TZeroBlocksRequest) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *TZeroBlocksRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type TZeroBlocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Request traces.
	Trace *protos.TTraceInfo `protobuf:"bytes,2,opt,name=Trace,proto3" json:"Trace,omitempty"`
	// Throttler delay.
	ThrottlerDelay uint64 `protobuf:"varint,3,opt,name=ThrottlerDelay,proto3" json:"ThrottlerDelay,omitempty"`
}

func (x *TZeroBlocksResponse) Reset() {
	*x = TZeroBlocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_io_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TZeroBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TZeroBlocksResponse) ProtoMessage() {}

func (x *TZeroBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_io_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TZeroBlocksResponse.ProtoReflect.Descriptor instead.
func (*TZeroBlocksResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_io_proto_rawDescGZIP(), []int{6}
}

func (x *TZeroBlocksResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TZeroBlocksResponse) GetTrace() *protos.TTraceInfo {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *TZeroBlocksResponse) GetThrottlerDelay() uint64 {
	if x != nil {
		return x.ThrottlerDelay
	}
	return 0
}

var File_cloud_blockstore_public_api_protos_io_proto protoreflect.FileDescriptor

var file_cloud_blockstore_public_api_protos_io_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x25, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x25, 0x0a, 0x09, 0x54, 0x49, 0x4f, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x22,
	0x85, 0x02, 0x0a, 0x12, 0x54, 0x52, 0x65, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a,
	0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x8d, 0x02, 0x0a, 0x13, 0x54, 0x52, 0x65, 0x61,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x06,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x49, 0x4f, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x55,
	0x6e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d,
	0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x55, 0x6e, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x61, 0x73, 0x6b, 0x12,
	0x26, 0x0a, 0x0e, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c,
	0x65, 0x72, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x22, 0xfe, 0x01, 0x0a, 0x13, 0x54, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3c, 0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x49, 0x4f, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x14, 0x54, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2f,
	0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c,
	0x65, 0x72, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x22, 0xe1, 0x01, 0x0a, 0x12, 0x54, 0x5a, 0x65, 0x72,
	0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d,
	0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44,
	0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x13,
	0x54, 0x5a, 0x65, 0x72, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x2f, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x72, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x54, 0x68, 0x72, 0x6f, 0x74,
	0x74, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x35, 0x5a, 0x33, 0x61, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x72, 0x75, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_blockstore_public_api_protos_io_proto_rawDescOnce sync.Once
	file_cloud_blockstore_public_api_protos_io_proto_rawDescData = file_cloud_blockstore_public_api_protos_io_proto_rawDesc
)

func file_cloud_blockstore_public_api_protos_io_proto_rawDescGZIP() []byte {
	file_cloud_blockstore_public_api_protos_io_proto_rawDescOnce.Do(func() {
		file_cloud_blockstore_public_api_protos_io_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_blockstore_public_api_protos_io_proto_rawDescData)
	})
	return file_cloud_blockstore_public_api_protos_io_proto_rawDescData
}

var file_cloud_blockstore_public_api_protos_io_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_cloud_blockstore_public_api_protos_io_proto_goTypes = []interface{}{
	(*TIOVector)(nil),            // 0: NCloud.NBlockStore.NProto.TIOVector
	(*TReadBlocksRequest)(nil),   // 1: NCloud.NBlockStore.NProto.TReadBlocksRequest
	(*TReadBlocksResponse)(nil),  // 2: NCloud.NBlockStore.NProto.TReadBlocksResponse
	(*TWriteBlocksRequest)(nil),  // 3: NCloud.NBlockStore.NProto.TWriteBlocksRequest
	(*TWriteBlocksResponse)(nil), // 4: NCloud.NBlockStore.NProto.TWriteBlocksResponse
	(*TZeroBlocksRequest)(nil),   // 5: NCloud.NBlockStore.NProto.TZeroBlocksRequest
	(*TZeroBlocksResponse)(nil),  // 6: NCloud.NBlockStore.NProto.TZeroBlocksResponse
	(*THeaders)(nil),             // 7: NCloud.NBlockStore.NProto.THeaders
	(*protos.TError)(nil),        // 8: NCloud.NProto.TError
	(*protos.TTraceInfo)(nil),    // 9: NCloud.NProto.TTraceInfo
}
var file_cloud_blockstore_public_api_protos_io_proto_depIdxs = []int32{
	7,  // 0: NCloud.NBlockStore.NProto.TReadBlocksRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	8,  // 1: NCloud.NBlockStore.NProto.TReadBlocksResponse.Error:type_name -> NCloud.NProto.TError
	0,  // 2: NCloud.NBlockStore.NProto.TReadBlocksResponse.Blocks:type_name -> NCloud.NBlockStore.NProto.TIOVector
	9,  // 3: NCloud.NBlockStore.NProto.TReadBlocksResponse.Trace:type_name -> NCloud.NProto.TTraceInfo
	7,  // 4: NCloud.NBlockStore.NProto.TWriteBlocksRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	0,  // 5: NCloud.NBlockStore.NProto.TWriteBlocksRequest.Blocks:type_name -> NCloud.NBlockStore.NProto.TIOVector
	8,  // 6: NCloud.NBlockStore.NProto.TWriteBlocksResponse.Error:type_name -> NCloud.NProto.TError
	9,  // 7: NCloud.NBlockStore.NProto.TWriteBlocksResponse.Trace:type_name -> NCloud.NProto.TTraceInfo
	7,  // 8: NCloud.NBlockStore.NProto.TZeroBlocksRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	8,  // 9: NCloud.NBlockStore.NProto.TZeroBlocksResponse.Error:type_name -> NCloud.NProto.TError
	9,  // 10: NCloud.NBlockStore.NProto.TZeroBlocksResponse.Trace:type_name -> NCloud.NProto.TTraceInfo
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_cloud_blockstore_public_api_protos_io_proto_init() }
func file_cloud_blockstore_public_api_protos_io_proto_init() {
	if File_cloud_blockstore_public_api_protos_io_proto != nil {
		return
	}
	file_cloud_blockstore_public_api_protos_headers_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cloud_blockstore_public_api_protos_io_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TIOVector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_io_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TReadBlocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_io_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TReadBlocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_io_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TWriteBlocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_io_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TWriteBlocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_io_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TZeroBlocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_io_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TZeroBlocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_blockstore_public_api_protos_io_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_blockstore_public_api_protos_io_proto_goTypes,
		DependencyIndexes: file_cloud_blockstore_public_api_protos_io_proto_depIdxs,
		MessageInfos:      file_cloud_blockstore_public_api_protos_io_proto_msgTypes,
	}.Build()
	File_cloud_blockstore_public_api_protos_io_proto = out.File
	file_cloud_blockstore_public_api_protos_io_proto_rawDesc = nil
	file_cloud_blockstore_public_api_protos_io_proto_goTypes = nil
	file_cloud_blockstore_public_api_protos_io_proto_depIdxs = nil
}
