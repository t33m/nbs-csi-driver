// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.0
// source: cloud/blockstore/public/api/grpc/service.proto

package grpc

import (
	protos "github.com/ydb-platform/nbs/cloud/blockstore/public/api/protos"
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_cloud_blockstore_public_api_grpc_service_proto protoreflect.FileDescriptor

var file_cloud_blockstore_public_api_grpc_service_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x19, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x69, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x73, 0x73, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x70, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xce, 0x2f,
	0x0a, 0x12, 0x54, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x6b, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x22, 0x05, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x3a, 0x01,
	0x2a, 0x12, 0xa9, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x36, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x37, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1b, 0x22, 0x16, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x8c, 0x01,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2f,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x90, 0x01, 0x0a,
	0x0d, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x30,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x64, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x12,
	0x8c, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x2f, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65,
	0x73, 0x69, 0x7a, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x72, 0x65,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x88,
	0x01, 0x0a, 0x0b, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2e,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x8c, 0x01, 0x0a, 0x0c, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2f, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x88, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x12, 0x22, 0x0d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x3a, 0x01, 0x2a, 0x12, 0x84, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x2d, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x53, 0x74, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x53,
	0x74, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22, 0x0c, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x94, 0x01, 0x0a, 0x0e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x31, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x3a, 0x01,
	0x2a, 0x12, 0xa9, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x36, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x37, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1b, 0x22, 0x16, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x88, 0x01,
	0x0a, 0x0b, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2e, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x90, 0x01, 0x0a, 0x0d, 0x55, 0x6e, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x30, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x55, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x55, 0x6e, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x75, 0x6e, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x84, 0x01, 0x0a, 0x0a,
	0x52, 0x65, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x2d, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x11, 0x22, 0x0c, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0x88, 0x01, 0x0a, 0x0b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x12, 0x2e, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x84, 0x01,
	0x0a, 0x0a, 0x5a, 0x65, 0x72, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x2d, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x5a, 0x65, 0x72, 0x6f, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x5a, 0x65, 0x72, 0x6f, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x11, 0x22, 0x0c, 0x2f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x3a, 0x01, 0x2a, 0x12, 0x9c, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x33, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x3a, 0x01, 0x2a, 0x12, 0x9c, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x33, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x3a,
	0x01, 0x2a, 0x12, 0x9d, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x33, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x67, 0x65, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0xa0, 0x01, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x34, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x90, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x8c, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x6f,
	0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2f, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x90, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x8c, 0x01, 0x0a, 0x0c, 0x4b,
	0x69, 0x63, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2f, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4b, 0x69, 0x63, 0x6b, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4b, 0x69, 0x63, 0x6b, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x8c, 0x01, 0x0a, 0x0c, 0x4c, 0x69,
	0x73, 0x74, 0x4b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2f, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79,
	0x72, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x72, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x9c, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x33, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x34, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17,
	0x22, 0x12, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x98, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x3a,
	0x01, 0x2a, 0x12, 0xbe, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73,
	0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x3b, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x21, 0x22, 0x1c, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x3a, 0x01, 0x2a, 0x12, 0xc6, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x3d, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3e, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0xb1, 0x01, 0x0a,
	0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x38, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x39, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x3a, 0x01, 0x2a,
	0x12, 0xb3, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x1a, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x13, 0x22, 0x0e, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x90, 0x01, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xad, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x37, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0xb1, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x38, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22,
	0x18, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0xd2, 0x01, 0x0a,
	0x1d, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x40,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x41, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x21, 0x2f, 0x61, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x3a, 0x01,
	0x2a, 0x12, 0xa9, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x36, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x37, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1b, 0x22, 0x16, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xb5, 0x01,
	0x0a, 0x16, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x39, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0x86, 0x01, 0x0a, 0x09, 0x43, 0x6d, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x43, 0x6d, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43,
	0x6d, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x63, 0x6d, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x32, 0xd1,
	0x05, 0x0a, 0x16, 0x54, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x13, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x36, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6e, 0x0a, 0x0b, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x2e, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x74, 0x0a, 0x0d, 0x55, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x30, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x55, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x55, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x2d, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x52, 0x65, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x0b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x2e, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x0a, 0x5a, 0x65, 0x72, 0x6f, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x12, 0x2d, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x5a, 0x65, 0x72, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x5a, 0x65, 0x72, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x33, 0x5a, 0x31, 0x61, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x72, 0x75, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_cloud_blockstore_public_api_grpc_service_proto_goTypes = []interface{}{
	(*protos.TPingRequest)(nil),                           // 0: NCloud.NBlockStore.NProto.TPingRequest
	(*protos.TUploadClientMetricsRequest)(nil),            // 1: NCloud.NBlockStore.NProto.TUploadClientMetricsRequest
	(*protos.TCreateVolumeRequest)(nil),                   // 2: NCloud.NBlockStore.NProto.TCreateVolumeRequest
	(*protos.TDestroyVolumeRequest)(nil),                  // 3: NCloud.NBlockStore.NProto.TDestroyVolumeRequest
	(*protos.TResizeVolumeRequest)(nil),                   // 4: NCloud.NBlockStore.NProto.TResizeVolumeRequest
	(*protos.TAlterVolumeRequest)(nil),                    // 5: NCloud.NBlockStore.NProto.TAlterVolumeRequest
	(*protos.TAssignVolumeRequest)(nil),                   // 6: NCloud.NBlockStore.NProto.TAssignVolumeRequest
	(*protos.TListVolumesRequest)(nil),                    // 7: NCloud.NBlockStore.NProto.TListVolumesRequest
	(*protos.TStatVolumeRequest)(nil),                     // 8: NCloud.NBlockStore.NProto.TStatVolumeRequest
	(*protos.TDescribeVolumeRequest)(nil),                 // 9: NCloud.NBlockStore.NProto.TDescribeVolumeRequest
	(*protos.TDescribeVolumeModelRequest)(nil),            // 10: NCloud.NBlockStore.NProto.TDescribeVolumeModelRequest
	(*protos.TMountVolumeRequest)(nil),                    // 11: NCloud.NBlockStore.NProto.TMountVolumeRequest
	(*protos.TUnmountVolumeRequest)(nil),                  // 12: NCloud.NBlockStore.NProto.TUnmountVolumeRequest
	(*protos.TReadBlocksRequest)(nil),                     // 13: NCloud.NBlockStore.NProto.TReadBlocksRequest
	(*protos.TWriteBlocksRequest)(nil),                    // 14: NCloud.NBlockStore.NProto.TWriteBlocksRequest
	(*protos.TZeroBlocksRequest)(nil),                     // 15: NCloud.NBlockStore.NProto.TZeroBlocksRequest
	(*protos.TCreateCheckpointRequest)(nil),               // 16: NCloud.NBlockStore.NProto.TCreateCheckpointRequest
	(*protos.TDeleteCheckpointRequest)(nil),               // 17: NCloud.NBlockStore.NProto.TDeleteCheckpointRequest
	(*protos.TGetChangedBlocksRequest)(nil),               // 18: NCloud.NBlockStore.NProto.TGetChangedBlocksRequest
	(*protos.TDiscoverInstancesRequest)(nil),              // 19: NCloud.NBlockStore.NProto.TDiscoverInstancesRequest
	(*protos.TStartEndpointRequest)(nil),                  // 20: NCloud.NBlockStore.NProto.TStartEndpointRequest
	(*protos.TStopEndpointRequest)(nil),                   // 21: NCloud.NBlockStore.NProto.TStopEndpointRequest
	(*protos.TListEndpointsRequest)(nil),                  // 22: NCloud.NBlockStore.NProto.TListEndpointsRequest
	(*protos.TKickEndpointRequest)(nil),                   // 23: NCloud.NBlockStore.NProto.TKickEndpointRequest
	(*protos.TListKeyringsRequest)(nil),                   // 24: NCloud.NBlockStore.NProto.TListKeyringsRequest
	(*protos.TDescribeEndpointRequest)(nil),               // 25: NCloud.NBlockStore.NProto.TDescribeEndpointRequest
	(*protos.TRefreshEndpointRequest)(nil),                // 26: NCloud.NBlockStore.NProto.TRefreshEndpointRequest
	(*protos.TUpdateDiskRegistryConfigRequest)(nil),       // 27: NCloud.NBlockStore.NProto.TUpdateDiskRegistryConfigRequest
	(*protos.TDescribeDiskRegistryConfigRequest)(nil),     // 28: NCloud.NBlockStore.NProto.TDescribeDiskRegistryConfigRequest
	(*protos.TQueryAvailableStorageRequest)(nil),          // 29: NCloud.NBlockStore.NProto.TQueryAvailableStorageRequest
	(*protos.TCreateVolumeFromDeviceRequest)(nil),         // 30: NCloud.NBlockStore.NProto.TCreateVolumeFromDeviceRequest
	(*protos.TResumeDeviceRequest)(nil),                   // 31: NCloud.NBlockStore.NProto.TResumeDeviceRequest
	(*protos.TExecuteActionRequest)(nil),                  // 32: NCloud.NBlockStore.NProto.TExecuteActionRequest
	(*protos.TCreatePlacementGroupRequest)(nil),           // 33: NCloud.NBlockStore.NProto.TCreatePlacementGroupRequest
	(*protos.TDestroyPlacementGroupRequest)(nil),          // 34: NCloud.NBlockStore.NProto.TDestroyPlacementGroupRequest
	(*protos.TAlterPlacementGroupMembershipRequest)(nil),  // 35: NCloud.NBlockStore.NProto.TAlterPlacementGroupMembershipRequest
	(*protos.TListPlacementGroupsRequest)(nil),            // 36: NCloud.NBlockStore.NProto.TListPlacementGroupsRequest
	(*protos.TDescribePlacementGroupRequest)(nil),         // 37: NCloud.NBlockStore.NProto.TDescribePlacementGroupRequest
	(*protos.TCmsActionRequest)(nil),                      // 38: NCloud.NBlockStore.NProto.TCmsActionRequest
	(*protos.TPingResponse)(nil),                          // 39: NCloud.NBlockStore.NProto.TPingResponse
	(*protos.TUploadClientMetricsResponse)(nil),           // 40: NCloud.NBlockStore.NProto.TUploadClientMetricsResponse
	(*protos.TCreateVolumeResponse)(nil),                  // 41: NCloud.NBlockStore.NProto.TCreateVolumeResponse
	(*protos.TDestroyVolumeResponse)(nil),                 // 42: NCloud.NBlockStore.NProto.TDestroyVolumeResponse
	(*protos.TResizeVolumeResponse)(nil),                  // 43: NCloud.NBlockStore.NProto.TResizeVolumeResponse
	(*protos.TAlterVolumeResponse)(nil),                   // 44: NCloud.NBlockStore.NProto.TAlterVolumeResponse
	(*protos.TAssignVolumeResponse)(nil),                  // 45: NCloud.NBlockStore.NProto.TAssignVolumeResponse
	(*protos.TListVolumesResponse)(nil),                   // 46: NCloud.NBlockStore.NProto.TListVolumesResponse
	(*protos.TStatVolumeResponse)(nil),                    // 47: NCloud.NBlockStore.NProto.TStatVolumeResponse
	(*protos.TDescribeVolumeResponse)(nil),                // 48: NCloud.NBlockStore.NProto.TDescribeVolumeResponse
	(*protos.TDescribeVolumeModelResponse)(nil),           // 49: NCloud.NBlockStore.NProto.TDescribeVolumeModelResponse
	(*protos.TMountVolumeResponse)(nil),                   // 50: NCloud.NBlockStore.NProto.TMountVolumeResponse
	(*protos.TUnmountVolumeResponse)(nil),                 // 51: NCloud.NBlockStore.NProto.TUnmountVolumeResponse
	(*protos.TReadBlocksResponse)(nil),                    // 52: NCloud.NBlockStore.NProto.TReadBlocksResponse
	(*protos.TWriteBlocksResponse)(nil),                   // 53: NCloud.NBlockStore.NProto.TWriteBlocksResponse
	(*protos.TZeroBlocksResponse)(nil),                    // 54: NCloud.NBlockStore.NProto.TZeroBlocksResponse
	(*protos.TCreateCheckpointResponse)(nil),              // 55: NCloud.NBlockStore.NProto.TCreateCheckpointResponse
	(*protos.TDeleteCheckpointResponse)(nil),              // 56: NCloud.NBlockStore.NProto.TDeleteCheckpointResponse
	(*protos.TGetChangedBlocksResponse)(nil),              // 57: NCloud.NBlockStore.NProto.TGetChangedBlocksResponse
	(*protos.TDiscoverInstancesResponse)(nil),             // 58: NCloud.NBlockStore.NProto.TDiscoverInstancesResponse
	(*protos.TStartEndpointResponse)(nil),                 // 59: NCloud.NBlockStore.NProto.TStartEndpointResponse
	(*protos.TStopEndpointResponse)(nil),                  // 60: NCloud.NBlockStore.NProto.TStopEndpointResponse
	(*protos.TListEndpointsResponse)(nil),                 // 61: NCloud.NBlockStore.NProto.TListEndpointsResponse
	(*protos.TKickEndpointResponse)(nil),                  // 62: NCloud.NBlockStore.NProto.TKickEndpointResponse
	(*protos.TListKeyringsResponse)(nil),                  // 63: NCloud.NBlockStore.NProto.TListKeyringsResponse
	(*protos.TDescribeEndpointResponse)(nil),              // 64: NCloud.NBlockStore.NProto.TDescribeEndpointResponse
	(*protos.TRefreshEndpointResponse)(nil),               // 65: NCloud.NBlockStore.NProto.TRefreshEndpointResponse
	(*protos.TUpdateDiskRegistryConfigResponse)(nil),      // 66: NCloud.NBlockStore.NProto.TUpdateDiskRegistryConfigResponse
	(*protos.TDescribeDiskRegistryConfigResponse)(nil),    // 67: NCloud.NBlockStore.NProto.TDescribeDiskRegistryConfigResponse
	(*protos.TQueryAvailableStorageResponse)(nil),         // 68: NCloud.NBlockStore.NProto.TQueryAvailableStorageResponse
	(*protos.TCreateVolumeFromDeviceResponse)(nil),        // 69: NCloud.NBlockStore.NProto.TCreateVolumeFromDeviceResponse
	(*protos.TResumeDeviceResponse)(nil),                  // 70: NCloud.NBlockStore.NProto.TResumeDeviceResponse
	(*protos.TExecuteActionResponse)(nil),                 // 71: NCloud.NBlockStore.NProto.TExecuteActionResponse
	(*protos.TCreatePlacementGroupResponse)(nil),          // 72: NCloud.NBlockStore.NProto.TCreatePlacementGroupResponse
	(*protos.TDestroyPlacementGroupResponse)(nil),         // 73: NCloud.NBlockStore.NProto.TDestroyPlacementGroupResponse
	(*protos.TAlterPlacementGroupMembershipResponse)(nil), // 74: NCloud.NBlockStore.NProto.TAlterPlacementGroupMembershipResponse
	(*protos.TListPlacementGroupsResponse)(nil),           // 75: NCloud.NBlockStore.NProto.TListPlacementGroupsResponse
	(*protos.TDescribePlacementGroupResponse)(nil),        // 76: NCloud.NBlockStore.NProto.TDescribePlacementGroupResponse
	(*protos.TCmsActionResponse)(nil),                     // 77: NCloud.NBlockStore.NProto.TCmsActionResponse
}
var file_cloud_blockstore_public_api_grpc_service_proto_depIdxs = []int32{
	0,  // 0: NCloud.NBlockStore.NProto.TBlockStoreService.Ping:input_type -> NCloud.NBlockStore.NProto.TPingRequest
	1,  // 1: NCloud.NBlockStore.NProto.TBlockStoreService.UploadClientMetrics:input_type -> NCloud.NBlockStore.NProto.TUploadClientMetricsRequest
	2,  // 2: NCloud.NBlockStore.NProto.TBlockStoreService.CreateVolume:input_type -> NCloud.NBlockStore.NProto.TCreateVolumeRequest
	3,  // 3: NCloud.NBlockStore.NProto.TBlockStoreService.DestroyVolume:input_type -> NCloud.NBlockStore.NProto.TDestroyVolumeRequest
	4,  // 4: NCloud.NBlockStore.NProto.TBlockStoreService.ResizeVolume:input_type -> NCloud.NBlockStore.NProto.TResizeVolumeRequest
	5,  // 5: NCloud.NBlockStore.NProto.TBlockStoreService.AlterVolume:input_type -> NCloud.NBlockStore.NProto.TAlterVolumeRequest
	6,  // 6: NCloud.NBlockStore.NProto.TBlockStoreService.AssignVolume:input_type -> NCloud.NBlockStore.NProto.TAssignVolumeRequest
	7,  // 7: NCloud.NBlockStore.NProto.TBlockStoreService.ListVolumes:input_type -> NCloud.NBlockStore.NProto.TListVolumesRequest
	8,  // 8: NCloud.NBlockStore.NProto.TBlockStoreService.StatVolume:input_type -> NCloud.NBlockStore.NProto.TStatVolumeRequest
	9,  // 9: NCloud.NBlockStore.NProto.TBlockStoreService.DescribeVolume:input_type -> NCloud.NBlockStore.NProto.TDescribeVolumeRequest
	10, // 10: NCloud.NBlockStore.NProto.TBlockStoreService.DescribeVolumeModel:input_type -> NCloud.NBlockStore.NProto.TDescribeVolumeModelRequest
	11, // 11: NCloud.NBlockStore.NProto.TBlockStoreService.MountVolume:input_type -> NCloud.NBlockStore.NProto.TMountVolumeRequest
	12, // 12: NCloud.NBlockStore.NProto.TBlockStoreService.UnmountVolume:input_type -> NCloud.NBlockStore.NProto.TUnmountVolumeRequest
	13, // 13: NCloud.NBlockStore.NProto.TBlockStoreService.ReadBlocks:input_type -> NCloud.NBlockStore.NProto.TReadBlocksRequest
	14, // 14: NCloud.NBlockStore.NProto.TBlockStoreService.WriteBlocks:input_type -> NCloud.NBlockStore.NProto.TWriteBlocksRequest
	15, // 15: NCloud.NBlockStore.NProto.TBlockStoreService.ZeroBlocks:input_type -> NCloud.NBlockStore.NProto.TZeroBlocksRequest
	16, // 16: NCloud.NBlockStore.NProto.TBlockStoreService.CreateCheckpoint:input_type -> NCloud.NBlockStore.NProto.TCreateCheckpointRequest
	17, // 17: NCloud.NBlockStore.NProto.TBlockStoreService.DeleteCheckpoint:input_type -> NCloud.NBlockStore.NProto.TDeleteCheckpointRequest
	18, // 18: NCloud.NBlockStore.NProto.TBlockStoreService.GetChangedBlocks:input_type -> NCloud.NBlockStore.NProto.TGetChangedBlocksRequest
	19, // 19: NCloud.NBlockStore.NProto.TBlockStoreService.DiscoverInstances:input_type -> NCloud.NBlockStore.NProto.TDiscoverInstancesRequest
	20, // 20: NCloud.NBlockStore.NProto.TBlockStoreService.StartEndpoint:input_type -> NCloud.NBlockStore.NProto.TStartEndpointRequest
	21, // 21: NCloud.NBlockStore.NProto.TBlockStoreService.StopEndpoint:input_type -> NCloud.NBlockStore.NProto.TStopEndpointRequest
	22, // 22: NCloud.NBlockStore.NProto.TBlockStoreService.ListEndpoints:input_type -> NCloud.NBlockStore.NProto.TListEndpointsRequest
	23, // 23: NCloud.NBlockStore.NProto.TBlockStoreService.KickEndpoint:input_type -> NCloud.NBlockStore.NProto.TKickEndpointRequest
	24, // 24: NCloud.NBlockStore.NProto.TBlockStoreService.ListKeyrings:input_type -> NCloud.NBlockStore.NProto.TListKeyringsRequest
	25, // 25: NCloud.NBlockStore.NProto.TBlockStoreService.DescribeEndpoint:input_type -> NCloud.NBlockStore.NProto.TDescribeEndpointRequest
	26, // 26: NCloud.NBlockStore.NProto.TBlockStoreService.RefreshEndpoint:input_type -> NCloud.NBlockStore.NProto.TRefreshEndpointRequest
	27, // 27: NCloud.NBlockStore.NProto.TBlockStoreService.UpdateDiskRegistryConfig:input_type -> NCloud.NBlockStore.NProto.TUpdateDiskRegistryConfigRequest
	28, // 28: NCloud.NBlockStore.NProto.TBlockStoreService.DescribeDiskRegistryConfig:input_type -> NCloud.NBlockStore.NProto.TDescribeDiskRegistryConfigRequest
	29, // 29: NCloud.NBlockStore.NProto.TBlockStoreService.QueryAvailableStorage:input_type -> NCloud.NBlockStore.NProto.TQueryAvailableStorageRequest
	30, // 30: NCloud.NBlockStore.NProto.TBlockStoreService.CreateVolumeFromDevice:input_type -> NCloud.NBlockStore.NProto.TCreateVolumeFromDeviceRequest
	31, // 31: NCloud.NBlockStore.NProto.TBlockStoreService.ResumeDevice:input_type -> NCloud.NBlockStore.NProto.TResumeDeviceRequest
	32, // 32: NCloud.NBlockStore.NProto.TBlockStoreService.ExecuteAction:input_type -> NCloud.NBlockStore.NProto.TExecuteActionRequest
	33, // 33: NCloud.NBlockStore.NProto.TBlockStoreService.CreatePlacementGroup:input_type -> NCloud.NBlockStore.NProto.TCreatePlacementGroupRequest
	34, // 34: NCloud.NBlockStore.NProto.TBlockStoreService.DestroyPlacementGroup:input_type -> NCloud.NBlockStore.NProto.TDestroyPlacementGroupRequest
	35, // 35: NCloud.NBlockStore.NProto.TBlockStoreService.AlterPlacementGroupMembership:input_type -> NCloud.NBlockStore.NProto.TAlterPlacementGroupMembershipRequest
	36, // 36: NCloud.NBlockStore.NProto.TBlockStoreService.ListPlacementGroups:input_type -> NCloud.NBlockStore.NProto.TListPlacementGroupsRequest
	37, // 37: NCloud.NBlockStore.NProto.TBlockStoreService.DescribePlacementGroup:input_type -> NCloud.NBlockStore.NProto.TDescribePlacementGroupRequest
	38, // 38: NCloud.NBlockStore.NProto.TBlockStoreService.CmsAction:input_type -> NCloud.NBlockStore.NProto.TCmsActionRequest
	1,  // 39: NCloud.NBlockStore.NProto.TBlockStoreDataService.UploadClientMetrics:input_type -> NCloud.NBlockStore.NProto.TUploadClientMetricsRequest
	11, // 40: NCloud.NBlockStore.NProto.TBlockStoreDataService.MountVolume:input_type -> NCloud.NBlockStore.NProto.TMountVolumeRequest
	12, // 41: NCloud.NBlockStore.NProto.TBlockStoreDataService.UnmountVolume:input_type -> NCloud.NBlockStore.NProto.TUnmountVolumeRequest
	13, // 42: NCloud.NBlockStore.NProto.TBlockStoreDataService.ReadBlocks:input_type -> NCloud.NBlockStore.NProto.TReadBlocksRequest
	14, // 43: NCloud.NBlockStore.NProto.TBlockStoreDataService.WriteBlocks:input_type -> NCloud.NBlockStore.NProto.TWriteBlocksRequest
	15, // 44: NCloud.NBlockStore.NProto.TBlockStoreDataService.ZeroBlocks:input_type -> NCloud.NBlockStore.NProto.TZeroBlocksRequest
	39, // 45: NCloud.NBlockStore.NProto.TBlockStoreService.Ping:output_type -> NCloud.NBlockStore.NProto.TPingResponse
	40, // 46: NCloud.NBlockStore.NProto.TBlockStoreService.UploadClientMetrics:output_type -> NCloud.NBlockStore.NProto.TUploadClientMetricsResponse
	41, // 47: NCloud.NBlockStore.NProto.TBlockStoreService.CreateVolume:output_type -> NCloud.NBlockStore.NProto.TCreateVolumeResponse
	42, // 48: NCloud.NBlockStore.NProto.TBlockStoreService.DestroyVolume:output_type -> NCloud.NBlockStore.NProto.TDestroyVolumeResponse
	43, // 49: NCloud.NBlockStore.NProto.TBlockStoreService.ResizeVolume:output_type -> NCloud.NBlockStore.NProto.TResizeVolumeResponse
	44, // 50: NCloud.NBlockStore.NProto.TBlockStoreService.AlterVolume:output_type -> NCloud.NBlockStore.NProto.TAlterVolumeResponse
	45, // 51: NCloud.NBlockStore.NProto.TBlockStoreService.AssignVolume:output_type -> NCloud.NBlockStore.NProto.TAssignVolumeResponse
	46, // 52: NCloud.NBlockStore.NProto.TBlockStoreService.ListVolumes:output_type -> NCloud.NBlockStore.NProto.TListVolumesResponse
	47, // 53: NCloud.NBlockStore.NProto.TBlockStoreService.StatVolume:output_type -> NCloud.NBlockStore.NProto.TStatVolumeResponse
	48, // 54: NCloud.NBlockStore.NProto.TBlockStoreService.DescribeVolume:output_type -> NCloud.NBlockStore.NProto.TDescribeVolumeResponse
	49, // 55: NCloud.NBlockStore.NProto.TBlockStoreService.DescribeVolumeModel:output_type -> NCloud.NBlockStore.NProto.TDescribeVolumeModelResponse
	50, // 56: NCloud.NBlockStore.NProto.TBlockStoreService.MountVolume:output_type -> NCloud.NBlockStore.NProto.TMountVolumeResponse
	51, // 57: NCloud.NBlockStore.NProto.TBlockStoreService.UnmountVolume:output_type -> NCloud.NBlockStore.NProto.TUnmountVolumeResponse
	52, // 58: NCloud.NBlockStore.NProto.TBlockStoreService.ReadBlocks:output_type -> NCloud.NBlockStore.NProto.TReadBlocksResponse
	53, // 59: NCloud.NBlockStore.NProto.TBlockStoreService.WriteBlocks:output_type -> NCloud.NBlockStore.NProto.TWriteBlocksResponse
	54, // 60: NCloud.NBlockStore.NProto.TBlockStoreService.ZeroBlocks:output_type -> NCloud.NBlockStore.NProto.TZeroBlocksResponse
	55, // 61: NCloud.NBlockStore.NProto.TBlockStoreService.CreateCheckpoint:output_type -> NCloud.NBlockStore.NProto.TCreateCheckpointResponse
	56, // 62: NCloud.NBlockStore.NProto.TBlockStoreService.DeleteCheckpoint:output_type -> NCloud.NBlockStore.NProto.TDeleteCheckpointResponse
	57, // 63: NCloud.NBlockStore.NProto.TBlockStoreService.GetChangedBlocks:output_type -> NCloud.NBlockStore.NProto.TGetChangedBlocksResponse
	58, // 64: NCloud.NBlockStore.NProto.TBlockStoreService.DiscoverInstances:output_type -> NCloud.NBlockStore.NProto.TDiscoverInstancesResponse
	59, // 65: NCloud.NBlockStore.NProto.TBlockStoreService.StartEndpoint:output_type -> NCloud.NBlockStore.NProto.TStartEndpointResponse
	60, // 66: NCloud.NBlockStore.NProto.TBlockStoreService.StopEndpoint:output_type -> NCloud.NBlockStore.NProto.TStopEndpointResponse
	61, // 67: NCloud.NBlockStore.NProto.TBlockStoreService.ListEndpoints:output_type -> NCloud.NBlockStore.NProto.TListEndpointsResponse
	62, // 68: NCloud.NBlockStore.NProto.TBlockStoreService.KickEndpoint:output_type -> NCloud.NBlockStore.NProto.TKickEndpointResponse
	63, // 69: NCloud.NBlockStore.NProto.TBlockStoreService.ListKeyrings:output_type -> NCloud.NBlockStore.NProto.TListKeyringsResponse
	64, // 70: NCloud.NBlockStore.NProto.TBlockStoreService.DescribeEndpoint:output_type -> NCloud.NBlockStore.NProto.TDescribeEndpointResponse
	65, // 71: NCloud.NBlockStore.NProto.TBlockStoreService.RefreshEndpoint:output_type -> NCloud.NBlockStore.NProto.TRefreshEndpointResponse
	66, // 72: NCloud.NBlockStore.NProto.TBlockStoreService.UpdateDiskRegistryConfig:output_type -> NCloud.NBlockStore.NProto.TUpdateDiskRegistryConfigResponse
	67, // 73: NCloud.NBlockStore.NProto.TBlockStoreService.DescribeDiskRegistryConfig:output_type -> NCloud.NBlockStore.NProto.TDescribeDiskRegistryConfigResponse
	68, // 74: NCloud.NBlockStore.NProto.TBlockStoreService.QueryAvailableStorage:output_type -> NCloud.NBlockStore.NProto.TQueryAvailableStorageResponse
	69, // 75: NCloud.NBlockStore.NProto.TBlockStoreService.CreateVolumeFromDevice:output_type -> NCloud.NBlockStore.NProto.TCreateVolumeFromDeviceResponse
	70, // 76: NCloud.NBlockStore.NProto.TBlockStoreService.ResumeDevice:output_type -> NCloud.NBlockStore.NProto.TResumeDeviceResponse
	71, // 77: NCloud.NBlockStore.NProto.TBlockStoreService.ExecuteAction:output_type -> NCloud.NBlockStore.NProto.TExecuteActionResponse
	72, // 78: NCloud.NBlockStore.NProto.TBlockStoreService.CreatePlacementGroup:output_type -> NCloud.NBlockStore.NProto.TCreatePlacementGroupResponse
	73, // 79: NCloud.NBlockStore.NProto.TBlockStoreService.DestroyPlacementGroup:output_type -> NCloud.NBlockStore.NProto.TDestroyPlacementGroupResponse
	74, // 80: NCloud.NBlockStore.NProto.TBlockStoreService.AlterPlacementGroupMembership:output_type -> NCloud.NBlockStore.NProto.TAlterPlacementGroupMembershipResponse
	75, // 81: NCloud.NBlockStore.NProto.TBlockStoreService.ListPlacementGroups:output_type -> NCloud.NBlockStore.NProto.TListPlacementGroupsResponse
	76, // 82: NCloud.NBlockStore.NProto.TBlockStoreService.DescribePlacementGroup:output_type -> NCloud.NBlockStore.NProto.TDescribePlacementGroupResponse
	77, // 83: NCloud.NBlockStore.NProto.TBlockStoreService.CmsAction:output_type -> NCloud.NBlockStore.NProto.TCmsActionResponse
	40, // 84: NCloud.NBlockStore.NProto.TBlockStoreDataService.UploadClientMetrics:output_type -> NCloud.NBlockStore.NProto.TUploadClientMetricsResponse
	50, // 85: NCloud.NBlockStore.NProto.TBlockStoreDataService.MountVolume:output_type -> NCloud.NBlockStore.NProto.TMountVolumeResponse
	51, // 86: NCloud.NBlockStore.NProto.TBlockStoreDataService.UnmountVolume:output_type -> NCloud.NBlockStore.NProto.TUnmountVolumeResponse
	52, // 87: NCloud.NBlockStore.NProto.TBlockStoreDataService.ReadBlocks:output_type -> NCloud.NBlockStore.NProto.TReadBlocksResponse
	53, // 88: NCloud.NBlockStore.NProto.TBlockStoreDataService.WriteBlocks:output_type -> NCloud.NBlockStore.NProto.TWriteBlocksResponse
	54, // 89: NCloud.NBlockStore.NProto.TBlockStoreDataService.ZeroBlocks:output_type -> NCloud.NBlockStore.NProto.TZeroBlocksResponse
	45, // [45:90] is the sub-list for method output_type
	0,  // [0:45] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_cloud_blockstore_public_api_grpc_service_proto_init() }
func file_cloud_blockstore_public_api_grpc_service_proto_init() {
	if File_cloud_blockstore_public_api_grpc_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_blockstore_public_api_grpc_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_cloud_blockstore_public_api_grpc_service_proto_goTypes,
		DependencyIndexes: file_cloud_blockstore_public_api_grpc_service_proto_depIdxs,
	}.Build()
	File_cloud_blockstore_public_api_grpc_service_proto = out.File
	file_cloud_blockstore_public_api_grpc_service_proto_rawDesc = nil
	file_cloud_blockstore_public_api_grpc_service_proto_goTypes = nil
	file_cloud_blockstore_public_api_grpc_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TBlockStoreServiceClient is the client API for TBlockStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TBlockStoreServiceClient interface {
	Ping(ctx context.Context, in *protos.TPingRequest, opts ...grpc.CallOption) (*protos.TPingResponse, error)
	UploadClientMetrics(ctx context.Context, in *protos.TUploadClientMetricsRequest, opts ...grpc.CallOption) (*protos.TUploadClientMetricsResponse, error)
	CreateVolume(ctx context.Context, in *protos.TCreateVolumeRequest, opts ...grpc.CallOption) (*protos.TCreateVolumeResponse, error)
	DestroyVolume(ctx context.Context, in *protos.TDestroyVolumeRequest, opts ...grpc.CallOption) (*protos.TDestroyVolumeResponse, error)
	ResizeVolume(ctx context.Context, in *protos.TResizeVolumeRequest, opts ...grpc.CallOption) (*protos.TResizeVolumeResponse, error)
	AlterVolume(ctx context.Context, in *protos.TAlterVolumeRequest, opts ...grpc.CallOption) (*protos.TAlterVolumeResponse, error)
	AssignVolume(ctx context.Context, in *protos.TAssignVolumeRequest, opts ...grpc.CallOption) (*protos.TAssignVolumeResponse, error)
	ListVolumes(ctx context.Context, in *protos.TListVolumesRequest, opts ...grpc.CallOption) (*protos.TListVolumesResponse, error)
	StatVolume(ctx context.Context, in *protos.TStatVolumeRequest, opts ...grpc.CallOption) (*protos.TStatVolumeResponse, error)
	DescribeVolume(ctx context.Context, in *protos.TDescribeVolumeRequest, opts ...grpc.CallOption) (*protos.TDescribeVolumeResponse, error)
	DescribeVolumeModel(ctx context.Context, in *protos.TDescribeVolumeModelRequest, opts ...grpc.CallOption) (*protos.TDescribeVolumeModelResponse, error)
	MountVolume(ctx context.Context, in *protos.TMountVolumeRequest, opts ...grpc.CallOption) (*protos.TMountVolumeResponse, error)
	UnmountVolume(ctx context.Context, in *protos.TUnmountVolumeRequest, opts ...grpc.CallOption) (*protos.TUnmountVolumeResponse, error)
	ReadBlocks(ctx context.Context, in *protos.TReadBlocksRequest, opts ...grpc.CallOption) (*protos.TReadBlocksResponse, error)
	WriteBlocks(ctx context.Context, in *protos.TWriteBlocksRequest, opts ...grpc.CallOption) (*protos.TWriteBlocksResponse, error)
	ZeroBlocks(ctx context.Context, in *protos.TZeroBlocksRequest, opts ...grpc.CallOption) (*protos.TZeroBlocksResponse, error)
	CreateCheckpoint(ctx context.Context, in *protos.TCreateCheckpointRequest, opts ...grpc.CallOption) (*protos.TCreateCheckpointResponse, error)
	DeleteCheckpoint(ctx context.Context, in *protos.TDeleteCheckpointRequest, opts ...grpc.CallOption) (*protos.TDeleteCheckpointResponse, error)
	// Support for differential backup.
	GetChangedBlocks(ctx context.Context, in *protos.TGetChangedBlocksRequest, opts ...grpc.CallOption) (*protos.TGetChangedBlocksResponse, error)
	DiscoverInstances(ctx context.Context, in *protos.TDiscoverInstancesRequest, opts ...grpc.CallOption) (*protos.TDiscoverInstancesResponse, error)
	StartEndpoint(ctx context.Context, in *protos.TStartEndpointRequest, opts ...grpc.CallOption) (*protos.TStartEndpointResponse, error)
	StopEndpoint(ctx context.Context, in *protos.TStopEndpointRequest, opts ...grpc.CallOption) (*protos.TStopEndpointResponse, error)
	ListEndpoints(ctx context.Context, in *protos.TListEndpointsRequest, opts ...grpc.CallOption) (*protos.TListEndpointsResponse, error)
	KickEndpoint(ctx context.Context, in *protos.TKickEndpointRequest, opts ...grpc.CallOption) (*protos.TKickEndpointResponse, error)
	ListKeyrings(ctx context.Context, in *protos.TListKeyringsRequest, opts ...grpc.CallOption) (*protos.TListKeyringsResponse, error)
	DescribeEndpoint(ctx context.Context, in *protos.TDescribeEndpointRequest, opts ...grpc.CallOption) (*protos.TDescribeEndpointResponse, error)
	RefreshEndpoint(ctx context.Context, in *protos.TRefreshEndpointRequest, opts ...grpc.CallOption) (*protos.TRefreshEndpointResponse, error)
	UpdateDiskRegistryConfig(ctx context.Context, in *protos.TUpdateDiskRegistryConfigRequest, opts ...grpc.CallOption) (*protos.TUpdateDiskRegistryConfigResponse, error)
	DescribeDiskRegistryConfig(ctx context.Context, in *protos.TDescribeDiskRegistryConfigRequest, opts ...grpc.CallOption) (*protos.TDescribeDiskRegistryConfigResponse, error)
	QueryAvailableStorage(ctx context.Context, in *protos.TQueryAvailableStorageRequest, opts ...grpc.CallOption) (*protos.TQueryAvailableStorageResponse, error)
	CreateVolumeFromDevice(ctx context.Context, in *protos.TCreateVolumeFromDeviceRequest, opts ...grpc.CallOption) (*protos.TCreateVolumeFromDeviceResponse, error)
	ResumeDevice(ctx context.Context, in *protos.TResumeDeviceRequest, opts ...grpc.CallOption) (*protos.TResumeDeviceResponse, error)
	ExecuteAction(ctx context.Context, in *protos.TExecuteActionRequest, opts ...grpc.CallOption) (*protos.TExecuteActionResponse, error)
	CreatePlacementGroup(ctx context.Context, in *protos.TCreatePlacementGroupRequest, opts ...grpc.CallOption) (*protos.TCreatePlacementGroupResponse, error)
	DestroyPlacementGroup(ctx context.Context, in *protos.TDestroyPlacementGroupRequest, opts ...grpc.CallOption) (*protos.TDestroyPlacementGroupResponse, error)
	AlterPlacementGroupMembership(ctx context.Context, in *protos.TAlterPlacementGroupMembershipRequest, opts ...grpc.CallOption) (*protos.TAlterPlacementGroupMembershipResponse, error)
	ListPlacementGroups(ctx context.Context, in *protos.TListPlacementGroupsRequest, opts ...grpc.CallOption) (*protos.TListPlacementGroupsResponse, error)
	DescribePlacementGroup(ctx context.Context, in *protos.TDescribePlacementGroupRequest, opts ...grpc.CallOption) (*protos.TDescribePlacementGroupResponse, error)
	CmsAction(ctx context.Context, in *protos.TCmsActionRequest, opts ...grpc.CallOption) (*protos.TCmsActionResponse, error)
}

type tBlockStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTBlockStoreServiceClient(cc grpc.ClientConnInterface) TBlockStoreServiceClient {
	return &tBlockStoreServiceClient{cc}
}

func (c *tBlockStoreServiceClient) Ping(ctx context.Context, in *protos.TPingRequest, opts ...grpc.CallOption) (*protos.TPingResponse, error) {
	out := new(protos.TPingResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) UploadClientMetrics(ctx context.Context, in *protos.TUploadClientMetricsRequest, opts ...grpc.CallOption) (*protos.TUploadClientMetricsResponse, error) {
	out := new(protos.TUploadClientMetricsResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/UploadClientMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) CreateVolume(ctx context.Context, in *protos.TCreateVolumeRequest, opts ...grpc.CallOption) (*protos.TCreateVolumeResponse, error) {
	out := new(protos.TCreateVolumeResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/CreateVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) DestroyVolume(ctx context.Context, in *protos.TDestroyVolumeRequest, opts ...grpc.CallOption) (*protos.TDestroyVolumeResponse, error) {
	out := new(protos.TDestroyVolumeResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/DestroyVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) ResizeVolume(ctx context.Context, in *protos.TResizeVolumeRequest, opts ...grpc.CallOption) (*protos.TResizeVolumeResponse, error) {
	out := new(protos.TResizeVolumeResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/ResizeVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) AlterVolume(ctx context.Context, in *protos.TAlterVolumeRequest, opts ...grpc.CallOption) (*protos.TAlterVolumeResponse, error) {
	out := new(protos.TAlterVolumeResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/AlterVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) AssignVolume(ctx context.Context, in *protos.TAssignVolumeRequest, opts ...grpc.CallOption) (*protos.TAssignVolumeResponse, error) {
	out := new(protos.TAssignVolumeResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/AssignVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) ListVolumes(ctx context.Context, in *protos.TListVolumesRequest, opts ...grpc.CallOption) (*protos.TListVolumesResponse, error) {
	out := new(protos.TListVolumesResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/ListVolumes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) StatVolume(ctx context.Context, in *protos.TStatVolumeRequest, opts ...grpc.CallOption) (*protos.TStatVolumeResponse, error) {
	out := new(protos.TStatVolumeResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/StatVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) DescribeVolume(ctx context.Context, in *protos.TDescribeVolumeRequest, opts ...grpc.CallOption) (*protos.TDescribeVolumeResponse, error) {
	out := new(protos.TDescribeVolumeResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/DescribeVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) DescribeVolumeModel(ctx context.Context, in *protos.TDescribeVolumeModelRequest, opts ...grpc.CallOption) (*protos.TDescribeVolumeModelResponse, error) {
	out := new(protos.TDescribeVolumeModelResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/DescribeVolumeModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) MountVolume(ctx context.Context, in *protos.TMountVolumeRequest, opts ...grpc.CallOption) (*protos.TMountVolumeResponse, error) {
	out := new(protos.TMountVolumeResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/MountVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) UnmountVolume(ctx context.Context, in *protos.TUnmountVolumeRequest, opts ...grpc.CallOption) (*protos.TUnmountVolumeResponse, error) {
	out := new(protos.TUnmountVolumeResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/UnmountVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) ReadBlocks(ctx context.Context, in *protos.TReadBlocksRequest, opts ...grpc.CallOption) (*protos.TReadBlocksResponse, error) {
	out := new(protos.TReadBlocksResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/ReadBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) WriteBlocks(ctx context.Context, in *protos.TWriteBlocksRequest, opts ...grpc.CallOption) (*protos.TWriteBlocksResponse, error) {
	out := new(protos.TWriteBlocksResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/WriteBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) ZeroBlocks(ctx context.Context, in *protos.TZeroBlocksRequest, opts ...grpc.CallOption) (*protos.TZeroBlocksResponse, error) {
	out := new(protos.TZeroBlocksResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/ZeroBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) CreateCheckpoint(ctx context.Context, in *protos.TCreateCheckpointRequest, opts ...grpc.CallOption) (*protos.TCreateCheckpointResponse, error) {
	out := new(protos.TCreateCheckpointResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/CreateCheckpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) DeleteCheckpoint(ctx context.Context, in *protos.TDeleteCheckpointRequest, opts ...grpc.CallOption) (*protos.TDeleteCheckpointResponse, error) {
	out := new(protos.TDeleteCheckpointResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/DeleteCheckpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) GetChangedBlocks(ctx context.Context, in *protos.TGetChangedBlocksRequest, opts ...grpc.CallOption) (*protos.TGetChangedBlocksResponse, error) {
	out := new(protos.TGetChangedBlocksResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/GetChangedBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) DiscoverInstances(ctx context.Context, in *protos.TDiscoverInstancesRequest, opts ...grpc.CallOption) (*protos.TDiscoverInstancesResponse, error) {
	out := new(protos.TDiscoverInstancesResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/DiscoverInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) StartEndpoint(ctx context.Context, in *protos.TStartEndpointRequest, opts ...grpc.CallOption) (*protos.TStartEndpointResponse, error) {
	out := new(protos.TStartEndpointResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/StartEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) StopEndpoint(ctx context.Context, in *protos.TStopEndpointRequest, opts ...grpc.CallOption) (*protos.TStopEndpointResponse, error) {
	out := new(protos.TStopEndpointResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/StopEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) ListEndpoints(ctx context.Context, in *protos.TListEndpointsRequest, opts ...grpc.CallOption) (*protos.TListEndpointsResponse, error) {
	out := new(protos.TListEndpointsResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/ListEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) KickEndpoint(ctx context.Context, in *protos.TKickEndpointRequest, opts ...grpc.CallOption) (*protos.TKickEndpointResponse, error) {
	out := new(protos.TKickEndpointResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/KickEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) ListKeyrings(ctx context.Context, in *protos.TListKeyringsRequest, opts ...grpc.CallOption) (*protos.TListKeyringsResponse, error) {
	out := new(protos.TListKeyringsResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/ListKeyrings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) DescribeEndpoint(ctx context.Context, in *protos.TDescribeEndpointRequest, opts ...grpc.CallOption) (*protos.TDescribeEndpointResponse, error) {
	out := new(protos.TDescribeEndpointResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/DescribeEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) RefreshEndpoint(ctx context.Context, in *protos.TRefreshEndpointRequest, opts ...grpc.CallOption) (*protos.TRefreshEndpointResponse, error) {
	out := new(protos.TRefreshEndpointResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/RefreshEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) UpdateDiskRegistryConfig(ctx context.Context, in *protos.TUpdateDiskRegistryConfigRequest, opts ...grpc.CallOption) (*protos.TUpdateDiskRegistryConfigResponse, error) {
	out := new(protos.TUpdateDiskRegistryConfigResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/UpdateDiskRegistryConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) DescribeDiskRegistryConfig(ctx context.Context, in *protos.TDescribeDiskRegistryConfigRequest, opts ...grpc.CallOption) (*protos.TDescribeDiskRegistryConfigResponse, error) {
	out := new(protos.TDescribeDiskRegistryConfigResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/DescribeDiskRegistryConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) QueryAvailableStorage(ctx context.Context, in *protos.TQueryAvailableStorageRequest, opts ...grpc.CallOption) (*protos.TQueryAvailableStorageResponse, error) {
	out := new(protos.TQueryAvailableStorageResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/QueryAvailableStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) CreateVolumeFromDevice(ctx context.Context, in *protos.TCreateVolumeFromDeviceRequest, opts ...grpc.CallOption) (*protos.TCreateVolumeFromDeviceResponse, error) {
	out := new(protos.TCreateVolumeFromDeviceResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/CreateVolumeFromDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) ResumeDevice(ctx context.Context, in *protos.TResumeDeviceRequest, opts ...grpc.CallOption) (*protos.TResumeDeviceResponse, error) {
	out := new(protos.TResumeDeviceResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/ResumeDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) ExecuteAction(ctx context.Context, in *protos.TExecuteActionRequest, opts ...grpc.CallOption) (*protos.TExecuteActionResponse, error) {
	out := new(protos.TExecuteActionResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/ExecuteAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) CreatePlacementGroup(ctx context.Context, in *protos.TCreatePlacementGroupRequest, opts ...grpc.CallOption) (*protos.TCreatePlacementGroupResponse, error) {
	out := new(protos.TCreatePlacementGroupResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/CreatePlacementGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) DestroyPlacementGroup(ctx context.Context, in *protos.TDestroyPlacementGroupRequest, opts ...grpc.CallOption) (*protos.TDestroyPlacementGroupResponse, error) {
	out := new(protos.TDestroyPlacementGroupResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/DestroyPlacementGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) AlterPlacementGroupMembership(ctx context.Context, in *protos.TAlterPlacementGroupMembershipRequest, opts ...grpc.CallOption) (*protos.TAlterPlacementGroupMembershipResponse, error) {
	out := new(protos.TAlterPlacementGroupMembershipResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/AlterPlacementGroupMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) ListPlacementGroups(ctx context.Context, in *protos.TListPlacementGroupsRequest, opts ...grpc.CallOption) (*protos.TListPlacementGroupsResponse, error) {
	out := new(protos.TListPlacementGroupsResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/ListPlacementGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) DescribePlacementGroup(ctx context.Context, in *protos.TDescribePlacementGroupRequest, opts ...grpc.CallOption) (*protos.TDescribePlacementGroupResponse, error) {
	out := new(protos.TDescribePlacementGroupResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/DescribePlacementGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreServiceClient) CmsAction(ctx context.Context, in *protos.TCmsActionRequest, opts ...grpc.CallOption) (*protos.TCmsActionResponse, error) {
	out := new(protos.TCmsActionResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreService/CmsAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TBlockStoreServiceServer is the server API for TBlockStoreService service.
type TBlockStoreServiceServer interface {
	Ping(context.Context, *protos.TPingRequest) (*protos.TPingResponse, error)
	UploadClientMetrics(context.Context, *protos.TUploadClientMetricsRequest) (*protos.TUploadClientMetricsResponse, error)
	CreateVolume(context.Context, *protos.TCreateVolumeRequest) (*protos.TCreateVolumeResponse, error)
	DestroyVolume(context.Context, *protos.TDestroyVolumeRequest) (*protos.TDestroyVolumeResponse, error)
	ResizeVolume(context.Context, *protos.TResizeVolumeRequest) (*protos.TResizeVolumeResponse, error)
	AlterVolume(context.Context, *protos.TAlterVolumeRequest) (*protos.TAlterVolumeResponse, error)
	AssignVolume(context.Context, *protos.TAssignVolumeRequest) (*protos.TAssignVolumeResponse, error)
	ListVolumes(context.Context, *protos.TListVolumesRequest) (*protos.TListVolumesResponse, error)
	StatVolume(context.Context, *protos.TStatVolumeRequest) (*protos.TStatVolumeResponse, error)
	DescribeVolume(context.Context, *protos.TDescribeVolumeRequest) (*protos.TDescribeVolumeResponse, error)
	DescribeVolumeModel(context.Context, *protos.TDescribeVolumeModelRequest) (*protos.TDescribeVolumeModelResponse, error)
	MountVolume(context.Context, *protos.TMountVolumeRequest) (*protos.TMountVolumeResponse, error)
	UnmountVolume(context.Context, *protos.TUnmountVolumeRequest) (*protos.TUnmountVolumeResponse, error)
	ReadBlocks(context.Context, *protos.TReadBlocksRequest) (*protos.TReadBlocksResponse, error)
	WriteBlocks(context.Context, *protos.TWriteBlocksRequest) (*protos.TWriteBlocksResponse, error)
	ZeroBlocks(context.Context, *protos.TZeroBlocksRequest) (*protos.TZeroBlocksResponse, error)
	CreateCheckpoint(context.Context, *protos.TCreateCheckpointRequest) (*protos.TCreateCheckpointResponse, error)
	DeleteCheckpoint(context.Context, *protos.TDeleteCheckpointRequest) (*protos.TDeleteCheckpointResponse, error)
	// Support for differential backup.
	GetChangedBlocks(context.Context, *protos.TGetChangedBlocksRequest) (*protos.TGetChangedBlocksResponse, error)
	DiscoverInstances(context.Context, *protos.TDiscoverInstancesRequest) (*protos.TDiscoverInstancesResponse, error)
	StartEndpoint(context.Context, *protos.TStartEndpointRequest) (*protos.TStartEndpointResponse, error)
	StopEndpoint(context.Context, *protos.TStopEndpointRequest) (*protos.TStopEndpointResponse, error)
	ListEndpoints(context.Context, *protos.TListEndpointsRequest) (*protos.TListEndpointsResponse, error)
	KickEndpoint(context.Context, *protos.TKickEndpointRequest) (*protos.TKickEndpointResponse, error)
	ListKeyrings(context.Context, *protos.TListKeyringsRequest) (*protos.TListKeyringsResponse, error)
	DescribeEndpoint(context.Context, *protos.TDescribeEndpointRequest) (*protos.TDescribeEndpointResponse, error)
	RefreshEndpoint(context.Context, *protos.TRefreshEndpointRequest) (*protos.TRefreshEndpointResponse, error)
	UpdateDiskRegistryConfig(context.Context, *protos.TUpdateDiskRegistryConfigRequest) (*protos.TUpdateDiskRegistryConfigResponse, error)
	DescribeDiskRegistryConfig(context.Context, *protos.TDescribeDiskRegistryConfigRequest) (*protos.TDescribeDiskRegistryConfigResponse, error)
	QueryAvailableStorage(context.Context, *protos.TQueryAvailableStorageRequest) (*protos.TQueryAvailableStorageResponse, error)
	CreateVolumeFromDevice(context.Context, *protos.TCreateVolumeFromDeviceRequest) (*protos.TCreateVolumeFromDeviceResponse, error)
	ResumeDevice(context.Context, *protos.TResumeDeviceRequest) (*protos.TResumeDeviceResponse, error)
	ExecuteAction(context.Context, *protos.TExecuteActionRequest) (*protos.TExecuteActionResponse, error)
	CreatePlacementGroup(context.Context, *protos.TCreatePlacementGroupRequest) (*protos.TCreatePlacementGroupResponse, error)
	DestroyPlacementGroup(context.Context, *protos.TDestroyPlacementGroupRequest) (*protos.TDestroyPlacementGroupResponse, error)
	AlterPlacementGroupMembership(context.Context, *protos.TAlterPlacementGroupMembershipRequest) (*protos.TAlterPlacementGroupMembershipResponse, error)
	ListPlacementGroups(context.Context, *protos.TListPlacementGroupsRequest) (*protos.TListPlacementGroupsResponse, error)
	DescribePlacementGroup(context.Context, *protos.TDescribePlacementGroupRequest) (*protos.TDescribePlacementGroupResponse, error)
	CmsAction(context.Context, *protos.TCmsActionRequest) (*protos.TCmsActionResponse, error)
}

// UnimplementedTBlockStoreServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTBlockStoreServiceServer struct {
}

func (*UnimplementedTBlockStoreServiceServer) Ping(context.Context, *protos.TPingRequest) (*protos.TPingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) UploadClientMetrics(context.Context, *protos.TUploadClientMetricsRequest) (*protos.TUploadClientMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadClientMetrics not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) CreateVolume(context.Context, *protos.TCreateVolumeRequest) (*protos.TCreateVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVolume not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) DestroyVolume(context.Context, *protos.TDestroyVolumeRequest) (*protos.TDestroyVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyVolume not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) ResizeVolume(context.Context, *protos.TResizeVolumeRequest) (*protos.TResizeVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResizeVolume not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) AlterVolume(context.Context, *protos.TAlterVolumeRequest) (*protos.TAlterVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterVolume not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) AssignVolume(context.Context, *protos.TAssignVolumeRequest) (*protos.TAssignVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignVolume not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) ListVolumes(context.Context, *protos.TListVolumesRequest) (*protos.TListVolumesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVolumes not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) StatVolume(context.Context, *protos.TStatVolumeRequest) (*protos.TStatVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatVolume not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) DescribeVolume(context.Context, *protos.TDescribeVolumeRequest) (*protos.TDescribeVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeVolume not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) DescribeVolumeModel(context.Context, *protos.TDescribeVolumeModelRequest) (*protos.TDescribeVolumeModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeVolumeModel not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) MountVolume(context.Context, *protos.TMountVolumeRequest) (*protos.TMountVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MountVolume not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) UnmountVolume(context.Context, *protos.TUnmountVolumeRequest) (*protos.TUnmountVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnmountVolume not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) ReadBlocks(context.Context, *protos.TReadBlocksRequest) (*protos.TReadBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadBlocks not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) WriteBlocks(context.Context, *protos.TWriteBlocksRequest) (*protos.TWriteBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteBlocks not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) ZeroBlocks(context.Context, *protos.TZeroBlocksRequest) (*protos.TZeroBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZeroBlocks not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) CreateCheckpoint(context.Context, *protos.TCreateCheckpointRequest) (*protos.TCreateCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCheckpoint not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) DeleteCheckpoint(context.Context, *protos.TDeleteCheckpointRequest) (*protos.TDeleteCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCheckpoint not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) GetChangedBlocks(context.Context, *protos.TGetChangedBlocksRequest) (*protos.TGetChangedBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChangedBlocks not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) DiscoverInstances(context.Context, *protos.TDiscoverInstancesRequest) (*protos.TDiscoverInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverInstances not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) StartEndpoint(context.Context, *protos.TStartEndpointRequest) (*protos.TStartEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartEndpoint not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) StopEndpoint(context.Context, *protos.TStopEndpointRequest) (*protos.TStopEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopEndpoint not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) ListEndpoints(context.Context, *protos.TListEndpointsRequest) (*protos.TListEndpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEndpoints not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) KickEndpoint(context.Context, *protos.TKickEndpointRequest) (*protos.TKickEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickEndpoint not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) ListKeyrings(context.Context, *protos.TListKeyringsRequest) (*protos.TListKeyringsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeyrings not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) DescribeEndpoint(context.Context, *protos.TDescribeEndpointRequest) (*protos.TDescribeEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeEndpoint not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) RefreshEndpoint(context.Context, *protos.TRefreshEndpointRequest) (*protos.TRefreshEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshEndpoint not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) UpdateDiskRegistryConfig(context.Context, *protos.TUpdateDiskRegistryConfigRequest) (*protos.TUpdateDiskRegistryConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDiskRegistryConfig not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) DescribeDiskRegistryConfig(context.Context, *protos.TDescribeDiskRegistryConfigRequest) (*protos.TDescribeDiskRegistryConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeDiskRegistryConfig not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) QueryAvailableStorage(context.Context, *protos.TQueryAvailableStorageRequest) (*protos.TQueryAvailableStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAvailableStorage not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) CreateVolumeFromDevice(context.Context, *protos.TCreateVolumeFromDeviceRequest) (*protos.TCreateVolumeFromDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVolumeFromDevice not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) ResumeDevice(context.Context, *protos.TResumeDeviceRequest) (*protos.TResumeDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeDevice not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) ExecuteAction(context.Context, *protos.TExecuteActionRequest) (*protos.TExecuteActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAction not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) CreatePlacementGroup(context.Context, *protos.TCreatePlacementGroupRequest) (*protos.TCreatePlacementGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlacementGroup not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) DestroyPlacementGroup(context.Context, *protos.TDestroyPlacementGroupRequest) (*protos.TDestroyPlacementGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyPlacementGroup not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) AlterPlacementGroupMembership(context.Context, *protos.TAlterPlacementGroupMembershipRequest) (*protos.TAlterPlacementGroupMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterPlacementGroupMembership not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) ListPlacementGroups(context.Context, *protos.TListPlacementGroupsRequest) (*protos.TListPlacementGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlacementGroups not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) DescribePlacementGroup(context.Context, *protos.TDescribePlacementGroupRequest) (*protos.TDescribePlacementGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePlacementGroup not implemented")
}
func (*UnimplementedTBlockStoreServiceServer) CmsAction(context.Context, *protos.TCmsActionRequest) (*protos.TCmsActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmsAction not implemented")
}

func RegisterTBlockStoreServiceServer(s *grpc.Server, srv TBlockStoreServiceServer) {
	s.RegisterService(&_TBlockStoreService_serviceDesc, srv)
}

func _TBlockStoreService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TPingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).Ping(ctx, req.(*protos.TPingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_UploadClientMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TUploadClientMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).UploadClientMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/UploadClientMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).UploadClientMetrics(ctx, req.(*protos.TUploadClientMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_CreateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TCreateVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).CreateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/CreateVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).CreateVolume(ctx, req.(*protos.TCreateVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_DestroyVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TDestroyVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).DestroyVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/DestroyVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).DestroyVolume(ctx, req.(*protos.TDestroyVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_ResizeVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TResizeVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).ResizeVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/ResizeVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).ResizeVolume(ctx, req.(*protos.TResizeVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_AlterVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TAlterVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).AlterVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/AlterVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).AlterVolume(ctx, req.(*protos.TAlterVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_AssignVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TAssignVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).AssignVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/AssignVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).AssignVolume(ctx, req.(*protos.TAssignVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_ListVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TListVolumesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).ListVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/ListVolumes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).ListVolumes(ctx, req.(*protos.TListVolumesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_StatVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TStatVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).StatVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/StatVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).StatVolume(ctx, req.(*protos.TStatVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_DescribeVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TDescribeVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).DescribeVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/DescribeVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).DescribeVolume(ctx, req.(*protos.TDescribeVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_DescribeVolumeModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TDescribeVolumeModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).DescribeVolumeModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/DescribeVolumeModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).DescribeVolumeModel(ctx, req.(*protos.TDescribeVolumeModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_MountVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TMountVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).MountVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/MountVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).MountVolume(ctx, req.(*protos.TMountVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_UnmountVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TUnmountVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).UnmountVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/UnmountVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).UnmountVolume(ctx, req.(*protos.TUnmountVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_ReadBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TReadBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).ReadBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/ReadBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).ReadBlocks(ctx, req.(*protos.TReadBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_WriteBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TWriteBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).WriteBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/WriteBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).WriteBlocks(ctx, req.(*protos.TWriteBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_ZeroBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TZeroBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).ZeroBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/ZeroBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).ZeroBlocks(ctx, req.(*protos.TZeroBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_CreateCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TCreateCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).CreateCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/CreateCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).CreateCheckpoint(ctx, req.(*protos.TCreateCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_DeleteCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TDeleteCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).DeleteCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/DeleteCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).DeleteCheckpoint(ctx, req.(*protos.TDeleteCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_GetChangedBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TGetChangedBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).GetChangedBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/GetChangedBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).GetChangedBlocks(ctx, req.(*protos.TGetChangedBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_DiscoverInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TDiscoverInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).DiscoverInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/DiscoverInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).DiscoverInstances(ctx, req.(*protos.TDiscoverInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_StartEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TStartEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).StartEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/StartEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).StartEndpoint(ctx, req.(*protos.TStartEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_StopEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TStopEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).StopEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/StopEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).StopEndpoint(ctx, req.(*protos.TStopEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_ListEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TListEndpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).ListEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/ListEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).ListEndpoints(ctx, req.(*protos.TListEndpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_KickEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TKickEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).KickEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/KickEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).KickEndpoint(ctx, req.(*protos.TKickEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_ListKeyrings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TListKeyringsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).ListKeyrings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/ListKeyrings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).ListKeyrings(ctx, req.(*protos.TListKeyringsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_DescribeEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TDescribeEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).DescribeEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/DescribeEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).DescribeEndpoint(ctx, req.(*protos.TDescribeEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_RefreshEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TRefreshEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).RefreshEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/RefreshEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).RefreshEndpoint(ctx, req.(*protos.TRefreshEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_UpdateDiskRegistryConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TUpdateDiskRegistryConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).UpdateDiskRegistryConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/UpdateDiskRegistryConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).UpdateDiskRegistryConfig(ctx, req.(*protos.TUpdateDiskRegistryConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_DescribeDiskRegistryConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TDescribeDiskRegistryConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).DescribeDiskRegistryConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/DescribeDiskRegistryConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).DescribeDiskRegistryConfig(ctx, req.(*protos.TDescribeDiskRegistryConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_QueryAvailableStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TQueryAvailableStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).QueryAvailableStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/QueryAvailableStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).QueryAvailableStorage(ctx, req.(*protos.TQueryAvailableStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_CreateVolumeFromDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TCreateVolumeFromDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).CreateVolumeFromDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/CreateVolumeFromDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).CreateVolumeFromDevice(ctx, req.(*protos.TCreateVolumeFromDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_ResumeDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TResumeDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).ResumeDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/ResumeDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).ResumeDevice(ctx, req.(*protos.TResumeDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_ExecuteAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TExecuteActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).ExecuteAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/ExecuteAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).ExecuteAction(ctx, req.(*protos.TExecuteActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_CreatePlacementGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TCreatePlacementGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).CreatePlacementGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/CreatePlacementGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).CreatePlacementGroup(ctx, req.(*protos.TCreatePlacementGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_DestroyPlacementGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TDestroyPlacementGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).DestroyPlacementGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/DestroyPlacementGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).DestroyPlacementGroup(ctx, req.(*protos.TDestroyPlacementGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_AlterPlacementGroupMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TAlterPlacementGroupMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).AlterPlacementGroupMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/AlterPlacementGroupMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).AlterPlacementGroupMembership(ctx, req.(*protos.TAlterPlacementGroupMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_ListPlacementGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TListPlacementGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).ListPlacementGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/ListPlacementGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).ListPlacementGroups(ctx, req.(*protos.TListPlacementGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_DescribePlacementGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TDescribePlacementGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).DescribePlacementGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/DescribePlacementGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).DescribePlacementGroup(ctx, req.(*protos.TDescribePlacementGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreService_CmsAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TCmsActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreServiceServer).CmsAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreService/CmsAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreServiceServer).CmsAction(ctx, req.(*protos.TCmsActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TBlockStoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "NCloud.NBlockStore.NProto.TBlockStoreService",
	HandlerType: (*TBlockStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _TBlockStoreService_Ping_Handler,
		},
		{
			MethodName: "UploadClientMetrics",
			Handler:    _TBlockStoreService_UploadClientMetrics_Handler,
		},
		{
			MethodName: "CreateVolume",
			Handler:    _TBlockStoreService_CreateVolume_Handler,
		},
		{
			MethodName: "DestroyVolume",
			Handler:    _TBlockStoreService_DestroyVolume_Handler,
		},
		{
			MethodName: "ResizeVolume",
			Handler:    _TBlockStoreService_ResizeVolume_Handler,
		},
		{
			MethodName: "AlterVolume",
			Handler:    _TBlockStoreService_AlterVolume_Handler,
		},
		{
			MethodName: "AssignVolume",
			Handler:    _TBlockStoreService_AssignVolume_Handler,
		},
		{
			MethodName: "ListVolumes",
			Handler:    _TBlockStoreService_ListVolumes_Handler,
		},
		{
			MethodName: "StatVolume",
			Handler:    _TBlockStoreService_StatVolume_Handler,
		},
		{
			MethodName: "DescribeVolume",
			Handler:    _TBlockStoreService_DescribeVolume_Handler,
		},
		{
			MethodName: "DescribeVolumeModel",
			Handler:    _TBlockStoreService_DescribeVolumeModel_Handler,
		},
		{
			MethodName: "MountVolume",
			Handler:    _TBlockStoreService_MountVolume_Handler,
		},
		{
			MethodName: "UnmountVolume",
			Handler:    _TBlockStoreService_UnmountVolume_Handler,
		},
		{
			MethodName: "ReadBlocks",
			Handler:    _TBlockStoreService_ReadBlocks_Handler,
		},
		{
			MethodName: "WriteBlocks",
			Handler:    _TBlockStoreService_WriteBlocks_Handler,
		},
		{
			MethodName: "ZeroBlocks",
			Handler:    _TBlockStoreService_ZeroBlocks_Handler,
		},
		{
			MethodName: "CreateCheckpoint",
			Handler:    _TBlockStoreService_CreateCheckpoint_Handler,
		},
		{
			MethodName: "DeleteCheckpoint",
			Handler:    _TBlockStoreService_DeleteCheckpoint_Handler,
		},
		{
			MethodName: "GetChangedBlocks",
			Handler:    _TBlockStoreService_GetChangedBlocks_Handler,
		},
		{
			MethodName: "DiscoverInstances",
			Handler:    _TBlockStoreService_DiscoverInstances_Handler,
		},
		{
			MethodName: "StartEndpoint",
			Handler:    _TBlockStoreService_StartEndpoint_Handler,
		},
		{
			MethodName: "StopEndpoint",
			Handler:    _TBlockStoreService_StopEndpoint_Handler,
		},
		{
			MethodName: "ListEndpoints",
			Handler:    _TBlockStoreService_ListEndpoints_Handler,
		},
		{
			MethodName: "KickEndpoint",
			Handler:    _TBlockStoreService_KickEndpoint_Handler,
		},
		{
			MethodName: "ListKeyrings",
			Handler:    _TBlockStoreService_ListKeyrings_Handler,
		},
		{
			MethodName: "DescribeEndpoint",
			Handler:    _TBlockStoreService_DescribeEndpoint_Handler,
		},
		{
			MethodName: "RefreshEndpoint",
			Handler:    _TBlockStoreService_RefreshEndpoint_Handler,
		},
		{
			MethodName: "UpdateDiskRegistryConfig",
			Handler:    _TBlockStoreService_UpdateDiskRegistryConfig_Handler,
		},
		{
			MethodName: "DescribeDiskRegistryConfig",
			Handler:    _TBlockStoreService_DescribeDiskRegistryConfig_Handler,
		},
		{
			MethodName: "QueryAvailableStorage",
			Handler:    _TBlockStoreService_QueryAvailableStorage_Handler,
		},
		{
			MethodName: "CreateVolumeFromDevice",
			Handler:    _TBlockStoreService_CreateVolumeFromDevice_Handler,
		},
		{
			MethodName: "ResumeDevice",
			Handler:    _TBlockStoreService_ResumeDevice_Handler,
		},
		{
			MethodName: "ExecuteAction",
			Handler:    _TBlockStoreService_ExecuteAction_Handler,
		},
		{
			MethodName: "CreatePlacementGroup",
			Handler:    _TBlockStoreService_CreatePlacementGroup_Handler,
		},
		{
			MethodName: "DestroyPlacementGroup",
			Handler:    _TBlockStoreService_DestroyPlacementGroup_Handler,
		},
		{
			MethodName: "AlterPlacementGroupMembership",
			Handler:    _TBlockStoreService_AlterPlacementGroupMembership_Handler,
		},
		{
			MethodName: "ListPlacementGroups",
			Handler:    _TBlockStoreService_ListPlacementGroups_Handler,
		},
		{
			MethodName: "DescribePlacementGroup",
			Handler:    _TBlockStoreService_DescribePlacementGroup_Handler,
		},
		{
			MethodName: "CmsAction",
			Handler:    _TBlockStoreService_CmsAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/blockstore/public/api/grpc/service.proto",
}

// TBlockStoreDataServiceClient is the client API for TBlockStoreDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TBlockStoreDataServiceClient interface {
	// Service requests.
	UploadClientMetrics(ctx context.Context, in *protos.TUploadClientMetricsRequest, opts ...grpc.CallOption) (*protos.TUploadClientMetricsResponse, error)
	// Mount operations.
	MountVolume(ctx context.Context, in *protos.TMountVolumeRequest, opts ...grpc.CallOption) (*protos.TMountVolumeResponse, error)
	UnmountVolume(ctx context.Context, in *protos.TUnmountVolumeRequest, opts ...grpc.CallOption) (*protos.TUnmountVolumeResponse, error)
	// Block I/O.
	ReadBlocks(ctx context.Context, in *protos.TReadBlocksRequest, opts ...grpc.CallOption) (*protos.TReadBlocksResponse, error)
	WriteBlocks(ctx context.Context, in *protos.TWriteBlocksRequest, opts ...grpc.CallOption) (*protos.TWriteBlocksResponse, error)
	ZeroBlocks(ctx context.Context, in *protos.TZeroBlocksRequest, opts ...grpc.CallOption) (*protos.TZeroBlocksResponse, error)
}

type tBlockStoreDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTBlockStoreDataServiceClient(cc grpc.ClientConnInterface) TBlockStoreDataServiceClient {
	return &tBlockStoreDataServiceClient{cc}
}

func (c *tBlockStoreDataServiceClient) UploadClientMetrics(ctx context.Context, in *protos.TUploadClientMetricsRequest, opts ...grpc.CallOption) (*protos.TUploadClientMetricsResponse, error) {
	out := new(protos.TUploadClientMetricsResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreDataService/UploadClientMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreDataServiceClient) MountVolume(ctx context.Context, in *protos.TMountVolumeRequest, opts ...grpc.CallOption) (*protos.TMountVolumeResponse, error) {
	out := new(protos.TMountVolumeResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreDataService/MountVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreDataServiceClient) UnmountVolume(ctx context.Context, in *protos.TUnmountVolumeRequest, opts ...grpc.CallOption) (*protos.TUnmountVolumeResponse, error) {
	out := new(protos.TUnmountVolumeResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreDataService/UnmountVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreDataServiceClient) ReadBlocks(ctx context.Context, in *protos.TReadBlocksRequest, opts ...grpc.CallOption) (*protos.TReadBlocksResponse, error) {
	out := new(protos.TReadBlocksResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreDataService/ReadBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreDataServiceClient) WriteBlocks(ctx context.Context, in *protos.TWriteBlocksRequest, opts ...grpc.CallOption) (*protos.TWriteBlocksResponse, error) {
	out := new(protos.TWriteBlocksResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreDataService/WriteBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBlockStoreDataServiceClient) ZeroBlocks(ctx context.Context, in *protos.TZeroBlocksRequest, opts ...grpc.CallOption) (*protos.TZeroBlocksResponse, error) {
	out := new(protos.TZeroBlocksResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NBlockStore.NProto.TBlockStoreDataService/ZeroBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TBlockStoreDataServiceServer is the server API for TBlockStoreDataService service.
type TBlockStoreDataServiceServer interface {
	// Service requests.
	UploadClientMetrics(context.Context, *protos.TUploadClientMetricsRequest) (*protos.TUploadClientMetricsResponse, error)
	// Mount operations.
	MountVolume(context.Context, *protos.TMountVolumeRequest) (*protos.TMountVolumeResponse, error)
	UnmountVolume(context.Context, *protos.TUnmountVolumeRequest) (*protos.TUnmountVolumeResponse, error)
	// Block I/O.
	ReadBlocks(context.Context, *protos.TReadBlocksRequest) (*protos.TReadBlocksResponse, error)
	WriteBlocks(context.Context, *protos.TWriteBlocksRequest) (*protos.TWriteBlocksResponse, error)
	ZeroBlocks(context.Context, *protos.TZeroBlocksRequest) (*protos.TZeroBlocksResponse, error)
}

// UnimplementedTBlockStoreDataServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTBlockStoreDataServiceServer struct {
}

func (*UnimplementedTBlockStoreDataServiceServer) UploadClientMetrics(context.Context, *protos.TUploadClientMetricsRequest) (*protos.TUploadClientMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadClientMetrics not implemented")
}
func (*UnimplementedTBlockStoreDataServiceServer) MountVolume(context.Context, *protos.TMountVolumeRequest) (*protos.TMountVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MountVolume not implemented")
}
func (*UnimplementedTBlockStoreDataServiceServer) UnmountVolume(context.Context, *protos.TUnmountVolumeRequest) (*protos.TUnmountVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnmountVolume not implemented")
}
func (*UnimplementedTBlockStoreDataServiceServer) ReadBlocks(context.Context, *protos.TReadBlocksRequest) (*protos.TReadBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadBlocks not implemented")
}
func (*UnimplementedTBlockStoreDataServiceServer) WriteBlocks(context.Context, *protos.TWriteBlocksRequest) (*protos.TWriteBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteBlocks not implemented")
}
func (*UnimplementedTBlockStoreDataServiceServer) ZeroBlocks(context.Context, *protos.TZeroBlocksRequest) (*protos.TZeroBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZeroBlocks not implemented")
}

func RegisterTBlockStoreDataServiceServer(s *grpc.Server, srv TBlockStoreDataServiceServer) {
	s.RegisterService(&_TBlockStoreDataService_serviceDesc, srv)
}

func _TBlockStoreDataService_UploadClientMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TUploadClientMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreDataServiceServer).UploadClientMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreDataService/UploadClientMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreDataServiceServer).UploadClientMetrics(ctx, req.(*protos.TUploadClientMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreDataService_MountVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TMountVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreDataServiceServer).MountVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreDataService/MountVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreDataServiceServer).MountVolume(ctx, req.(*protos.TMountVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreDataService_UnmountVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TUnmountVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreDataServiceServer).UnmountVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreDataService/UnmountVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreDataServiceServer).UnmountVolume(ctx, req.(*protos.TUnmountVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreDataService_ReadBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TReadBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreDataServiceServer).ReadBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreDataService/ReadBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreDataServiceServer).ReadBlocks(ctx, req.(*protos.TReadBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreDataService_WriteBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TWriteBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreDataServiceServer).WriteBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreDataService/WriteBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreDataServiceServer).WriteBlocks(ctx, req.(*protos.TWriteBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBlockStoreDataService_ZeroBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TZeroBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBlockStoreDataServiceServer).ZeroBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NBlockStore.NProto.TBlockStoreDataService/ZeroBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBlockStoreDataServiceServer).ZeroBlocks(ctx, req.(*protos.TZeroBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TBlockStoreDataService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "NCloud.NBlockStore.NProto.TBlockStoreDataService",
	HandlerType: (*TBlockStoreDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadClientMetrics",
			Handler:    _TBlockStoreDataService_UploadClientMetrics_Handler,
		},
		{
			MethodName: "MountVolume",
			Handler:    _TBlockStoreDataService_MountVolume_Handler,
		},
		{
			MethodName: "UnmountVolume",
			Handler:    _TBlockStoreDataService_UnmountVolume_Handler,
		},
		{
			MethodName: "ReadBlocks",
			Handler:    _TBlockStoreDataService_ReadBlocks_Handler,
		},
		{
			MethodName: "WriteBlocks",
			Handler:    _TBlockStoreDataService_WriteBlocks_Handler,
		},
		{
			MethodName: "ZeroBlocks",
			Handler:    _TBlockStoreDataService_ZeroBlocks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/blockstore/public/api/grpc/service.proto",
}
