// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.0
// source: cloud/blockstore/public/api/protos/volume.proto

package protos

import (
	protos "github.com/ydb-platform/nbs/cloud/storage/core/protos"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EVolumeAccessMode int32

const (
	EVolumeAccessMode_VOLUME_ACCESS_READ_WRITE     EVolumeAccessMode = 0
	EVolumeAccessMode_VOLUME_ACCESS_READ_ONLY      EVolumeAccessMode = 1
	EVolumeAccessMode_VOLUME_ACCESS_REPAIR         EVolumeAccessMode = 2
	EVolumeAccessMode_VOLUME_ACCESS_USER_READ_ONLY EVolumeAccessMode = 3
)

// Enum value maps for EVolumeAccessMode.
var (
	EVolumeAccessMode_name = map[int32]string{
		0: "VOLUME_ACCESS_READ_WRITE",
		1: "VOLUME_ACCESS_READ_ONLY",
		2: "VOLUME_ACCESS_REPAIR",
		3: "VOLUME_ACCESS_USER_READ_ONLY",
	}
	EVolumeAccessMode_value = map[string]int32{
		"VOLUME_ACCESS_READ_WRITE":     0,
		"VOLUME_ACCESS_READ_ONLY":      1,
		"VOLUME_ACCESS_REPAIR":         2,
		"VOLUME_ACCESS_USER_READ_ONLY": 3,
	}
)

func (x EVolumeAccessMode) Enum() *EVolumeAccessMode {
	p := new(EVolumeAccessMode)
	*p = x
	return p
}

func (x EVolumeAccessMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EVolumeAccessMode) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_blockstore_public_api_protos_volume_proto_enumTypes[0].Descriptor()
}

func (EVolumeAccessMode) Type() protoreflect.EnumType {
	return &file_cloud_blockstore_public_api_protos_volume_proto_enumTypes[0]
}

func (x EVolumeAccessMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EVolumeAccessMode.Descriptor instead.
func (EVolumeAccessMode) EnumDescriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{0}
}

type EVolumeMountMode int32

const (
	EVolumeMountMode_VOLUME_MOUNT_LOCAL  EVolumeMountMode = 0
	EVolumeMountMode_VOLUME_MOUNT_REMOTE EVolumeMountMode = 1
)

// Enum value maps for EVolumeMountMode.
var (
	EVolumeMountMode_name = map[int32]string{
		0: "VOLUME_MOUNT_LOCAL",
		1: "VOLUME_MOUNT_REMOTE",
	}
	EVolumeMountMode_value = map[string]int32{
		"VOLUME_MOUNT_LOCAL":  0,
		"VOLUME_MOUNT_REMOTE": 1,
	}
)

func (x EVolumeMountMode) Enum() *EVolumeMountMode {
	p := new(EVolumeMountMode)
	*p = x
	return p
}

func (x EVolumeMountMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EVolumeMountMode) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_blockstore_public_api_protos_volume_proto_enumTypes[1].Descriptor()
}

func (EVolumeMountMode) Type() protoreflect.EnumType {
	return &file_cloud_blockstore_public_api_protos_volume_proto_enumTypes[1]
}

func (x EVolumeMountMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EVolumeMountMode.Descriptor instead.
func (EVolumeMountMode) EnumDescriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{1}
}

type EVolumeIOMode int32

const (
	EVolumeIOMode_VOLUME_IO_OK              EVolumeIOMode = 0
	EVolumeIOMode_VOLUME_IO_ERROR_READ_ONLY EVolumeIOMode = 1
)

// Enum value maps for EVolumeIOMode.
var (
	EVolumeIOMode_name = map[int32]string{
		0: "VOLUME_IO_OK",
		1: "VOLUME_IO_ERROR_READ_ONLY",
	}
	EVolumeIOMode_value = map[string]int32{
		"VOLUME_IO_OK":              0,
		"VOLUME_IO_ERROR_READ_ONLY": 1,
	}
)

func (x EVolumeIOMode) Enum() *EVolumeIOMode {
	p := new(EVolumeIOMode)
	*p = x
	return p
}

func (x EVolumeIOMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EVolumeIOMode) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_blockstore_public_api_protos_volume_proto_enumTypes[2].Descriptor()
}

func (EVolumeIOMode) Type() protoreflect.EnumType {
	return &file_cloud_blockstore_public_api_protos_volume_proto_enumTypes[2]
}

func (x EVolumeIOMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EVolumeIOMode.Descriptor instead.
func (EVolumeIOMode) EnumDescriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{2}
}

type TVolumePerformanceProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bytes per sec
	MaxReadBandwidth uint32 `protobuf:"varint,1,opt,name=MaxReadBandwidth,proto3" json:"MaxReadBandwidth,omitempty"`
	// Limits the total weight of all postponed operations
	MaxPostponedWeight uint32 `protobuf:"varint,3,opt,name=MaxPostponedWeight,proto3" json:"MaxPostponedWeight,omitempty"`
	// Throttling enabled
	ThrottlingEnabled bool `protobuf:"varint,4,opt,name=ThrottlingEnabled,proto3" json:"ThrottlingEnabled,omitempty"`
	// Iops
	MaxReadIops uint32 `protobuf:"varint,5,opt,name=MaxReadIops,proto3" json:"MaxReadIops,omitempty"`
	// Boost params, see NBS-530, all times are measured in milliseconds
	BoostTime       uint32 `protobuf:"varint,7,opt,name=BoostTime,proto3" json:"BoostTime,omitempty"`
	BoostRefillTime uint32 `protobuf:"varint,8,opt,name=BoostRefillTime,proto3" json:"BoostRefillTime,omitempty"`
	// Max available boost percentage of Max{Read,Write}{Iops,Bandwidth}
	BoostPercentage uint32 `protobuf:"varint,9,opt,name=BoostPercentage,proto3" json:"BoostPercentage,omitempty"`
	// Bytes per sec
	MaxWriteBandwidth uint32 `protobuf:"varint,10,opt,name=MaxWriteBandwidth,proto3" json:"MaxWriteBandwidth,omitempty"`
	// Iops
	MaxWriteIops uint32 `protobuf:"varint,11,opt,name=MaxWriteIops,proto3" json:"MaxWriteIops,omitempty"`
	// Max available instantaneous percentage of Max{Read,Write}{Iops,Bandwidth}
	BurstPercentage uint32 `protobuf:"varint,12,opt,name=BurstPercentage,proto3" json:"BurstPercentage,omitempty"`
}

func (x *TVolumePerformanceProfile) Reset() {
	*x = TVolumePerformanceProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TVolumePerformanceProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TVolumePerformanceProfile) ProtoMessage() {}

func (x *TVolumePerformanceProfile) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TVolumePerformanceProfile.ProtoReflect.Descriptor instead.
func (*TVolumePerformanceProfile) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{0}
}

func (x *TVolumePerformanceProfile) GetMaxReadBandwidth() uint32 {
	if x != nil {
		return x.MaxReadBandwidth
	}
	return 0
}

func (x *TVolumePerformanceProfile) GetMaxPostponedWeight() uint32 {
	if x != nil {
		return x.MaxPostponedWeight
	}
	return 0
}

func (x *TVolumePerformanceProfile) GetThrottlingEnabled() bool {
	if x != nil {
		return x.ThrottlingEnabled
	}
	return false
}

func (x *TVolumePerformanceProfile) GetMaxReadIops() uint32 {
	if x != nil {
		return x.MaxReadIops
	}
	return 0
}

func (x *TVolumePerformanceProfile) GetBoostTime() uint32 {
	if x != nil {
		return x.BoostTime
	}
	return 0
}

func (x *TVolumePerformanceProfile) GetBoostRefillTime() uint32 {
	if x != nil {
		return x.BoostRefillTime
	}
	return 0
}

func (x *TVolumePerformanceProfile) GetBoostPercentage() uint32 {
	if x != nil {
		return x.BoostPercentage
	}
	return 0
}

func (x *TVolumePerformanceProfile) GetMaxWriteBandwidth() uint32 {
	if x != nil {
		return x.MaxWriteBandwidth
	}
	return 0
}

func (x *TVolumePerformanceProfile) GetMaxWriteIops() uint32 {
	if x != nil {
		return x.MaxWriteIops
	}
	return 0
}

func (x *TVolumePerformanceProfile) GetBurstPercentage() uint32 {
	if x != nil {
		return x.BurstPercentage
	}
	return 0
}

type TVolumeModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum addressable block size (smallest unit of I/O operations).
	BlockSize uint32 `protobuf:"varint,1,opt,name=BlockSize,proto3" json:"BlockSize,omitempty"`
	// Maximum number of blocks stored in volume.
	BlocksCount uint64 `protobuf:"varint,2,opt,name=BlocksCount,proto3" json:"BlocksCount,omitempty"`
	// Number of user channels to store blobs.
	ChannelsCount uint32 `protobuf:"varint,3,opt,name=ChannelsCount,proto3" json:"ChannelsCount,omitempty"`
	// Storage media to use.
	StorageMediaKind protos.EStorageMediaKind `protobuf:"varint,4,opt,name=StorageMediaKind,proto3,enum=NCloud.NProto.EStorageMediaKind" json:"StorageMediaKind,omitempty"`
	// Performance profile, used for throttling
	PerformanceProfile *TVolumePerformanceProfile `protobuf:"bytes,5,opt,name=PerformanceProfile,proto3" json:"PerformanceProfile,omitempty"`
	// Number of user channels to store merged blobs.
	MergedChannelsCount uint32 `protobuf:"varint,6,opt,name=MergedChannelsCount,proto3" json:"MergedChannelsCount,omitempty"`
	// Number of user channels to store mixed blobs.
	MixedChannelsCount uint32 `protobuf:"varint,7,opt,name=MixedChannelsCount,proto3" json:"MixedChannelsCount,omitempty"`
	// Number of partition tablets.
	PartitionsCount uint32 `protobuf:"varint,8,opt,name=PartitionsCount,proto3" json:"PartitionsCount,omitempty"`
	// Number of user channels to store fresh blobs.
	FreshChannelsCount uint32 `protobuf:"varint,9,opt,name=FreshChannelsCount,proto3" json:"FreshChannelsCount,omitempty"`
}

func (x *TVolumeModel) Reset() {
	*x = TVolumeModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TVolumeModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TVolumeModel) ProtoMessage() {}

func (x *TVolumeModel) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TVolumeModel.ProtoReflect.Descriptor instead.
func (*TVolumeModel) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{1}
}

func (x *TVolumeModel) GetBlockSize() uint32 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *TVolumeModel) GetBlocksCount() uint64 {
	if x != nil {
		return x.BlocksCount
	}
	return 0
}

func (x *TVolumeModel) GetChannelsCount() uint32 {
	if x != nil {
		return x.ChannelsCount
	}
	return 0
}

func (x *TVolumeModel) GetStorageMediaKind() protos.EStorageMediaKind {
	if x != nil {
		return x.StorageMediaKind
	}
	return protos.EStorageMediaKind_STORAGE_MEDIA_DEFAULT
}

func (x *TVolumeModel) GetPerformanceProfile() *TVolumePerformanceProfile {
	if x != nil {
		return x.PerformanceProfile
	}
	return nil
}

func (x *TVolumeModel) GetMergedChannelsCount() uint32 {
	if x != nil {
		return x.MergedChannelsCount
	}
	return 0
}

func (x *TVolumeModel) GetMixedChannelsCount() uint32 {
	if x != nil {
		return x.MixedChannelsCount
	}
	return 0
}

func (x *TVolumeModel) GetPartitionsCount() uint32 {
	if x != nil {
		return x.PartitionsCount
	}
	return 0
}

func (x *TVolumeModel) GetFreshChannelsCount() uint32 {
	if x != nil {
		return x.FreshChannelsCount
	}
	return 0
}

type TDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NVMe-oF transport id.
	TransportId string `protobuf:"bytes,1,opt,name=TransportId,proto3" json:"TransportId,omitempty"`
	// The size of this device in volume blocks (not in original device blocks).
	BlockCount uint64 `protobuf:"varint,2,opt,name=BlockCount,proto3" json:"BlockCount,omitempty"`
	// Device base name
	BaseName string `protobuf:"bytes,3,opt,name=BaseName,proto3" json:"BaseName,omitempty"`
	// Agent id.
	AgentId string `protobuf:"bytes,4,opt,name=AgentId,proto3" json:"AgentId,omitempty"`
	// Device id.
	DeviceUUID string `protobuf:"bytes,5,opt,name=DeviceUUID,proto3" json:"DeviceUUID,omitempty"`
	// Device name.
	DeviceName string `protobuf:"bytes,6,opt,name=DeviceName,proto3" json:"DeviceName,omitempty"`
	// RDMA endpoint.
	RdmaEndpoint *TRdmaEndpoint `protobuf:"bytes,7,opt,name=RdmaEndpoint,proto3" json:"RdmaEndpoint,omitempty"`
	// Physical offset in bytes.
	PhysicalOffset uint64 `protobuf:"varint,8,opt,name=PhysicalOffset,proto3" json:"PhysicalOffset,omitempty"`
}

func (x *TDevice) Reset() {
	*x = TDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDevice) ProtoMessage() {}

func (x *TDevice) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDevice.ProtoReflect.Descriptor instead.
func (*TDevice) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{2}
}

func (x *TDevice) GetTransportId() string {
	if x != nil {
		return x.TransportId
	}
	return ""
}

func (x *TDevice) GetBlockCount() uint64 {
	if x != nil {
		return x.BlockCount
	}
	return 0
}

func (x *TDevice) GetBaseName() string {
	if x != nil {
		return x.BaseName
	}
	return ""
}

func (x *TDevice) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *TDevice) GetDeviceUUID() string {
	if x != nil {
		return x.DeviceUUID
	}
	return ""
}

func (x *TDevice) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *TDevice) GetRdmaEndpoint() *TRdmaEndpoint {
	if x != nil {
		return x.RdmaEndpoint
	}
	return nil
}

func (x *TDevice) GetPhysicalOffset() uint64 {
	if x != nil {
		return x.PhysicalOffset
	}
	return 0
}

type TDeviceMigrationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Migration source transport id.
	SourceTransportId string `protobuf:"bytes,1,opt,name=SourceTransportId,proto3" json:"SourceTransportId,omitempty"`
	// Migration target device.
	TargetDevice *TDevice `protobuf:"bytes,2,opt,name=TargetDevice,proto3" json:"TargetDevice,omitempty"`
	// Migration source device id.
	SourceDeviceId string `protobuf:"bytes,3,opt,name=SourceDeviceId,proto3" json:"SourceDeviceId,omitempty"`
}

func (x *TDeviceMigrationInfo) Reset() {
	*x = TDeviceMigrationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDeviceMigrationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDeviceMigrationInfo) ProtoMessage() {}

func (x *TDeviceMigrationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDeviceMigrationInfo.ProtoReflect.Descriptor instead.
func (*TDeviceMigrationInfo) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{3}
}

func (x *TDeviceMigrationInfo) GetSourceTransportId() string {
	if x != nil {
		return x.SourceTransportId
	}
	return ""
}

func (x *TDeviceMigrationInfo) GetTargetDevice() *TDevice {
	if x != nil {
		return x.TargetDevice
	}
	return nil
}

func (x *TDeviceMigrationInfo) GetSourceDeviceId() string {
	if x != nil {
		return x.SourceDeviceId
	}
	return ""
}

type TReplicaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device list.
	Devices []*TDevice `protobuf:"bytes,1,rep,name=Devices,proto3" json:"Devices,omitempty"`
}

func (x *TReplicaInfo) Reset() {
	*x = TReplicaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TReplicaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TReplicaInfo) ProtoMessage() {}

func (x *TReplicaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TReplicaInfo.ProtoReflect.Descriptor instead.
func (*TReplicaInfo) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{4}
}

func (x *TReplicaInfo) GetDevices() []*TDevice {
	if x != nil {
		return x.Devices
	}
	return nil
}

type TEncryptionDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode    EEncryptionMode `protobuf:"varint,1,opt,name=Mode,proto3,enum=NCloud.NBlockStore.NProto.EEncryptionMode" json:"Mode,omitempty"`
	KeyHash []byte          `protobuf:"bytes,2,opt,name=KeyHash,proto3" json:"KeyHash,omitempty"`
}

func (x *TEncryptionDesc) Reset() {
	*x = TEncryptionDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TEncryptionDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TEncryptionDesc) ProtoMessage() {}

func (x *TEncryptionDesc) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TEncryptionDesc.ProtoReflect.Descriptor instead.
func (*TEncryptionDesc) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{5}
}

func (x *TEncryptionDesc) GetMode() EEncryptionMode {
	if x != nil {
		return x.Mode
	}
	return EEncryptionMode_NO_ENCRYPTION
}

func (x *TEncryptionDesc) GetKeyHash() []byte {
	if x != nil {
		return x.KeyHash
	}
	return nil
}

type TVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Label of volume.
	DiskId string `protobuf:"bytes,1,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Owner information.
	ProjectId string `protobuf:"bytes,2,opt,name=ProjectId,proto3" json:"ProjectId,omitempty"`
	// VM information (unused)
	InstanceId string `protobuf:"bytes,3,opt,name=InstanceId,proto3" json:"InstanceId,omitempty"`
	// Minimum addressable block size (smallest unit of I/O operations).
	BlockSize uint32 `protobuf:"varint,4,opt,name=BlockSize,proto3" json:"BlockSize,omitempty"`
	// Maximum number of blocks stored in volume.
	BlocksCount uint64 `protobuf:"varint,5,opt,name=BlocksCount,proto3" json:"BlocksCount,omitempty"`
	// Number of user channels to store blobs.
	ChannelsCount uint32 `protobuf:"varint,6,opt,name=ChannelsCount,proto3" json:"ChannelsCount,omitempty"`
	// Storage media to use.
	StorageMediaKind protos.EStorageMediaKind `protobuf:"varint,7,opt,name=StorageMediaKind,proto3,enum=NCloud.NProto.EStorageMediaKind" json:"StorageMediaKind,omitempty"`
	// User folder Id, used for billing.
	FolderId string `protobuf:"bytes,8,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	// Cloud Id, used for billing.
	CloudId string `protobuf:"bytes,9,opt,name=CloudId,proto3" json:"CloudId,omitempty"`
	// Volume configuration version.
	ConfigVersion uint32 `protobuf:"varint,10,opt,name=ConfigVersion,proto3" json:"ConfigVersion,omitempty"`
	// Performance profile, used for throttling
	PerformanceProfile *TVolumePerformanceProfile `protobuf:"bytes,11,opt,name=PerformanceProfile,proto3" json:"PerformanceProfile,omitempty"`
	// Optional label of base volume.
	// If this is set then current volume is called "overlay volume".
	BaseDiskId string `protobuf:"bytes,12,opt,name=BaseDiskId,proto3" json:"BaseDiskId,omitempty"`
	// Optional "base volume checkpoint" overlay volume sits on.
	// Should not be empty when BaseDiskId is not empty.
	BaseDiskCheckpointId string `protobuf:"bytes,13,opt,name=BaseDiskCheckpointId,proto3" json:"BaseDiskCheckpointId,omitempty"`
	// Number of user channels to store merged blobs.
	MergedChannelsCount uint32 `protobuf:"varint,14,opt,name=MergedChannelsCount,proto3" json:"MergedChannelsCount,omitempty"`
	// Number of user channels to store mixed blobs.
	MixedChannelsCount uint32 `protobuf:"varint,15,opt,name=MixedChannelsCount,proto3" json:"MixedChannelsCount,omitempty"`
	// Device list (for nonreplicated disks).
	Devices []*TDevice `protobuf:"bytes,17,rep,name=Devices,proto3" json:"Devices,omitempty"`
	// Partition tablet version.
	TabletVersion uint32 `protobuf:"varint,18,opt,name=TabletVersion,proto3" json:"TabletVersion,omitempty"`
	// Volume creation and alter timestamps.
	CreationTs uint64 `protobuf:"varint,19,opt,name=CreationTs,proto3" json:"CreationTs,omitempty"`
	AlterTs    uint64 `protobuf:"varint,20,opt,name=AlterTs,proto3" json:"AlterTs,omitempty"`
	// Placement group id, assigned during disk creation.
	PlacementGroupId string `protobuf:"bytes,21,opt,name=PlacementGroupId,proto3" json:"PlacementGroupId,omitempty"`
	// Number of partition tablets.
	PartitionsCount uint32 `protobuf:"varint,22,opt,name=PartitionsCount,proto3" json:"PartitionsCount,omitempty"`
	// Volume IO mode.
	IOMode EVolumeIOMode `protobuf:"varint,23,opt,name=IOMode,proto3,enum=NCloud.NBlockStore.NProto.EVolumeIOMode" json:"IOMode,omitempty"`
	// MountToken Version.
	TokenVersion uint64 `protobuf:"varint,24,opt,name=TokenVersion,proto3" json:"TokenVersion,omitempty"`
	// Migration list (for nonreplicated disks).
	Migrations []*TDeviceMigrationInfo `protobuf:"bytes,26,rep,name=Migrations,proto3" json:"Migrations,omitempty"`
	// Number of user channels to store fresh blobs.
	FreshChannelsCount uint32 `protobuf:"varint,27,opt,name=FreshChannelsCount,proto3" json:"FreshChannelsCount,omitempty"`
	// Indicates that volume does not belong to user directly, but used for system needs.
	IsSystem bool `protobuf:"varint,28,opt,name=IsSystem,proto3" json:"IsSystem,omitempty"`
	// Replica list (for mirrored disks).
	Replicas []*TReplicaInfo `protobuf:"bytes,29,rep,name=Replicas,proto3" json:"Replicas,omitempty"`
	// Replica resync in progress (only for mirrored volumes).
	ResyncInProgress bool `protobuf:"varint,30,opt,name=ResyncInProgress,proto3" json:"ResyncInProgress,omitempty"`
	// Encryption description
	EncryptionDesc *TEncryptionDesc `protobuf:"bytes,31,opt,name=EncryptionDesc,proto3" json:"EncryptionDesc,omitempty"`
	// Placement partition index, assigned during disk creation.
	// Takes values from 1 to PlacementPartitionCount.
	PlacementPartitionIndex uint32 `protobuf:"varint,32,opt,name=PlacementPartitionIndex,proto3" json:"PlacementPartitionIndex,omitempty"`
	// Fresh (recently replaced) device ids.
	FreshDeviceIds []string `protobuf:"bytes,33,rep,name=FreshDeviceIds,proto3" json:"FreshDeviceIds,omitempty"`
	// First block index accessible to the user. Currently it's a crutch for
	// NBS-3941 which is needed because TVolume is used internally in the
	// StorageProvider interface. But there is a chance that this field becomes
	// in fact needed in our public api.
	StartIndex uint64 `protobuf:"varint,34,opt,name=StartIndex,proto3" json:"StartIndex,omitempty"`
	// Represents whether disk filling finished or not.
	IsFillFinished bool `protobuf:"varint,35,opt,name=IsFillFinished,proto3" json:"IsFillFinished,omitempty"`
}

func (x *TVolume) Reset() {
	*x = TVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TVolume) ProtoMessage() {}

func (x *TVolume) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TVolume.ProtoReflect.Descriptor instead.
func (*TVolume) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{6}
}

func (x *TVolume) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TVolume) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *TVolume) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *TVolume) GetBlockSize() uint32 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *TVolume) GetBlocksCount() uint64 {
	if x != nil {
		return x.BlocksCount
	}
	return 0
}

func (x *TVolume) GetChannelsCount() uint32 {
	if x != nil {
		return x.ChannelsCount
	}
	return 0
}

func (x *TVolume) GetStorageMediaKind() protos.EStorageMediaKind {
	if x != nil {
		return x.StorageMediaKind
	}
	return protos.EStorageMediaKind_STORAGE_MEDIA_DEFAULT
}

func (x *TVolume) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *TVolume) GetCloudId() string {
	if x != nil {
		return x.CloudId
	}
	return ""
}

func (x *TVolume) GetConfigVersion() uint32 {
	if x != nil {
		return x.ConfigVersion
	}
	return 0
}

func (x *TVolume) GetPerformanceProfile() *TVolumePerformanceProfile {
	if x != nil {
		return x.PerformanceProfile
	}
	return nil
}

func (x *TVolume) GetBaseDiskId() string {
	if x != nil {
		return x.BaseDiskId
	}
	return ""
}

func (x *TVolume) GetBaseDiskCheckpointId() string {
	if x != nil {
		return x.BaseDiskCheckpointId
	}
	return ""
}

func (x *TVolume) GetMergedChannelsCount() uint32 {
	if x != nil {
		return x.MergedChannelsCount
	}
	return 0
}

func (x *TVolume) GetMixedChannelsCount() uint32 {
	if x != nil {
		return x.MixedChannelsCount
	}
	return 0
}

func (x *TVolume) GetDevices() []*TDevice {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *TVolume) GetTabletVersion() uint32 {
	if x != nil {
		return x.TabletVersion
	}
	return 0
}

func (x *TVolume) GetCreationTs() uint64 {
	if x != nil {
		return x.CreationTs
	}
	return 0
}

func (x *TVolume) GetAlterTs() uint64 {
	if x != nil {
		return x.AlterTs
	}
	return 0
}

func (x *TVolume) GetPlacementGroupId() string {
	if x != nil {
		return x.PlacementGroupId
	}
	return ""
}

func (x *TVolume) GetPartitionsCount() uint32 {
	if x != nil {
		return x.PartitionsCount
	}
	return 0
}

func (x *TVolume) GetIOMode() EVolumeIOMode {
	if x != nil {
		return x.IOMode
	}
	return EVolumeIOMode_VOLUME_IO_OK
}

func (x *TVolume) GetTokenVersion() uint64 {
	if x != nil {
		return x.TokenVersion
	}
	return 0
}

func (x *TVolume) GetMigrations() []*TDeviceMigrationInfo {
	if x != nil {
		return x.Migrations
	}
	return nil
}

func (x *TVolume) GetFreshChannelsCount() uint32 {
	if x != nil {
		return x.FreshChannelsCount
	}
	return 0
}

func (x *TVolume) GetIsSystem() bool {
	if x != nil {
		return x.IsSystem
	}
	return false
}

func (x *TVolume) GetReplicas() []*TReplicaInfo {
	if x != nil {
		return x.Replicas
	}
	return nil
}

func (x *TVolume) GetResyncInProgress() bool {
	if x != nil {
		return x.ResyncInProgress
	}
	return false
}

func (x *TVolume) GetEncryptionDesc() *TEncryptionDesc {
	if x != nil {
		return x.EncryptionDesc
	}
	return nil
}

func (x *TVolume) GetPlacementPartitionIndex() uint32 {
	if x != nil {
		return x.PlacementPartitionIndex
	}
	return 0
}

func (x *TVolume) GetFreshDeviceIds() []string {
	if x != nil {
		return x.FreshDeviceIds
	}
	return nil
}

func (x *TVolume) GetStartIndex() uint64 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *TVolume) GetIsFillFinished() bool {
	if x != nil {
		return x.IsFillFinished
	}
	return false
}

type TVolumeClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Client id.
	ClientId string `protobuf:"bytes,1,opt,name=ClientId,proto3" json:"ClientId,omitempty"`
	// Instance id.
	InstanceId string `protobuf:"bytes,2,opt,name=InstanceId,proto3" json:"InstanceId,omitempty"`
	// Client disconnect timestamp (0 for active clients).
	DisconnectTimestamp uint64 `protobuf:"varint,3,opt,name=DisconnectTimestamp,proto3" json:"DisconnectTimestamp,omitempty"`
}

func (x *TVolumeClient) Reset() {
	*x = TVolumeClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TVolumeClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TVolumeClient) ProtoMessage() {}

func (x *TVolumeClient) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TVolumeClient.ProtoReflect.Descriptor instead.
func (*TVolumeClient) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{7}
}

func (x *TVolumeClient) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *TVolumeClient) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *TVolumeClient) GetDisconnectTimestamp() uint64 {
	if x != nil {
		return x.DisconnectTimestamp
	}
	return 0
}

type TIOCounters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of I/O requests.
	RequestsCount uint64 `protobuf:"varint,1,opt,name=RequestsCount,proto3" json:"RequestsCount,omitempty"`
	// Number of blocks proceeded.
	BlocksCount uint64 `protobuf:"varint,2,opt,name=BlocksCount,proto3" json:"BlocksCount,omitempty"`
	// Total request execution time.
	ExecTime uint64 `protobuf:"varint,3,opt,name=ExecTime,proto3" json:"ExecTime,omitempty"`
	// Total time request spent waiting for I/O.
	WaitTime uint64 `protobuf:"varint,4,opt,name=WaitTime,proto3" json:"WaitTime,omitempty"`
	// Number of batch requests.
	BatchCount uint64 `protobuf:"varint,5,opt,name=BatchCount,proto3" json:"BatchCount,omitempty"`
}

func (x *TIOCounters) Reset() {
	*x = TIOCounters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TIOCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TIOCounters) ProtoMessage() {}

func (x *TIOCounters) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TIOCounters.ProtoReflect.Descriptor instead.
func (*TIOCounters) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{8}
}

func (x *TIOCounters) GetRequestsCount() uint64 {
	if x != nil {
		return x.RequestsCount
	}
	return 0
}

func (x *TIOCounters) GetBlocksCount() uint64 {
	if x != nil {
		return x.BlocksCount
	}
	return 0
}

func (x *TIOCounters) GetExecTime() uint64 {
	if x != nil {
		return x.ExecTime
	}
	return 0
}

func (x *TIOCounters) GetWaitTime() uint64 {
	if x != nil {
		return x.WaitTime
	}
	return 0
}

func (x *TIOCounters) GetBatchCount() uint64 {
	if x != nil {
		return x.BatchCount
	}
	return 0
}

type TVolumeStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// I/O operations invoked directly by user.
	UserReadCounters  *TIOCounters `protobuf:"bytes,1,opt,name=UserReadCounters,proto3" json:"UserReadCounters,omitempty"`
	UserWriteCounters *TIOCounters `protobuf:"bytes,2,opt,name=UserWriteCounters,proto3" json:"UserWriteCounters,omitempty"`
	// Background I/O operations (system overhead).
	SysReadCounters  *TIOCounters `protobuf:"bytes,3,opt,name=SysReadCounters,proto3" json:"SysReadCounters,omitempty"`
	SysWriteCounters *TIOCounters `protobuf:"bytes,4,opt,name=SysWriteCounters,proto3" json:"SysWriteCounters,omitempty"`
	// Numbers of stored blobs.
	MixedBlobsCount  uint64 `protobuf:"varint,5,opt,name=MixedBlobsCount,proto3" json:"MixedBlobsCount,omitempty"`
	MergedBlobsCount uint64 `protobuf:"varint,6,opt,name=MergedBlobsCount,proto3" json:"MergedBlobsCount,omitempty"`
	// Numbers of stored blocks.
	FreshBlocksCount  uint64 `protobuf:"varint,7,opt,name=FreshBlocksCount,proto3" json:"FreshBlocksCount,omitempty"`
	MixedBlocksCount  uint64 `protobuf:"varint,8,opt,name=MixedBlocksCount,proto3" json:"MixedBlocksCount,omitempty"`
	MergedBlocksCount uint64 `protobuf:"varint,9,opt,name=MergedBlocksCount,proto3" json:"MergedBlocksCount,omitempty"`
	// Number of blocks actually used.
	UsedBlocksCount uint64 `protobuf:"varint,10,opt,name=UsedBlocksCount,proto3" json:"UsedBlocksCount,omitempty"`
	// Number of garbage blocks.
	GarbageBlocksCount uint64 `protobuf:"varint,11,opt,name=GarbageBlocksCount,proto3" json:"GarbageBlocksCount,omitempty"`
	// Number of non empty ranges.
	NonEmptyRangeCount uint64 `protobuf:"varint,12,opt,name=NonEmptyRangeCount,proto3" json:"NonEmptyRangeCount,omitempty"`
	// Number of overwritten blocks stored only for checkpoints.
	CheckpointBlocksCount uint64 `protobuf:"varint,13,opt,name=CheckpointBlocksCount,proto3" json:"CheckpointBlocksCount,omitempty"`
	// Number of garbage blocks in the most dirty range.
	CompactionGarbageScore uint32 `protobuf:"varint,14,opt,name=CompactionGarbageScore,proto3" json:"CompactionGarbageScore,omitempty"`
	// Garbage queue size.
	GarbageQueueSize uint32 `protobuf:"varint,15,opt,name=GarbageQueueSize,proto3" json:"GarbageQueueSize,omitempty"`
	// Cleanup and Compaction delays (in ms).
	CleanupDelay    uint32 `protobuf:"varint,16,opt,name=CleanupDelay,proto3" json:"CleanupDelay,omitempty"`
	CompactionDelay uint32 `protobuf:"varint,17,opt,name=CompactionDelay,proto3" json:"CompactionDelay,omitempty"`
	// Number of stored fresh blobs.
	FreshBlobsCount uint64 `protobuf:"varint,18,opt,name=FreshBlobsCount,proto3" json:"FreshBlobsCount,omitempty"`
	// Number of blocks actually used.
	// Includes the blocks used at the base disk (for overlay disks).
	LogicalUsedBlocksCount uint64 `protobuf:"varint,19,opt,name=LogicalUsedBlocksCount,proto3" json:"LogicalUsedBlocksCount,omitempty"`
	// Number of write and zero requests inflight for network-ssd/network-hdd.
	WriteAndZeroRequestsInFlight uint64 `protobuf:"varint,20,opt,name=WriteAndZeroRequestsInFlight,proto3" json:"WriteAndZeroRequestsInFlight,omitempty"`
	// Volume level used block counter.
	VolumeUsedBlocksCount uint64 `protobuf:"varint,21,opt,name=VolumeUsedBlocksCount,proto3" json:"VolumeUsedBlocksCount,omitempty"`
	// Volume boost budget in milliseconds.
	BoostBudget uint64 `protobuf:"varint,22,opt,name=BoostBudget,proto3" json:"BoostBudget,omitempty"`
	// Current timed out device state duration limit after which this disk
	// starts to return E_IO errors.
	MaxTimedOutDeviceStateDuration uint64 `protobuf:"varint,23,opt,name=MaxTimedOutDeviceStateDuration,proto3" json:"MaxTimedOutDeviceStateDuration,omitempty"`
	// Background I/O operations (system overhead).
	RealSysReadCounters  *TIOCounters `protobuf:"bytes,24,opt,name=RealSysReadCounters,proto3" json:"RealSysReadCounters,omitempty"`
	RealSysWriteCounters *TIOCounters `protobuf:"bytes,25,opt,name=RealSysWriteCounters,proto3" json:"RealSysWriteCounters,omitempty"`
	// Number of bytes in cleanup queue.
	CleanupQueueBytes uint64 `protobuf:"varint,26,opt,name=CleanupQueueBytes,proto3" json:"CleanupQueueBytes,omitempty"`
}

func (x *TVolumeStats) Reset() {
	*x = TVolumeStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TVolumeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TVolumeStats) ProtoMessage() {}

func (x *TVolumeStats) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TVolumeStats.ProtoReflect.Descriptor instead.
func (*TVolumeStats) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{9}
}

func (x *TVolumeStats) GetUserReadCounters() *TIOCounters {
	if x != nil {
		return x.UserReadCounters
	}
	return nil
}

func (x *TVolumeStats) GetUserWriteCounters() *TIOCounters {
	if x != nil {
		return x.UserWriteCounters
	}
	return nil
}

func (x *TVolumeStats) GetSysReadCounters() *TIOCounters {
	if x != nil {
		return x.SysReadCounters
	}
	return nil
}

func (x *TVolumeStats) GetSysWriteCounters() *TIOCounters {
	if x != nil {
		return x.SysWriteCounters
	}
	return nil
}

func (x *TVolumeStats) GetMixedBlobsCount() uint64 {
	if x != nil {
		return x.MixedBlobsCount
	}
	return 0
}

func (x *TVolumeStats) GetMergedBlobsCount() uint64 {
	if x != nil {
		return x.MergedBlobsCount
	}
	return 0
}

func (x *TVolumeStats) GetFreshBlocksCount() uint64 {
	if x != nil {
		return x.FreshBlocksCount
	}
	return 0
}

func (x *TVolumeStats) GetMixedBlocksCount() uint64 {
	if x != nil {
		return x.MixedBlocksCount
	}
	return 0
}

func (x *TVolumeStats) GetMergedBlocksCount() uint64 {
	if x != nil {
		return x.MergedBlocksCount
	}
	return 0
}

func (x *TVolumeStats) GetUsedBlocksCount() uint64 {
	if x != nil {
		return x.UsedBlocksCount
	}
	return 0
}

func (x *TVolumeStats) GetGarbageBlocksCount() uint64 {
	if x != nil {
		return x.GarbageBlocksCount
	}
	return 0
}

func (x *TVolumeStats) GetNonEmptyRangeCount() uint64 {
	if x != nil {
		return x.NonEmptyRangeCount
	}
	return 0
}

func (x *TVolumeStats) GetCheckpointBlocksCount() uint64 {
	if x != nil {
		return x.CheckpointBlocksCount
	}
	return 0
}

func (x *TVolumeStats) GetCompactionGarbageScore() uint32 {
	if x != nil {
		return x.CompactionGarbageScore
	}
	return 0
}

func (x *TVolumeStats) GetGarbageQueueSize() uint32 {
	if x != nil {
		return x.GarbageQueueSize
	}
	return 0
}

func (x *TVolumeStats) GetCleanupDelay() uint32 {
	if x != nil {
		return x.CleanupDelay
	}
	return 0
}

func (x *TVolumeStats) GetCompactionDelay() uint32 {
	if x != nil {
		return x.CompactionDelay
	}
	return 0
}

func (x *TVolumeStats) GetFreshBlobsCount() uint64 {
	if x != nil {
		return x.FreshBlobsCount
	}
	return 0
}

func (x *TVolumeStats) GetLogicalUsedBlocksCount() uint64 {
	if x != nil {
		return x.LogicalUsedBlocksCount
	}
	return 0
}

func (x *TVolumeStats) GetWriteAndZeroRequestsInFlight() uint64 {
	if x != nil {
		return x.WriteAndZeroRequestsInFlight
	}
	return 0
}

func (x *TVolumeStats) GetVolumeUsedBlocksCount() uint64 {
	if x != nil {
		return x.VolumeUsedBlocksCount
	}
	return 0
}

func (x *TVolumeStats) GetBoostBudget() uint64 {
	if x != nil {
		return x.BoostBudget
	}
	return 0
}

func (x *TVolumeStats) GetMaxTimedOutDeviceStateDuration() uint64 {
	if x != nil {
		return x.MaxTimedOutDeviceStateDuration
	}
	return 0
}

func (x *TVolumeStats) GetRealSysReadCounters() *TIOCounters {
	if x != nil {
		return x.RealSysReadCounters
	}
	return nil
}

func (x *TVolumeStats) GetRealSysWriteCounters() *TIOCounters {
	if x != nil {
		return x.RealSysWriteCounters
	}
	return nil
}

func (x *TVolumeStats) GetCleanupQueueBytes() uint64 {
	if x != nil {
		return x.CleanupQueueBytes
	}
	return 0
}

type TCreateVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Label of volume to create.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Owner information.
	ProjectId string `protobuf:"bytes,3,opt,name=ProjectId,proto3" json:"ProjectId,omitempty"`
	// Minimum addressable block size (smallest unit of I/O operations).
	BlockSize uint32 `protobuf:"varint,4,opt,name=BlockSize,proto3" json:"BlockSize,omitempty"`
	// Maximum number of blocks stored in volume.
	BlocksCount uint64 `protobuf:"varint,5,opt,name=BlocksCount,proto3" json:"BlocksCount,omitempty"`
	// Number of user channels to store blobs (unused, computed automatically instead).
	ChannelsCount uint32 `protobuf:"varint,6,opt,name=ChannelsCount,proto3" json:"ChannelsCount,omitempty"`
	// Storage media to use.
	StorageMediaKind protos.EStorageMediaKind `protobuf:"varint,7,opt,name=StorageMediaKind,proto3,enum=NCloud.NProto.EStorageMediaKind" json:"StorageMediaKind,omitempty"`
	// User folder Id, used for billing.
	FolderId string `protobuf:"bytes,8,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	// Cloud Id, used for billing.
	CloudId string `protobuf:"bytes,9,opt,name=CloudId,proto3" json:"CloudId,omitempty"`
	// Partition tablet version.
	TabletVersion uint32 `protobuf:"varint,10,opt,name=TabletVersion,proto3" json:"TabletVersion,omitempty"`
	// Performance profile, used for throttling
	PerformanceProfile *TVolumePerformanceProfile `protobuf:"bytes,11,opt,name=PerformanceProfile,proto3" json:"PerformanceProfile,omitempty"`
	// Optional id of base disk.
	BaseDiskId string `protobuf:"bytes,12,opt,name=BaseDiskId,proto3" json:"BaseDiskId,omitempty"`
	// Optional id of base disk checkpoint.
	BaseDiskCheckpointId string `protobuf:"bytes,13,opt,name=BaseDiskCheckpointId,proto3" json:"BaseDiskCheckpointId,omitempty"`
	// Placement group id, allowed only for nonreplicated volumes.
	PlacementGroupId string `protobuf:"bytes,14,opt,name=PlacementGroupId,proto3" json:"PlacementGroupId,omitempty"`
	// If set, forces creation of the specified partition tablet count.
	PartitionsCount uint32 `protobuf:"varint,15,opt,name=PartitionsCount,proto3" json:"PartitionsCount,omitempty"`
	// Encryption spec.
	EncryptionSpec *TEncryptionSpec `protobuf:"bytes,16,opt,name=EncryptionSpec,proto3" json:"EncryptionSpec,omitempty"`
	// Indicates that volume does not belong to user directly, but used for system needs.
	IsSystem bool `protobuf:"varint,17,opt,name=IsSystem,proto3" json:"IsSystem,omitempty"`
	// Optional storage pool name (e.g. local:ssd), allowed only for nonreplicated volumes.
	StoragePoolName string `protobuf:"bytes,18,opt,name=StoragePoolName,proto3" json:"StoragePoolName,omitempty"`
	// Optional list of nodes to allocate disk, allowed only for nonreplicated volumes.
	AgentIds []string `protobuf:"bytes,19,rep,name=AgentIds,proto3" json:"AgentIds,omitempty"`
	// Placement partition index, allowed only for nonreplicated volumes.
	// Takes values from 1 to PlacementPartitionCount.
	PlacementPartitionIndex uint32 `protobuf:"varint,20,opt,name=PlacementPartitionIndex,proto3" json:"PlacementPartitionIndex,omitempty"`
	// Mount requests with incorrect FillGeneration will be rejected unless filling is finished.
	FillGeneration uint64 `protobuf:"varint,21,opt,name=FillGeneration,proto3" json:"FillGeneration,omitempty"`
}

func (x *TCreateVolumeRequest) Reset() {
	*x = TCreateVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCreateVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCreateVolumeRequest) ProtoMessage() {}

func (x *TCreateVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCreateVolumeRequest.ProtoReflect.Descriptor instead.
func (*TCreateVolumeRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{10}
}

func (x *TCreateVolumeRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TCreateVolumeRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TCreateVolumeRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *TCreateVolumeRequest) GetBlockSize() uint32 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *TCreateVolumeRequest) GetBlocksCount() uint64 {
	if x != nil {
		return x.BlocksCount
	}
	return 0
}

func (x *TCreateVolumeRequest) GetChannelsCount() uint32 {
	if x != nil {
		return x.ChannelsCount
	}
	return 0
}

func (x *TCreateVolumeRequest) GetStorageMediaKind() protos.EStorageMediaKind {
	if x != nil {
		return x.StorageMediaKind
	}
	return protos.EStorageMediaKind_STORAGE_MEDIA_DEFAULT
}

func (x *TCreateVolumeRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *TCreateVolumeRequest) GetCloudId() string {
	if x != nil {
		return x.CloudId
	}
	return ""
}

func (x *TCreateVolumeRequest) GetTabletVersion() uint32 {
	if x != nil {
		return x.TabletVersion
	}
	return 0
}

func (x *TCreateVolumeRequest) GetPerformanceProfile() *TVolumePerformanceProfile {
	if x != nil {
		return x.PerformanceProfile
	}
	return nil
}

func (x *TCreateVolumeRequest) GetBaseDiskId() string {
	if x != nil {
		return x.BaseDiskId
	}
	return ""
}

func (x *TCreateVolumeRequest) GetBaseDiskCheckpointId() string {
	if x != nil {
		return x.BaseDiskCheckpointId
	}
	return ""
}

func (x *TCreateVolumeRequest) GetPlacementGroupId() string {
	if x != nil {
		return x.PlacementGroupId
	}
	return ""
}

func (x *TCreateVolumeRequest) GetPartitionsCount() uint32 {
	if x != nil {
		return x.PartitionsCount
	}
	return 0
}

func (x *TCreateVolumeRequest) GetEncryptionSpec() *TEncryptionSpec {
	if x != nil {
		return x.EncryptionSpec
	}
	return nil
}

func (x *TCreateVolumeRequest) GetIsSystem() bool {
	if x != nil {
		return x.IsSystem
	}
	return false
}

func (x *TCreateVolumeRequest) GetStoragePoolName() string {
	if x != nil {
		return x.StoragePoolName
	}
	return ""
}

func (x *TCreateVolumeRequest) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *TCreateVolumeRequest) GetPlacementPartitionIndex() uint32 {
	if x != nil {
		return x.PlacementPartitionIndex
	}
	return 0
}

func (x *TCreateVolumeRequest) GetFillGeneration() uint64 {
	if x != nil {
		return x.FillGeneration
	}
	return 0
}

type TCreateVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TCreateVolumeResponse) Reset() {
	*x = TCreateVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCreateVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCreateVolumeResponse) ProtoMessage() {}

func (x *TCreateVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCreateVolumeResponse.ProtoReflect.Descriptor instead.
func (*TCreateVolumeResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{11}
}

func (x *TCreateVolumeResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TDestroyVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Label of volume to destroy.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// If this flag is set, nbs will destroy the specified disk only if it's
	// broken and can't be repaired
	DestroyIfBroken bool `protobuf:"varint,3,opt,name=DestroyIfBroken,proto3" json:"DestroyIfBroken,omitempty"`
	// Synchronous force deallocation: deallocate nonrepl. backend and wait for
	// devices cleanup.
	Sync bool `protobuf:"varint,4,opt,name=Sync,proto3" json:"Sync,omitempty"`
	// Delete requests with incorrect FillGeneration will be rejected.
	FillGeneration uint64 `protobuf:"varint,6,opt,name=FillGeneration,proto3" json:"FillGeneration,omitempty"`
}

func (x *TDestroyVolumeRequest) Reset() {
	*x = TDestroyVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDestroyVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDestroyVolumeRequest) ProtoMessage() {}

func (x *TDestroyVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDestroyVolumeRequest.ProtoReflect.Descriptor instead.
func (*TDestroyVolumeRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{12}
}

func (x *TDestroyVolumeRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TDestroyVolumeRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TDestroyVolumeRequest) GetDestroyIfBroken() bool {
	if x != nil {
		return x.DestroyIfBroken
	}
	return false
}

func (x *TDestroyVolumeRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

func (x *TDestroyVolumeRequest) GetFillGeneration() uint64 {
	if x != nil {
		return x.FillGeneration
	}
	return 0
}

type TDestroyVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TDestroyVolumeResponse) Reset() {
	*x = TDestroyVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDestroyVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDestroyVolumeResponse) ProtoMessage() {}

func (x *TDestroyVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDestroyVolumeResponse.ProtoReflect.Descriptor instead.
func (*TDestroyVolumeResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{13}
}

func (x *TDestroyVolumeResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TResizeVolumeRequestFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NBS-841
	NoSeparateMixedChannelAllocation bool `protobuf:"varint,1,opt,name=NoSeparateMixedChannelAllocation,proto3" json:"NoSeparateMixedChannelAllocation,omitempty"`
}

func (x *TResizeVolumeRequestFlags) Reset() {
	*x = TResizeVolumeRequestFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TResizeVolumeRequestFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TResizeVolumeRequestFlags) ProtoMessage() {}

func (x *TResizeVolumeRequestFlags) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TResizeVolumeRequestFlags.ProtoReflect.Descriptor instead.
func (*TResizeVolumeRequestFlags) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{14}
}

func (x *TResizeVolumeRequestFlags) GetNoSeparateMixedChannelAllocation() bool {
	if x != nil {
		return x.NoSeparateMixedChannelAllocation
	}
	return false
}

type TResizeVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Label of volume to resize.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Number of blocks stored in volume.
	// Only size increase is guaranteed to work.
	BlocksCount uint64 `protobuf:"varint,3,opt,name=BlocksCount,proto3" json:"BlocksCount,omitempty"`
	// Number of user channels to store blobs (unused, computed automatically instead).
	ChannelsCount uint32 `protobuf:"varint,4,opt,name=ChannelsCount,proto3" json:"ChannelsCount,omitempty"`
	// Volume configuration version resize applies to.
	ConfigVersion uint32 `protobuf:"varint,5,opt,name=ConfigVersion,proto3" json:"ConfigVersion,omitempty"`
	// Performance profile, used for throttling
	// Fields with zero values will be autocalculated based on main storage config
	PerformanceProfile *TVolumePerformanceProfile `protobuf:"bytes,6,opt,name=PerformanceProfile,proto3" json:"PerformanceProfile,omitempty"`
	// Various experimental flags
	Flags *TResizeVolumeRequestFlags `protobuf:"bytes,7,opt,name=Flags,proto3" json:"Flags,omitempty"`
}

func (x *TResizeVolumeRequest) Reset() {
	*x = TResizeVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TResizeVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TResizeVolumeRequest) ProtoMessage() {}

func (x *TResizeVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TResizeVolumeRequest.ProtoReflect.Descriptor instead.
func (*TResizeVolumeRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{15}
}

func (x *TResizeVolumeRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TResizeVolumeRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TResizeVolumeRequest) GetBlocksCount() uint64 {
	if x != nil {
		return x.BlocksCount
	}
	return 0
}

func (x *TResizeVolumeRequest) GetChannelsCount() uint32 {
	if x != nil {
		return x.ChannelsCount
	}
	return 0
}

func (x *TResizeVolumeRequest) GetConfigVersion() uint32 {
	if x != nil {
		return x.ConfigVersion
	}
	return 0
}

func (x *TResizeVolumeRequest) GetPerformanceProfile() *TVolumePerformanceProfile {
	if x != nil {
		return x.PerformanceProfile
	}
	return nil
}

func (x *TResizeVolumeRequest) GetFlags() *TResizeVolumeRequestFlags {
	if x != nil {
		return x.Flags
	}
	return nil
}

type TResizeVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TResizeVolumeResponse) Reset() {
	*x = TResizeVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TResizeVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TResizeVolumeResponse) ProtoMessage() {}

func (x *TResizeVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TResizeVolumeResponse.ProtoReflect.Descriptor instead.
func (*TResizeVolumeResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{16}
}

func (x *TResizeVolumeResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TAlterVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Label of volume to alter.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Owner information.
	ProjectId string `protobuf:"bytes,3,opt,name=ProjectId,proto3" json:"ProjectId,omitempty"`
	// User folder Id, used for billing.
	FolderId string `protobuf:"bytes,4,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	// Cloud Id, used for billing.
	CloudId string `protobuf:"bytes,5,opt,name=CloudId,proto3" json:"CloudId,omitempty"`
	// Volume configuration version alter applies to.
	ConfigVersion uint32 `protobuf:"varint,6,opt,name=ConfigVersion,proto3" json:"ConfigVersion,omitempty"`
	// Encryption key hash, used for encrypted disks.
	EncryptionKeyHash []byte `protobuf:"bytes,7,opt,name=EncryptionKeyHash,proto3" json:"EncryptionKeyHash,omitempty"`
}

func (x *TAlterVolumeRequest) Reset() {
	*x = TAlterVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TAlterVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TAlterVolumeRequest) ProtoMessage() {}

func (x *TAlterVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TAlterVolumeRequest.ProtoReflect.Descriptor instead.
func (*TAlterVolumeRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{17}
}

func (x *TAlterVolumeRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TAlterVolumeRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TAlterVolumeRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *TAlterVolumeRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *TAlterVolumeRequest) GetCloudId() string {
	if x != nil {
		return x.CloudId
	}
	return ""
}

func (x *TAlterVolumeRequest) GetConfigVersion() uint32 {
	if x != nil {
		return x.ConfigVersion
	}
	return 0
}

func (x *TAlterVolumeRequest) GetEncryptionKeyHash() []byte {
	if x != nil {
		return x.EncryptionKeyHash
	}
	return nil
}

type TAlterVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TAlterVolumeResponse) Reset() {
	*x = TAlterVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TAlterVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TAlterVolumeResponse) ProtoMessage() {}

func (x *TAlterVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TAlterVolumeResponse.ProtoReflect.Descriptor instead.
func (*TAlterVolumeResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{18}
}

func (x *TAlterVolumeResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TAssignVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Label of volume to assign.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// VM information.
	InstanceId string `protobuf:"bytes,3,opt,name=InstanceId,proto3" json:"InstanceId,omitempty"`
	// VM token.
	Token string `protobuf:"bytes,4,opt,name=Token,proto3" json:"Token,omitempty"`
	// Assigned host.
	Host string `protobuf:"bytes,5,opt,name=Host,proto3" json:"Host,omitempty"`
	// Mount token version.
	TokenVersion uint64 `protobuf:"varint,6,opt,name=TokenVersion,proto3" json:"TokenVersion,omitempty"`
}

func (x *TAssignVolumeRequest) Reset() {
	*x = TAssignVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TAssignVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TAssignVolumeRequest) ProtoMessage() {}

func (x *TAssignVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TAssignVolumeRequest.ProtoReflect.Descriptor instead.
func (*TAssignVolumeRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{19}
}

func (x *TAssignVolumeRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TAssignVolumeRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TAssignVolumeRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *TAssignVolumeRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TAssignVolumeRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *TAssignVolumeRequest) GetTokenVersion() uint64 {
	if x != nil {
		return x.TokenVersion
	}
	return 0
}

type TAssignVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Volume information.
	Volume *TVolume `protobuf:"bytes,2,opt,name=Volume,proto3" json:"Volume,omitempty"`
}

func (x *TAssignVolumeResponse) Reset() {
	*x = TAssignVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TAssignVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TAssignVolumeResponse) ProtoMessage() {}

func (x *TAssignVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TAssignVolumeResponse.ProtoReflect.Descriptor instead.
func (*TAssignVolumeResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{20}
}

func (x *TAssignVolumeResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TAssignVolumeResponse) GetVolume() *TVolume {
	if x != nil {
		return x.Volume
	}
	return nil
}

type TListVolumesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
}

func (x *TListVolumesRequest) Reset() {
	*x = TListVolumesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TListVolumesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TListVolumesRequest) ProtoMessage() {}

func (x *TListVolumesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TListVolumesRequest.ProtoReflect.Descriptor instead.
func (*TListVolumesRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{21}
}

func (x *TListVolumesRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

type TListVolumesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// List of volume names.
	Volumes []string `protobuf:"bytes,2,rep,name=Volumes,proto3" json:"Volumes,omitempty"`
}

func (x *TListVolumesResponse) Reset() {
	*x = TListVolumesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TListVolumesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TListVolumesResponse) ProtoMessage() {}

func (x *TListVolumesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TListVolumesResponse.ProtoReflect.Descriptor instead.
func (*TListVolumesResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{22}
}

func (x *TListVolumesResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TListVolumesResponse) GetVolumes() []string {
	if x != nil {
		return x.Volumes
	}
	return nil
}

type TStatVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Label of volume to query.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Maybe some flags to describe what exactly to query, if some info is hard to get?
	Flags uint32 `protobuf:"varint,3,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// Storage config fields to get values for.
	StorageConfigFields []string `protobuf:"bytes,4,rep,name=StorageConfigFields,proto3" json:"StorageConfigFields,omitempty"`
	// Don't return partition stats (skips partition readiness check).
	NoPartition bool `protobuf:"varint,5,opt,name=NoPartition,proto3" json:"NoPartition,omitempty"`
}

func (x *TStatVolumeRequest) Reset() {
	*x = TStatVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TStatVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TStatVolumeRequest) ProtoMessage() {}

func (x *TStatVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TStatVolumeRequest.ProtoReflect.Descriptor instead.
func (*TStatVolumeRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{23}
}

func (x *TStatVolumeRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TStatVolumeRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TStatVolumeRequest) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *TStatVolumeRequest) GetStorageConfigFields() []string {
	if x != nil {
		return x.StorageConfigFields
	}
	return nil
}

func (x *TStatVolumeRequest) GetNoPartition() bool {
	if x != nil {
		return x.NoPartition
	}
	return false
}

type TStatVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Volume information.
	Volume *TVolume `protobuf:"bytes,2,opt,name=Volume,proto3" json:"Volume,omitempty"`
	// Volume statistics.
	Stats *TVolumeStats `protobuf:"bytes,3,opt,name=Stats,proto3" json:"Stats,omitempty"`
	// Volume Mount seq number.
	MountSeqNumber uint64 `protobuf:"varint,4,opt,name=MountSeqNumber,proto3" json:"MountSeqNumber,omitempty"`
	// Request traces.
	Trace *protos.TTraceInfo `protobuf:"bytes,5,opt,name=Trace,proto3" json:"Trace,omitempty"`
	// List of checkpoints.
	Checkpoints []string `protobuf:"bytes,6,rep,name=Checkpoints,proto3" json:"Checkpoints,omitempty"`
	// List of volume clients.
	Clients []*TVolumeClient `protobuf:"bytes,7,rep,name=Clients,proto3" json:"Clients,omitempty"`
	// The host where volume tablet is currently running.
	TabletHost string `protobuf:"bytes,8,opt,name=TabletHost,proto3" json:"TabletHost,omitempty"`
	// Volume generation.
	VolumeGeneration uint32 `protobuf:"varint,9,opt,name=VolumeGeneration,proto3" json:"VolumeGeneration,omitempty"`
	// Mapping of storage config fields to values.
	StorageConfigFieldsToValues map[string]string `protobuf:"bytes,10,rep,name=StorageConfigFieldsToValues,proto3" json:"StorageConfigFieldsToValues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Debug string with some other contents of volume state. There are no
	// guarantees about the format.
	DebugString string `protobuf:"bytes,11,opt,name=DebugString,proto3" json:"DebugString,omitempty"`
}

func (x *TStatVolumeResponse) Reset() {
	*x = TStatVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TStatVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TStatVolumeResponse) ProtoMessage() {}

func (x *TStatVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TStatVolumeResponse.ProtoReflect.Descriptor instead.
func (*TStatVolumeResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{24}
}

func (x *TStatVolumeResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TStatVolumeResponse) GetVolume() *TVolume {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *TStatVolumeResponse) GetStats() *TVolumeStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *TStatVolumeResponse) GetMountSeqNumber() uint64 {
	if x != nil {
		return x.MountSeqNumber
	}
	return 0
}

func (x *TStatVolumeResponse) GetTrace() *protos.TTraceInfo {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *TStatVolumeResponse) GetCheckpoints() []string {
	if x != nil {
		return x.Checkpoints
	}
	return nil
}

func (x *TStatVolumeResponse) GetClients() []*TVolumeClient {
	if x != nil {
		return x.Clients
	}
	return nil
}

func (x *TStatVolumeResponse) GetTabletHost() string {
	if x != nil {
		return x.TabletHost
	}
	return ""
}

func (x *TStatVolumeResponse) GetVolumeGeneration() uint32 {
	if x != nil {
		return x.VolumeGeneration
	}
	return 0
}

func (x *TStatVolumeResponse) GetStorageConfigFieldsToValues() map[string]string {
	if x != nil {
		return x.StorageConfigFieldsToValues
	}
	return nil
}

func (x *TStatVolumeResponse) GetDebugString() string {
	if x != nil {
		return x.DebugString
	}
	return ""
}

type TDescribeVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Label of volume.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
}

func (x *TDescribeVolumeRequest) Reset() {
	*x = TDescribeVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDescribeVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDescribeVolumeRequest) ProtoMessage() {}

func (x *TDescribeVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDescribeVolumeRequest.ProtoReflect.Descriptor instead.
func (*TDescribeVolumeRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{25}
}

func (x *TDescribeVolumeRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TDescribeVolumeRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

type TDescribeVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Volume information.
	Volume *TVolume `protobuf:"bytes,2,opt,name=Volume,proto3" json:"Volume,omitempty"`
}

func (x *TDescribeVolumeResponse) Reset() {
	*x = TDescribeVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDescribeVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDescribeVolumeResponse) ProtoMessage() {}

func (x *TDescribeVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDescribeVolumeResponse.ProtoReflect.Descriptor instead.
func (*TDescribeVolumeResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{26}
}

func (x *TDescribeVolumeResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TDescribeVolumeResponse) GetVolume() *TVolume {
	if x != nil {
		return x.Volume
	}
	return nil
}

type TDescribeVolumeModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Minimum addressable block size (smallest unit of I/O operations).
	BlockSize uint32 `protobuf:"varint,2,opt,name=BlockSize,proto3" json:"BlockSize,omitempty"`
	// Maximum number of blocks stored in volume.
	BlocksCount uint64 `protobuf:"varint,3,opt,name=BlocksCount,proto3" json:"BlocksCount,omitempty"`
	// Storage media to use.
	StorageMediaKind protos.EStorageMediaKind `protobuf:"varint,4,opt,name=StorageMediaKind,proto3,enum=NCloud.NProto.EStorageMediaKind" json:"StorageMediaKind,omitempty"`
	// Partition tablet version.
	TabletVersion uint32 `protobuf:"varint,5,opt,name=TabletVersion,proto3" json:"TabletVersion,omitempty"`
	// Indicates that volume does not belong to user directly, but used for system needs.
	IsSystem bool `protobuf:"varint,6,opt,name=IsSystem,proto3" json:"IsSystem,omitempty"`
	// Id of base disk.
	BaseDiskId string `protobuf:"bytes,7,opt,name=BaseDiskId,proto3" json:"BaseDiskId,omitempty"`
}

func (x *TDescribeVolumeModelRequest) Reset() {
	*x = TDescribeVolumeModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDescribeVolumeModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDescribeVolumeModelRequest) ProtoMessage() {}

func (x *TDescribeVolumeModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDescribeVolumeModelRequest.ProtoReflect.Descriptor instead.
func (*TDescribeVolumeModelRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{27}
}

func (x *TDescribeVolumeModelRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TDescribeVolumeModelRequest) GetBlockSize() uint32 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *TDescribeVolumeModelRequest) GetBlocksCount() uint64 {
	if x != nil {
		return x.BlocksCount
	}
	return 0
}

func (x *TDescribeVolumeModelRequest) GetStorageMediaKind() protos.EStorageMediaKind {
	if x != nil {
		return x.StorageMediaKind
	}
	return protos.EStorageMediaKind_STORAGE_MEDIA_DEFAULT
}

func (x *TDescribeVolumeModelRequest) GetTabletVersion() uint32 {
	if x != nil {
		return x.TabletVersion
	}
	return 0
}

func (x *TDescribeVolumeModelRequest) GetIsSystem() bool {
	if x != nil {
		return x.IsSystem
	}
	return false
}

func (x *TDescribeVolumeModelRequest) GetBaseDiskId() string {
	if x != nil {
		return x.BaseDiskId
	}
	return ""
}

type TDescribeVolumeModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Volume model information.
	VolumeModel *TVolumeModel `protobuf:"bytes,2,opt,name=VolumeModel,proto3" json:"VolumeModel,omitempty"`
}

func (x *TDescribeVolumeModelResponse) Reset() {
	*x = TDescribeVolumeModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDescribeVolumeModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDescribeVolumeModelResponse) ProtoMessage() {}

func (x *TDescribeVolumeModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDescribeVolumeModelResponse.ProtoReflect.Descriptor instead.
func (*TDescribeVolumeModelResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP(), []int{28}
}

func (x *TDescribeVolumeModelResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TDescribeVolumeModelResponse) GetVolumeModel() *TVolumeModel {
	if x != nil {
		return x.VolumeModel
	}
	return nil
}

var File_cloud_blockstore_public_api_protos_volume_proto protoreflect.FileDescriptor

var file_cloud_blockstore_public_api_protos_volume_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x19, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x30, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x72, 0x64, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x25, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x25, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb5, 0x03, 0x0a, 0x19, 0x54, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65,
	0x64, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x4d,
	0x61, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x64, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x2c, 0x0a, 0x11, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x54, 0x68,
	0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x66, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x6f, 0x6f,
	0x73, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x75, 0x72, 0x73, 0x74, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x42, 0x75, 0x72, 0x73, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22,
	0xe4, 0x03, 0x0a, 0x0c, 0x54, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x64, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x12, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12,
	0x4d, 0x69, 0x78, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x46, 0x72, 0x65, 0x73, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x46, 0x72, 0x65, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb7, 0x02, 0x0a, 0x07, 0x54, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x52, 0x64,
	0x6d, 0x61, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x64,
	0x6d, 0x61, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0c, 0x52, 0x64, 0x6d, 0x61,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x22, 0xb4, 0x01, 0x0a, 0x14, 0x54, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x0c, 0x54, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x07, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x6b, 0x0a, 0x0f, 0x54, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x3e, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x48, 0x61,
	0x73, 0x68, 0x22, 0xf7, 0x0b, 0x0a, 0x07, 0x54, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x10, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x12, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61,
	0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x42, 0x61,
	0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69,
	0x73, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x13, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x4d, 0x69,
	0x78, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3c, 0x0a, 0x07, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x73, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x49, 0x4f, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x4f, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x06,
	0x49, 0x4f, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0a, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x46,
	0x72, 0x65, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x46, 0x72, 0x65, 0x73, 0x68, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x49,
	0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49,
	0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x43, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x2a, 0x0a, 0x10,
	0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x52, 0x0a, 0x0e, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x52, 0x0e, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x38, 0x0a, 0x17,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x72, 0x65, 0x73, 0x68, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x46, 0x72, 0x65, 0x73, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26,
	0x0a, 0x0e, 0x49, 0x73, 0x46, 0x69, 0x6c, 0x6c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x49, 0x73, 0x46, 0x69, 0x6c, 0x6c, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4a, 0x04, 0x08, 0x19, 0x10, 0x1a, 0x22, 0x7d, 0x0a, 0x0d,
	0x54, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xad, 0x01, 0x0a, 0x0b,
	0x54, 0x49, 0x4f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd6, 0x0b, 0x0a, 0x0c,
	0x54, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x10,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x49, 0x4f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x10,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x54, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x49, 0x4f, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x11, 0x55, 0x73, 0x65, 0x72, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x0f, 0x53, 0x79, 0x73, 0x52, 0x65, 0x61,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x49, 0x4f, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0f, 0x53, 0x79, 0x73, 0x52, 0x65, 0x61, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x10, 0x53, 0x79, 0x73, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x49, 0x4f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x10, 0x53, 0x79, 0x73, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x4d, 0x69, 0x78, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x62,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64,
	0x42, 0x6c, 0x6f, 0x62, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x72, 0x65, 0x73, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x46, 0x72,
	0x65, 0x73, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a,
	0x0a, 0x10, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x55, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12,
	0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x4e, 0x6f, 0x6e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12,
	0x4e, 0x6f, 0x6e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x47, 0x61, 0x72, 0x62,
	0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x72,
	0x65, 0x73, 0x68, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x46, 0x72, 0x65, 0x73, 0x68, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x55,
	0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x5a, 0x65, 0x72, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x1c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x5a, 0x65, 0x72, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x34, 0x0a, 0x15, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x15, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x42,
	0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x42, 0x6f, 0x6f,
	0x73, 0x74, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x46, 0x0a, 0x1e, 0x4d, 0x61, 0x78, 0x54,
	0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x1e, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x58, 0x0a, 0x13, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x79, 0x73, 0x52, 0x65, 0x61, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x49, 0x4f, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x13, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x79, 0x73, 0x52, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x14, 0x52, 0x65,
	0x61, 0x6c, 0x53, 0x79, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x49, 0x4f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x14, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x79, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75,
	0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x22, 0xc3, 0x07, 0x0a, 0x14, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a,
	0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x12, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x73, 0x65,
	0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61,
	0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x42, 0x61, 0x73, 0x65,
	0x44, 0x69, 0x73, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x52, 0x0a, 0x0e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x46, 0x69, 0x6c, 0x6c,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x15, 0x54, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0xda, 0x01, 0x0a, 0x15, 0x54, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73,
	0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x49, 0x66, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x49, 0x66, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x53,
	0x79, 0x6e, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x53, 0x79, 0x6e, 0x63, 0x12,
	0x26, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x46, 0x69, 0x6c, 0x6c, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0x45, 0x0a,
	0x16, 0x54, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x67, 0x0a, 0x19, 0x54, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x4a, 0x0a, 0x20, 0x4e, 0x6f, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x4d,
	0x69, 0x78, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x4e, 0x6f, 0x53,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x03,
	0x0a, 0x14, 0x54, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x12, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x12, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x4a, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65,
	0x73, 0x69, 0x7a, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x44, 0x0a,
	0x15, 0x54, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x94, 0x02, 0x0a, 0x13, 0x54, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69,
	0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68, 0x22, 0x43, 0x0a, 0x14, 0x54, 0x41,
	0x6c, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0xdb, 0x01, 0x0a, 0x14, 0x54, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x80, 0x01,
	0x0a, 0x15, 0x54, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x22, 0x54, 0x0a, 0x13, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0x5d, 0x0a, 0x14, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x12, 0x54, 0x53, 0x74, 0x61, 0x74, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x44,
	0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4e,
	0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x4e, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xce, 0x05,
	0x0a, 0x13, 0x54, 0x53, 0x74, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x91, 0x01, 0x0a, 0x1b, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x54, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x53, 0x74, 0x61, 0x74,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x54, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x1b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x54, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x4e,
	0x0a, 0x20, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x54, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6f,
	0x0a, 0x16, 0x54, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x22,
	0x82, 0x01, 0x0a, 0x17, 0x54, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x22, 0xcc, 0x02, 0x0a, 0x1b, 0x54, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73,
	0x6b, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x1c, 0x54, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x49, 0x0a, 0x0b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x0b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2a, 0x8a, 0x01, 0x0a,
	0x11, 0x45, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52,
	0x45, 0x50, 0x41, 0x49, 0x52, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x56, 0x4f, 0x4c, 0x55, 0x4d,
	0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x03, 0x2a, 0x43, 0x0a, 0x10, 0x45, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x12, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4c, 0x4f,
	0x43, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f,
	0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x01, 0x2a, 0x40,
	0x0a, 0x0d, 0x45, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x4f, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x0c, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x49, 0x4f, 0x5f, 0x4f, 0x4b, 0x10,
	0x00, 0x12, 0x1d, 0x0a, 0x19, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x49, 0x4f, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01,
	0x42, 0x35, 0x5a, 0x33, 0x61, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x72, 0x75, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_blockstore_public_api_protos_volume_proto_rawDescOnce sync.Once
	file_cloud_blockstore_public_api_protos_volume_proto_rawDescData = file_cloud_blockstore_public_api_protos_volume_proto_rawDesc
)

func file_cloud_blockstore_public_api_protos_volume_proto_rawDescGZIP() []byte {
	file_cloud_blockstore_public_api_protos_volume_proto_rawDescOnce.Do(func() {
		file_cloud_blockstore_public_api_protos_volume_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_blockstore_public_api_protos_volume_proto_rawDescData)
	})
	return file_cloud_blockstore_public_api_protos_volume_proto_rawDescData
}

var file_cloud_blockstore_public_api_protos_volume_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_cloud_blockstore_public_api_protos_volume_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_cloud_blockstore_public_api_protos_volume_proto_goTypes = []interface{}{
	(EVolumeAccessMode)(0),               // 0: NCloud.NBlockStore.NProto.EVolumeAccessMode
	(EVolumeMountMode)(0),                // 1: NCloud.NBlockStore.NProto.EVolumeMountMode
	(EVolumeIOMode)(0),                   // 2: NCloud.NBlockStore.NProto.EVolumeIOMode
	(*TVolumePerformanceProfile)(nil),    // 3: NCloud.NBlockStore.NProto.TVolumePerformanceProfile
	(*TVolumeModel)(nil),                 // 4: NCloud.NBlockStore.NProto.TVolumeModel
	(*TDevice)(nil),                      // 5: NCloud.NBlockStore.NProto.TDevice
	(*TDeviceMigrationInfo)(nil),         // 6: NCloud.NBlockStore.NProto.TDeviceMigrationInfo
	(*TReplicaInfo)(nil),                 // 7: NCloud.NBlockStore.NProto.TReplicaInfo
	(*TEncryptionDesc)(nil),              // 8: NCloud.NBlockStore.NProto.TEncryptionDesc
	(*TVolume)(nil),                      // 9: NCloud.NBlockStore.NProto.TVolume
	(*TVolumeClient)(nil),                // 10: NCloud.NBlockStore.NProto.TVolumeClient
	(*TIOCounters)(nil),                  // 11: NCloud.NBlockStore.NProto.TIOCounters
	(*TVolumeStats)(nil),                 // 12: NCloud.NBlockStore.NProto.TVolumeStats
	(*TCreateVolumeRequest)(nil),         // 13: NCloud.NBlockStore.NProto.TCreateVolumeRequest
	(*TCreateVolumeResponse)(nil),        // 14: NCloud.NBlockStore.NProto.TCreateVolumeResponse
	(*TDestroyVolumeRequest)(nil),        // 15: NCloud.NBlockStore.NProto.TDestroyVolumeRequest
	(*TDestroyVolumeResponse)(nil),       // 16: NCloud.NBlockStore.NProto.TDestroyVolumeResponse
	(*TResizeVolumeRequestFlags)(nil),    // 17: NCloud.NBlockStore.NProto.TResizeVolumeRequestFlags
	(*TResizeVolumeRequest)(nil),         // 18: NCloud.NBlockStore.NProto.TResizeVolumeRequest
	(*TResizeVolumeResponse)(nil),        // 19: NCloud.NBlockStore.NProto.TResizeVolumeResponse
	(*TAlterVolumeRequest)(nil),          // 20: NCloud.NBlockStore.NProto.TAlterVolumeRequest
	(*TAlterVolumeResponse)(nil),         // 21: NCloud.NBlockStore.NProto.TAlterVolumeResponse
	(*TAssignVolumeRequest)(nil),         // 22: NCloud.NBlockStore.NProto.TAssignVolumeRequest
	(*TAssignVolumeResponse)(nil),        // 23: NCloud.NBlockStore.NProto.TAssignVolumeResponse
	(*TListVolumesRequest)(nil),          // 24: NCloud.NBlockStore.NProto.TListVolumesRequest
	(*TListVolumesResponse)(nil),         // 25: NCloud.NBlockStore.NProto.TListVolumesResponse
	(*TStatVolumeRequest)(nil),           // 26: NCloud.NBlockStore.NProto.TStatVolumeRequest
	(*TStatVolumeResponse)(nil),          // 27: NCloud.NBlockStore.NProto.TStatVolumeResponse
	(*TDescribeVolumeRequest)(nil),       // 28: NCloud.NBlockStore.NProto.TDescribeVolumeRequest
	(*TDescribeVolumeResponse)(nil),      // 29: NCloud.NBlockStore.NProto.TDescribeVolumeResponse
	(*TDescribeVolumeModelRequest)(nil),  // 30: NCloud.NBlockStore.NProto.TDescribeVolumeModelRequest
	(*TDescribeVolumeModelResponse)(nil), // 31: NCloud.NBlockStore.NProto.TDescribeVolumeModelResponse
	nil,                                  // 32: NCloud.NBlockStore.NProto.TStatVolumeResponse.StorageConfigFieldsToValuesEntry
	(protos.EStorageMediaKind)(0),        // 33: NCloud.NProto.EStorageMediaKind
	(*TRdmaEndpoint)(nil),                // 34: NCloud.NBlockStore.NProto.TRdmaEndpoint
	(EEncryptionMode)(0),                 // 35: NCloud.NBlockStore.NProto.EEncryptionMode
	(*THeaders)(nil),                     // 36: NCloud.NBlockStore.NProto.THeaders
	(*TEncryptionSpec)(nil),              // 37: NCloud.NBlockStore.NProto.TEncryptionSpec
	(*protos.TError)(nil),                // 38: NCloud.NProto.TError
	(*protos.TTraceInfo)(nil),            // 39: NCloud.NProto.TTraceInfo
}
var file_cloud_blockstore_public_api_protos_volume_proto_depIdxs = []int32{
	33, // 0: NCloud.NBlockStore.NProto.TVolumeModel.StorageMediaKind:type_name -> NCloud.NProto.EStorageMediaKind
	3,  // 1: NCloud.NBlockStore.NProto.TVolumeModel.PerformanceProfile:type_name -> NCloud.NBlockStore.NProto.TVolumePerformanceProfile
	34, // 2: NCloud.NBlockStore.NProto.TDevice.RdmaEndpoint:type_name -> NCloud.NBlockStore.NProto.TRdmaEndpoint
	5,  // 3: NCloud.NBlockStore.NProto.TDeviceMigrationInfo.TargetDevice:type_name -> NCloud.NBlockStore.NProto.TDevice
	5,  // 4: NCloud.NBlockStore.NProto.TReplicaInfo.Devices:type_name -> NCloud.NBlockStore.NProto.TDevice
	35, // 5: NCloud.NBlockStore.NProto.TEncryptionDesc.Mode:type_name -> NCloud.NBlockStore.NProto.EEncryptionMode
	33, // 6: NCloud.NBlockStore.NProto.TVolume.StorageMediaKind:type_name -> NCloud.NProto.EStorageMediaKind
	3,  // 7: NCloud.NBlockStore.NProto.TVolume.PerformanceProfile:type_name -> NCloud.NBlockStore.NProto.TVolumePerformanceProfile
	5,  // 8: NCloud.NBlockStore.NProto.TVolume.Devices:type_name -> NCloud.NBlockStore.NProto.TDevice
	2,  // 9: NCloud.NBlockStore.NProto.TVolume.IOMode:type_name -> NCloud.NBlockStore.NProto.EVolumeIOMode
	6,  // 10: NCloud.NBlockStore.NProto.TVolume.Migrations:type_name -> NCloud.NBlockStore.NProto.TDeviceMigrationInfo
	7,  // 11: NCloud.NBlockStore.NProto.TVolume.Replicas:type_name -> NCloud.NBlockStore.NProto.TReplicaInfo
	8,  // 12: NCloud.NBlockStore.NProto.TVolume.EncryptionDesc:type_name -> NCloud.NBlockStore.NProto.TEncryptionDesc
	11, // 13: NCloud.NBlockStore.NProto.TVolumeStats.UserReadCounters:type_name -> NCloud.NBlockStore.NProto.TIOCounters
	11, // 14: NCloud.NBlockStore.NProto.TVolumeStats.UserWriteCounters:type_name -> NCloud.NBlockStore.NProto.TIOCounters
	11, // 15: NCloud.NBlockStore.NProto.TVolumeStats.SysReadCounters:type_name -> NCloud.NBlockStore.NProto.TIOCounters
	11, // 16: NCloud.NBlockStore.NProto.TVolumeStats.SysWriteCounters:type_name -> NCloud.NBlockStore.NProto.TIOCounters
	11, // 17: NCloud.NBlockStore.NProto.TVolumeStats.RealSysReadCounters:type_name -> NCloud.NBlockStore.NProto.TIOCounters
	11, // 18: NCloud.NBlockStore.NProto.TVolumeStats.RealSysWriteCounters:type_name -> NCloud.NBlockStore.NProto.TIOCounters
	36, // 19: NCloud.NBlockStore.NProto.TCreateVolumeRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	33, // 20: NCloud.NBlockStore.NProto.TCreateVolumeRequest.StorageMediaKind:type_name -> NCloud.NProto.EStorageMediaKind
	3,  // 21: NCloud.NBlockStore.NProto.TCreateVolumeRequest.PerformanceProfile:type_name -> NCloud.NBlockStore.NProto.TVolumePerformanceProfile
	37, // 22: NCloud.NBlockStore.NProto.TCreateVolumeRequest.EncryptionSpec:type_name -> NCloud.NBlockStore.NProto.TEncryptionSpec
	38, // 23: NCloud.NBlockStore.NProto.TCreateVolumeResponse.Error:type_name -> NCloud.NProto.TError
	36, // 24: NCloud.NBlockStore.NProto.TDestroyVolumeRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	38, // 25: NCloud.NBlockStore.NProto.TDestroyVolumeResponse.Error:type_name -> NCloud.NProto.TError
	36, // 26: NCloud.NBlockStore.NProto.TResizeVolumeRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	3,  // 27: NCloud.NBlockStore.NProto.TResizeVolumeRequest.PerformanceProfile:type_name -> NCloud.NBlockStore.NProto.TVolumePerformanceProfile
	17, // 28: NCloud.NBlockStore.NProto.TResizeVolumeRequest.Flags:type_name -> NCloud.NBlockStore.NProto.TResizeVolumeRequestFlags
	38, // 29: NCloud.NBlockStore.NProto.TResizeVolumeResponse.Error:type_name -> NCloud.NProto.TError
	36, // 30: NCloud.NBlockStore.NProto.TAlterVolumeRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	38, // 31: NCloud.NBlockStore.NProto.TAlterVolumeResponse.Error:type_name -> NCloud.NProto.TError
	36, // 32: NCloud.NBlockStore.NProto.TAssignVolumeRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	38, // 33: NCloud.NBlockStore.NProto.TAssignVolumeResponse.Error:type_name -> NCloud.NProto.TError
	9,  // 34: NCloud.NBlockStore.NProto.TAssignVolumeResponse.Volume:type_name -> NCloud.NBlockStore.NProto.TVolume
	36, // 35: NCloud.NBlockStore.NProto.TListVolumesRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	38, // 36: NCloud.NBlockStore.NProto.TListVolumesResponse.Error:type_name -> NCloud.NProto.TError
	36, // 37: NCloud.NBlockStore.NProto.TStatVolumeRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	38, // 38: NCloud.NBlockStore.NProto.TStatVolumeResponse.Error:type_name -> NCloud.NProto.TError
	9,  // 39: NCloud.NBlockStore.NProto.TStatVolumeResponse.Volume:type_name -> NCloud.NBlockStore.NProto.TVolume
	12, // 40: NCloud.NBlockStore.NProto.TStatVolumeResponse.Stats:type_name -> NCloud.NBlockStore.NProto.TVolumeStats
	39, // 41: NCloud.NBlockStore.NProto.TStatVolumeResponse.Trace:type_name -> NCloud.NProto.TTraceInfo
	10, // 42: NCloud.NBlockStore.NProto.TStatVolumeResponse.Clients:type_name -> NCloud.NBlockStore.NProto.TVolumeClient
	32, // 43: NCloud.NBlockStore.NProto.TStatVolumeResponse.StorageConfigFieldsToValues:type_name -> NCloud.NBlockStore.NProto.TStatVolumeResponse.StorageConfigFieldsToValuesEntry
	36, // 44: NCloud.NBlockStore.NProto.TDescribeVolumeRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	38, // 45: NCloud.NBlockStore.NProto.TDescribeVolumeResponse.Error:type_name -> NCloud.NProto.TError
	9,  // 46: NCloud.NBlockStore.NProto.TDescribeVolumeResponse.Volume:type_name -> NCloud.NBlockStore.NProto.TVolume
	36, // 47: NCloud.NBlockStore.NProto.TDescribeVolumeModelRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	33, // 48: NCloud.NBlockStore.NProto.TDescribeVolumeModelRequest.StorageMediaKind:type_name -> NCloud.NProto.EStorageMediaKind
	38, // 49: NCloud.NBlockStore.NProto.TDescribeVolumeModelResponse.Error:type_name -> NCloud.NProto.TError
	4,  // 50: NCloud.NBlockStore.NProto.TDescribeVolumeModelResponse.VolumeModel:type_name -> NCloud.NBlockStore.NProto.TVolumeModel
	51, // [51:51] is the sub-list for method output_type
	51, // [51:51] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_cloud_blockstore_public_api_protos_volume_proto_init() }
func file_cloud_blockstore_public_api_protos_volume_proto_init() {
	if File_cloud_blockstore_public_api_protos_volume_proto != nil {
		return
	}
	file_cloud_blockstore_public_api_protos_encryption_proto_init()
	file_cloud_blockstore_public_api_protos_headers_proto_init()
	file_cloud_blockstore_public_api_protos_rdma_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TVolumePerformanceProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TVolumeModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDeviceMigrationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TReplicaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TEncryptionDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TVolumeClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TIOCounters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TVolumeStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCreateVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCreateVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDestroyVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDestroyVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TResizeVolumeRequestFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TResizeVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TResizeVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TAlterVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TAlterVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TAssignVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TAssignVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TListVolumesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TListVolumesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TStatVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TStatVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDescribeVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDescribeVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDescribeVolumeModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_public_api_protos_volume_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDescribeVolumeModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_blockstore_public_api_protos_volume_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_blockstore_public_api_protos_volume_proto_goTypes,
		DependencyIndexes: file_cloud_blockstore_public_api_protos_volume_proto_depIdxs,
		EnumInfos:         file_cloud_blockstore_public_api_protos_volume_proto_enumTypes,
		MessageInfos:      file_cloud_blockstore_public_api_protos_volume_proto_msgTypes,
	}.Build()
	File_cloud_blockstore_public_api_protos_volume_proto = out.File
	file_cloud_blockstore_public_api_protos_volume_proto_rawDesc = nil
	file_cloud_blockstore_public_api_protos_volume_proto_goTypes = nil
	file_cloud_blockstore_public_api_protos_volume_proto_depIdxs = nil
}
