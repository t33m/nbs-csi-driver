//
// This file defines language for trace queries and serialization format for trace logs

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.0
// source: library/cpp/lwtrace/protos/lwtrace.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EOperatorType int32

const (
	EOperatorType_OT_EQ EOperatorType = 0
	EOperatorType_OT_NE EOperatorType = 1
	EOperatorType_OT_LT EOperatorType = 2
	EOperatorType_OT_LE EOperatorType = 3
	EOperatorType_OT_GT EOperatorType = 4
	EOperatorType_OT_GE EOperatorType = 5
)

// Enum value maps for EOperatorType.
var (
	EOperatorType_name = map[int32]string{
		0: "OT_EQ",
		1: "OT_NE",
		2: "OT_LT",
		3: "OT_LE",
		4: "OT_GT",
		5: "OT_GE",
	}
	EOperatorType_value = map[string]int32{
		"OT_EQ": 0,
		"OT_NE": 1,
		"OT_LT": 2,
		"OT_LE": 3,
		"OT_GT": 4,
		"OT_GE": 5,
	}
)

func (x EOperatorType) Enum() *EOperatorType {
	p := new(EOperatorType)
	*p = x
	return p
}

func (x EOperatorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOperatorType) Descriptor() protoreflect.EnumDescriptor {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_enumTypes[0].Descriptor()
}

func (EOperatorType) Type() protoreflect.EnumType {
	return &file_library_cpp_lwtrace_protos_lwtrace_proto_enumTypes[0]
}

func (x EOperatorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EOperatorType.Descriptor instead.
func (EOperatorType) EnumDescriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{0}
}

type EStatementType int32

const (
	EStatementType_ST_MOV    EStatementType = 0
	EStatementType_ST_ADD    EStatementType = 1
	EStatementType_ST_SUB    EStatementType = 2
	EStatementType_ST_MUL    EStatementType = 3
	EStatementType_ST_DIV    EStatementType = 4
	EStatementType_ST_MOD    EStatementType = 5
	EStatementType_ST_ADD_EQ EStatementType = 6
	EStatementType_ST_SUB_EQ EStatementType = 7
	EStatementType_ST_INC    EStatementType = 8
	EStatementType_ST_DEC    EStatementType = 9
)

// Enum value maps for EStatementType.
var (
	EStatementType_name = map[int32]string{
		0: "ST_MOV",
		1: "ST_ADD",
		2: "ST_SUB",
		3: "ST_MUL",
		4: "ST_DIV",
		5: "ST_MOD",
		6: "ST_ADD_EQ",
		7: "ST_SUB_EQ",
		8: "ST_INC",
		9: "ST_DEC",
	}
	EStatementType_value = map[string]int32{
		"ST_MOV":    0,
		"ST_ADD":    1,
		"ST_SUB":    2,
		"ST_MUL":    3,
		"ST_DIV":    4,
		"ST_MOD":    5,
		"ST_ADD_EQ": 6,
		"ST_SUB_EQ": 7,
		"ST_INC":    8,
		"ST_DEC":    9,
	}
)

func (x EStatementType) Enum() *EStatementType {
	p := new(EStatementType)
	*p = x
	return p
}

func (x EStatementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStatementType) Descriptor() protoreflect.EnumDescriptor {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_enumTypes[1].Descriptor()
}

func (EStatementType) Type() protoreflect.EnumType {
	return &file_library_cpp_lwtrace_protos_lwtrace_proto_enumTypes[1]
}

func (x EStatementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EStatementType.Descriptor instead.
func (EStatementType) EnumDescriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{1}
}

//////////////////////////////////////////////////////////////////////////////////////////////
//                       Serialization format for trace logs                                //
//////////////////////////////////////////////////////////////////////////////////////////////
type EParamTypePb int32

const (
	EParamTypePb_PT_UNKNOWN EParamTypePb = 0
	EParamTypePb_PT_I64     EParamTypePb = 1
	EParamTypePb_PT_Ui64    EParamTypePb = 2
	EParamTypePb_PT_Double  EParamTypePb = 3
	EParamTypePb_PT_Str     EParamTypePb = 4
	EParamTypePb_PT_Symbol  EParamTypePb = 5
	EParamTypePb_PT_Check   EParamTypePb = 6
)

// Enum value maps for EParamTypePb.
var (
	EParamTypePb_name = map[int32]string{
		0: "PT_UNKNOWN",
		1: "PT_I64",
		2: "PT_Ui64",
		3: "PT_Double",
		4: "PT_Str",
		5: "PT_Symbol",
		6: "PT_Check",
	}
	EParamTypePb_value = map[string]int32{
		"PT_UNKNOWN": 0,
		"PT_I64":     1,
		"PT_Ui64":    2,
		"PT_Double":  3,
		"PT_Str":     4,
		"PT_Symbol":  5,
		"PT_Check":   6,
	}
)

func (x EParamTypePb) Enum() *EParamTypePb {
	p := new(EParamTypePb)
	*p = x
	return p
}

func (x EParamTypePb) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EParamTypePb) Descriptor() protoreflect.EnumDescriptor {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_enumTypes[2].Descriptor()
}

func (EParamTypePb) Type() protoreflect.EnumType {
	return &file_library_cpp_lwtrace_protos_lwtrace_proto_enumTypes[2]
}

func (x EParamTypePb) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EParamTypePb.Descriptor instead.
func (EParamTypePb) EnumDescriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{2}
}

type TProbeDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"` // Use either name+provider
	Provider string `protobuf:"bytes,3,opt,name=Provider,proto3" json:"Provider,omitempty"`
	Group    string `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"` // or group
}

func (x *TProbeDesc) Reset() {
	*x = TProbeDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TProbeDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TProbeDesc) ProtoMessage() {}

func (x *TProbeDesc) ProtoReflect() protoreflect.Message {
	mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TProbeDesc.ProtoReflect.Descriptor instead.
func (*TProbeDesc) Descriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{0}
}

func (x *TProbeDesc) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TProbeDesc) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *TProbeDesc) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type TArgument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param    string `protobuf:"bytes,1,opt,name=Param,proto3" json:"Param,omitempty"`
	Value    []byte `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	Variable string `protobuf:"bytes,3,opt,name=Variable,proto3" json:"Variable,omitempty"`
}

func (x *TArgument) Reset() {
	*x = TArgument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TArgument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TArgument) ProtoMessage() {}

func (x *TArgument) ProtoReflect() protoreflect.Message {
	mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TArgument.ProtoReflect.Descriptor instead.
func (*TArgument) Descriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{1}
}

func (x *TArgument) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *TArgument) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TArgument) GetVariable() string {
	if x != nil {
		return x.Variable
	}
	return ""
}

type TOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     EOperatorType `protobuf:"varint,1,opt,name=Type,proto3,enum=NLWTrace.EOperatorType" json:"Type,omitempty"`
	Argument []*TArgument  `protobuf:"bytes,8,rep,name=Argument,proto3" json:"Argument,omitempty"`
}

func (x *TOperator) Reset() {
	*x = TOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TOperator) ProtoMessage() {}

func (x *TOperator) ProtoReflect() protoreflect.Message {
	mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TOperator.ProtoReflect.Descriptor instead.
func (*TOperator) Descriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{2}
}

func (x *TOperator) GetType() EOperatorType {
	if x != nil {
		return x.Type
	}
	return EOperatorType_OT_EQ
}

func (x *TOperator) GetArgument() []*TArgument {
	if x != nil {
		return x.Argument
	}
	return nil
}

type TPredicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operators  []*TOperator `protobuf:"bytes,1,rep,name=Operators,proto3" json:"Operators,omitempty"`     // All operators are combined using logical AND
	SampleRate float64      `protobuf:"fixed64,2,opt,name=SampleRate,proto3" json:"SampleRate,omitempty"` // value 1.0 means trigger actions on 100% events (do not sample if value is not set)
}

func (x *TPredicate) Reset() {
	*x = TPredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPredicate) ProtoMessage() {}

func (x *TPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPredicate.ProtoReflect.Descriptor instead.
func (*TPredicate) Descriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{3}
}

func (x *TPredicate) GetOperators() []*TOperator {
	if x != nil {
		return x.Operators
	}
	return nil
}

func (x *TPredicate) GetSampleRate() float64 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

type TLogAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoNotLogParams bool   `protobuf:"varint,2,opt,name=DoNotLogParams,proto3" json:"DoNotLogParams,omitempty"`
	LogTimestamp   bool   `protobuf:"varint,3,opt,name=LogTimestamp,proto3" json:"LogTimestamp,omitempty"`
	MaxRecords     uint32 `protobuf:"varint,4,opt,name=MaxRecords,proto3" json:"MaxRecords,omitempty"` // Do not write more than MaxRecords records to the log (count from the trace beginning, not start)
}

func (x *TLogAction) Reset() {
	*x = TLogAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLogAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLogAction) ProtoMessage() {}

func (x *TLogAction) ProtoReflect() protoreflect.Message {
	mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLogAction.ProtoReflect.Descriptor instead.
func (*TLogAction) Descriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{4}
}

func (x *TLogAction) GetDoNotLogParams() bool {
	if x != nil {
		return x.DoNotLogParams
	}
	return false
}

func (x *TLogAction) GetLogTimestamp() bool {
	if x != nil {
		return x.LogTimestamp
	}
	return false
}

func (x *TLogAction) GetMaxRecords() uint32 {
	if x != nil {
		return x.MaxRecords
	}
	return 0
}

type TPrintToStderrAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TPrintToStderrAction) Reset() {
	*x = TPrintToStderrAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPrintToStderrAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPrintToStderrAction) ProtoMessage() {}

func (x *TPrintToStderrAction) ProtoReflect() protoreflect.Message {
	mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPrintToStderrAction.ProtoReflect.Descriptor instead.
func (*TPrintToStderrAction) Descriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{5}
}

type TKillAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TKillAction) Reset() {
	*x = TKillAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TKillAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TKillAction) ProtoMessage() {}

func (x *TKillAction) ProtoReflect() protoreflect.Message {
	mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TKillAction.ProtoReflect.Descriptor instead.
func (*TKillAction) Descriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{6}
}

type TSleepAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NanoSeconds uint64 `protobuf:"varint,1,opt,name=NanoSeconds,proto3" json:"NanoSeconds,omitempty"`
}

func (x *TSleepAction) Reset() {
	*x = TSleepAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSleepAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSleepAction) ProtoMessage() {}

func (x *TSleepAction) ProtoReflect() protoreflect.Message {
	mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSleepAction.ProtoReflect.Descriptor instead.
func (*TSleepAction) Descriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{7}
}

func (x *TSleepAction) GetNanoSeconds() uint64 {
	if x != nil {
		return x.NanoSeconds
	}
	return 0
}

type TCustomAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Opts []string `protobuf:"bytes,2,rep,name=Opts,proto3" json:"Opts,omitempty"`
}

func (x *TCustomAction) Reset() {
	*x = TCustomAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCustomAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCustomAction) ProtoMessage() {}

func (x *TCustomAction) ProtoReflect() protoreflect.Message {
	mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCustomAction.ProtoReflect.Descriptor instead.
func (*TCustomAction) Descriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{8}
}

func (x *TCustomAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TCustomAction) GetOpts() []string {
	if x != nil {
		return x.Opts
	}
	return nil
}

type TStatementAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     EStatementType `protobuf:"varint,1,opt,name=Type,proto3,enum=NLWTrace.EStatementType" json:"Type,omitempty"`
	Argument []*TArgument   `protobuf:"bytes,2,rep,name=Argument,proto3" json:"Argument,omitempty"`
}

func (x *TStatementAction) Reset() {
	*x = TStatementAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TStatementAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TStatementAction) ProtoMessage() {}

func (x *TStatementAction) ProtoReflect() protoreflect.Message {
	mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TStatementAction.ProtoReflect.Descriptor instead.
func (*TStatementAction) Descriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{9}
}

func (x *TStatementAction) GetType() EStatementType {
	if x != nil {
		return x.Type
	}
	return EStatementType_ST_MOV
}

func (x *TStatementAction) GetArgument() []*TArgument {
	if x != nil {
		return x.Argument
	}
	return nil
}

type TRunLogShuttleAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ignore         bool   `protobuf:"varint,1,opt,name=Ignore,proto3" json:"Ignore,omitempty"`
	ShuttlesCount  uint64 `protobuf:"varint,2,opt,name=ShuttlesCount,proto3" json:"ShuttlesCount,omitempty"`
	MaxTrackLength uint64 `protobuf:"varint,3,opt,name=MaxTrackLength,proto3" json:"MaxTrackLength,omitempty"`
}

func (x *TRunLogShuttleAction) Reset() {
	*x = TRunLogShuttleAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TRunLogShuttleAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TRunLogShuttleAction) ProtoMessage() {}

func (x *TRunLogShuttleAction) ProtoReflect() protoreflect.Message {
	mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TRunLogShuttleAction.ProtoReflect.Descriptor instead.
func (*TRunLogShuttleAction) Descriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{10}
}

func (x *TRunLogShuttleAction) GetIgnore() bool {
	if x != nil {
		return x.Ignore
	}
	return false
}

func (x *TRunLogShuttleAction) GetShuttlesCount() uint64 {
	if x != nil {
		return x.ShuttlesCount
	}
	return 0
}

func (x *TRunLogShuttleAction) GetMaxTrackLength() uint64 {
	if x != nil {
		return x.MaxTrackLength
	}
	return 0
}

type TEditLogShuttleAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ignore bool `protobuf:"varint,1,opt,name=Ignore,proto3" json:"Ignore,omitempty"`
}

func (x *TEditLogShuttleAction) Reset() {
	*x = TEditLogShuttleAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TEditLogShuttleAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TEditLogShuttleAction) ProtoMessage() {}

func (x *TEditLogShuttleAction) ProtoReflect() protoreflect.Message {
	mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TEditLogShuttleAction.ProtoReflect.Descriptor instead.
func (*TEditLogShuttleAction) Descriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{11}
}

func (x *TEditLogShuttleAction) GetIgnore() bool {
	if x != nil {
		return x.Ignore
	}
	return false
}

type TDropLogShuttleAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TDropLogShuttleAction) Reset() {
	*x = TDropLogShuttleAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDropLogShuttleAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDropLogShuttleAction) ProtoMessage() {}

func (x *TDropLogShuttleAction) ProtoReflect() protoreflect.Message {
	mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDropLogShuttleAction.ProtoReflect.Descriptor instead.
func (*TDropLogShuttleAction) Descriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{12}
}

type TAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogAction            *TLogAction            `protobuf:"bytes,2,opt,name=LogAction,proto3" json:"LogAction,omitempty"`
	PrintToStderrAction  *TPrintToStderrAction  `protobuf:"bytes,3,opt,name=PrintToStderrAction,proto3" json:"PrintToStderrAction,omitempty"`
	CustomAction         *TCustomAction         `protobuf:"bytes,4,opt,name=CustomAction,proto3" json:"CustomAction,omitempty"`
	KillAction           *TKillAction           `protobuf:"bytes,6,opt,name=KillAction,proto3" json:"KillAction,omitempty"`
	SleepAction          *TSleepAction          `protobuf:"bytes,7,opt,name=SleepAction,proto3" json:"SleepAction,omitempty"`
	StatementAction      *TStatementAction      `protobuf:"bytes,8,opt,name=StatementAction,proto3" json:"StatementAction,omitempty"`
	RunLogShuttleAction  *TRunLogShuttleAction  `protobuf:"bytes,100,opt,name=RunLogShuttleAction,proto3" json:"RunLogShuttleAction,omitempty"`
	EditLogShuttleAction *TEditLogShuttleAction `protobuf:"bytes,101,opt,name=EditLogShuttleAction,proto3" json:"EditLogShuttleAction,omitempty"`
	DropLogShuttleAction *TDropLogShuttleAction `protobuf:"bytes,102,opt,name=DropLogShuttleAction,proto3" json:"DropLogShuttleAction,omitempty"`
}

func (x *TAction) Reset() {
	*x = TAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TAction) ProtoMessage() {}

func (x *TAction) ProtoReflect() protoreflect.Message {
	mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TAction.ProtoReflect.Descriptor instead.
func (*TAction) Descriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{13}
}

func (x *TAction) GetLogAction() *TLogAction {
	if x != nil {
		return x.LogAction
	}
	return nil
}

func (x *TAction) GetPrintToStderrAction() *TPrintToStderrAction {
	if x != nil {
		return x.PrintToStderrAction
	}
	return nil
}

func (x *TAction) GetCustomAction() *TCustomAction {
	if x != nil {
		return x.CustomAction
	}
	return nil
}

func (x *TAction) GetKillAction() *TKillAction {
	if x != nil {
		return x.KillAction
	}
	return nil
}

func (x *TAction) GetSleepAction() *TSleepAction {
	if x != nil {
		return x.SleepAction
	}
	return nil
}

func (x *TAction) GetStatementAction() *TStatementAction {
	if x != nil {
		return x.StatementAction
	}
	return nil
}

func (x *TAction) GetRunLogShuttleAction() *TRunLogShuttleAction {
	if x != nil {
		return x.RunLogShuttleAction
	}
	return nil
}

func (x *TAction) GetEditLogShuttleAction() *TEditLogShuttleAction {
	if x != nil {
		return x.EditLogShuttleAction
	}
	return nil
}

func (x *TAction) GetDropLogShuttleAction() *TDropLogShuttleAction {
	if x != nil {
		return x.DropLogShuttleAction
	}
	return nil
}

type TBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProbeDesc *TProbeDesc `protobuf:"bytes,1,opt,name=ProbeDesc,proto3" json:"ProbeDesc,omitempty"`
	Predicate *TPredicate `protobuf:"bytes,2,opt,name=Predicate,proto3" json:"Predicate,omitempty"`
	Action    []*TAction  `protobuf:"bytes,3,rep,name=Action,proto3" json:"Action,omitempty"`
}

func (x *TBlock) Reset() {
	*x = TBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TBlock) ProtoMessage() {}

func (x *TBlock) ProtoReflect() protoreflect.Message {
	mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TBlock.ProtoReflect.Descriptor instead.
func (*TBlock) Descriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{14}
}

func (x *TBlock) GetProbeDesc() *TProbeDesc {
	if x != nil {
		return x.ProbeDesc
	}
	return nil
}

func (x *TBlock) GetPredicate() *TPredicate {
	if x != nil {
		return x.Predicate
	}
	return nil
}

func (x *TBlock) GetAction() []*TAction {
	if x != nil {
		return x.Action
	}
	return nil
}

type TQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of events to hold for every thread in cyclic buffer
	// (Won't be used if LogDurationUs is set to non-zero value)
	PerThreadLogSize uint32 `protobuf:"varint,1,opt,name=PerThreadLogSize,proto3" json:"PerThreadLogSize,omitempty"`
	// Hold events for last Duration microseconds
	// (If zero, than per-thread cyclic buffer will be used to store events)
	LogDurationUs uint64    `protobuf:"varint,2,opt,name=LogDurationUs,proto3" json:"LogDurationUs,omitempty"`
	Blocks        []*TBlock `protobuf:"bytes,3,rep,name=Blocks,proto3" json:"Blocks,omitempty"`
}

func (x *TQuery) Reset() {
	*x = TQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TQuery) ProtoMessage() {}

func (x *TQuery) ProtoReflect() protoreflect.Message {
	mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TQuery.ProtoReflect.Descriptor instead.
func (*TQuery) Descriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{15}
}

func (x *TQuery) GetPerThreadLogSize() uint32 {
	if x != nil {
		return x.PerThreadLogSize
	}
	return 0
}

func (x *TQuery) GetLogDurationUs() uint64 {
	if x != nil {
		return x.LogDurationUs
	}
	return 0
}

func (x *TQuery) GetBlocks() []*TBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type TDashboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string            `protobuf:"bytes,1,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	Description *string            `protobuf:"bytes,2,opt,name=Description,proto3,oneof" json:"Description,omitempty"`
	Rows        []*TDashboard_TRow `protobuf:"bytes,3,rep,name=Rows,proto3" json:"Rows,omitempty"`
}

func (x *TDashboard) Reset() {
	*x = TDashboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDashboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDashboard) ProtoMessage() {}

func (x *TDashboard) ProtoReflect() protoreflect.Message {
	mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDashboard.ProtoReflect.Descriptor instead.
func (*TDashboard) Descriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{16}
}

func (x *TDashboard) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TDashboard) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *TDashboard) GetRows() []*TDashboard_TRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

type TEventPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string         `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Groups     []string       `protobuf:"bytes,2,rep,name=Groups,proto3" json:"Groups,omitempty"` // First group is provider
	ParamTypes []EParamTypePb `protobuf:"varint,3,rep,packed,name=ParamTypes,proto3,enum=NLWTrace.EParamTypePb" json:"ParamTypes,omitempty"`
	ParamNames []string       `protobuf:"bytes,4,rep,name=ParamNames,proto3" json:"ParamNames,omitempty"`
}

func (x *TEventPb) Reset() {
	*x = TEventPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TEventPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TEventPb) ProtoMessage() {}

func (x *TEventPb) ProtoReflect() protoreflect.Message {
	mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TEventPb.ProtoReflect.Descriptor instead.
func (*TEventPb) Descriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{17}
}

func (x *TEventPb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TEventPb) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *TEventPb) GetParamTypes() []EParamTypePb {
	if x != nil {
		return x.ParamTypes
	}
	return nil
}

func (x *TEventPb) GetParamNames() []string {
	if x != nil {
		return x.ParamNames
	}
	return nil
}

type TLogItemPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Thread          uint64   `protobuf:"varint,1,opt,name=Thread,proto3" json:"Thread,omitempty"`
	Name            string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Provider        string   `protobuf:"bytes,3,opt,name=Provider,proto3" json:"Provider,omitempty"`
	Params          [][]byte `protobuf:"bytes,4,rep,name=Params,proto3" json:"Params,omitempty"`
	Timestamp       uint64   `protobuf:"varint,5,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`             // microseconds since epoch
	TimestampCycles uint64   `protobuf:"varint,6,opt,name=TimestampCycles,proto3" json:"TimestampCycles,omitempty"` // cycles since machine boot
}

func (x *TLogItemPb) Reset() {
	*x = TLogItemPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLogItemPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLogItemPb) ProtoMessage() {}

func (x *TLogItemPb) ProtoReflect() protoreflect.Message {
	mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLogItemPb.ProtoReflect.Descriptor instead.
func (*TLogItemPb) Descriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{18}
}

func (x *TLogItemPb) GetThread() uint64 {
	if x != nil {
		return x.Thread
	}
	return 0
}

func (x *TLogItemPb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TLogItemPb) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *TLogItemPb) GetParams() [][]byte {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *TLogItemPb) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TLogItemPb) GetTimestampCycles() uint64 {
	if x != nil {
		return x.TimestampCycles
	}
	return 0
}

type TThreadLogPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadId uint64        `protobuf:"varint,1,opt,name=ThreadId,proto3" json:"ThreadId,omitempty"`
	LogItems []*TLogItemPb `protobuf:"bytes,2,rep,name=LogItems,proto3" json:"LogItems,omitempty"`
}

func (x *TThreadLogPb) Reset() {
	*x = TThreadLogPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TThreadLogPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TThreadLogPb) ProtoMessage() {}

func (x *TThreadLogPb) ProtoReflect() protoreflect.Message {
	mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TThreadLogPb.ProtoReflect.Descriptor instead.
func (*TThreadLogPb) Descriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{19}
}

func (x *TThreadLogPb) GetThreadId() uint64 {
	if x != nil {
		return x.ThreadId
	}
	return 0
}

func (x *TThreadLogPb) GetLogItems() []*TLogItemPb {
	if x != nil {
		return x.LogItems
	}
	return nil
}

type TLogPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trace info
	Name        string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	EventsCount uint64 `protobuf:"varint,3,opt,name=EventsCount,proto3" json:"EventsCount,omitempty"`
	CrtTime     uint64 `protobuf:"varint,4,opt,name=CrtTime,proto3" json:"CrtTime,omitempty"` // Log creation time (seconds since epoch)
	// Traced host info
	Hostname string `protobuf:"bytes,101,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	// Traced process info
	ProcessName      string `protobuf:"bytes,201,opt,name=ProcessName,proto3" json:"ProcessName,omitempty"`
	CommandLine      []byte `protobuf:"bytes,202,opt,name=CommandLine,proto3" json:"CommandLine,omitempty"`
	ProcessStartTime uint64 `protobuf:"varint,203,opt,name=ProcessStartTime,proto3" json:"ProcessStartTime,omitempty"`
	Pid              uint64 `protobuf:"varint,204,opt,name=Pid,proto3" json:"Pid,omitempty"`
	VersionInfo      string `protobuf:"bytes,205,opt,name=VersionInfo,proto3" json:"VersionInfo,omitempty"` // Svn info
	// Trace query and results
	Query      *TQuery         `protobuf:"bytes,301,opt,name=Query,proto3" json:"Query,omitempty"`
	Events     []*TEventPb     `protobuf:"bytes,302,rep,name=Events,proto3" json:"Events,omitempty"`
	ThreadLogs []*TThreadLogPb `protobuf:"bytes,303,rep,name=ThreadLogs,proto3" json:"ThreadLogs,omitempty"`
}

func (x *TLogPb) Reset() {
	*x = TLogPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLogPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLogPb) ProtoMessage() {}

func (x *TLogPb) ProtoReflect() protoreflect.Message {
	mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLogPb.ProtoReflect.Descriptor instead.
func (*TLogPb) Descriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{20}
}

func (x *TLogPb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TLogPb) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TLogPb) GetEventsCount() uint64 {
	if x != nil {
		return x.EventsCount
	}
	return 0
}

func (x *TLogPb) GetCrtTime() uint64 {
	if x != nil {
		return x.CrtTime
	}
	return 0
}

func (x *TLogPb) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *TLogPb) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *TLogPb) GetCommandLine() []byte {
	if x != nil {
		return x.CommandLine
	}
	return nil
}

func (x *TLogPb) GetProcessStartTime() uint64 {
	if x != nil {
		return x.ProcessStartTime
	}
	return 0
}

func (x *TLogPb) GetPid() uint64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *TLogPb) GetVersionInfo() string {
	if x != nil {
		return x.VersionInfo
	}
	return ""
}

func (x *TLogPb) GetQuery() *TQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *TLogPb) GetEvents() []*TEventPb {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *TLogPb) GetThreadLogs() []*TThreadLogPb {
	if x != nil {
		return x.ThreadLogs
	}
	return nil
}

type TShuttlePb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parts []*TLogPb `protobuf:"bytes,1,rep,name=Parts,proto3" json:"Parts,omitempty"`
	Query *TQuery   `protobuf:"bytes,2,opt,name=Query,proto3" json:"Query,omitempty"`
}

func (x *TShuttlePb) Reset() {
	*x = TShuttlePb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TShuttlePb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TShuttlePb) ProtoMessage() {}

func (x *TShuttlePb) ProtoReflect() protoreflect.Message {
	mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TShuttlePb.ProtoReflect.Descriptor instead.
func (*TShuttlePb) Descriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{21}
}

func (x *TShuttlePb) GetParts() []*TLogPb {
	if x != nil {
		return x.Parts
	}
	return nil
}

func (x *TShuttlePb) GetQuery() *TQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

type TOrbitPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shuttles []*TShuttlePb `protobuf:"bytes,1,rep,name=Shuttles,proto3" json:"Shuttles,omitempty"`
}

func (x *TOrbitPb) Reset() {
	*x = TOrbitPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TOrbitPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TOrbitPb) ProtoMessage() {}

func (x *TOrbitPb) ProtoReflect() protoreflect.Message {
	mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TOrbitPb.ProtoReflect.Descriptor instead.
func (*TOrbitPb) Descriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{22}
}

func (x *TOrbitPb) GetShuttles() []*TShuttlePb {
	if x != nil {
		return x.Shuttles
	}
	return nil
}

type TTraceParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value.
	//
	// Types that are assignable to Value:
	//	*TTraceParam_IntValue
	//	*TTraceParam_UintValue
	//	*TTraceParam_DoubleValue
	//	*TTraceParam_StrValue
	Value isTTraceParam_Value `protobuf_oneof:"Value"`
}

func (x *TTraceParam) Reset() {
	*x = TTraceParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TTraceParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TTraceParam) ProtoMessage() {}

func (x *TTraceParam) ProtoReflect() protoreflect.Message {
	mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TTraceParam.ProtoReflect.Descriptor instead.
func (*TTraceParam) Descriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{23}
}

func (m *TTraceParam) GetValue() isTTraceParam_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *TTraceParam) GetIntValue() int64 {
	if x, ok := x.GetValue().(*TTraceParam_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *TTraceParam) GetUintValue() uint64 {
	if x, ok := x.GetValue().(*TTraceParam_UintValue); ok {
		return x.UintValue
	}
	return 0
}

func (x *TTraceParam) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*TTraceParam_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *TTraceParam) GetStrValue() []byte {
	if x, ok := x.GetValue().(*TTraceParam_StrValue); ok {
		return x.StrValue
	}
	return nil
}

type isTTraceParam_Value interface {
	isTTraceParam_Value()
}

type TTraceParam_IntValue struct {
	IntValue int64 `protobuf:"varint,2,opt,name=IntValue,proto3,oneof"`
}

type TTraceParam_UintValue struct {
	UintValue uint64 `protobuf:"varint,3,opt,name=UintValue,proto3,oneof"`
}

type TTraceParam_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,4,opt,name=DoubleValue,proto3,oneof"`
}

type TTraceParam_StrValue struct {
	StrValue []byte `protobuf:"bytes,5,opt,name=StrValue,proto3,oneof"`
}

func (*TTraceParam_IntValue) isTTraceParam_Value() {}

func (*TTraceParam_UintValue) isTTraceParam_Value() {}

func (*TTraceParam_DoubleValue) isTTraceParam_Value() {}

func (*TTraceParam_StrValue) isTTraceParam_Value() {}

type TTraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Probe name.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Provider name.
	Provider string `protobuf:"bytes,2,opt,name=Provider,proto3" json:"Provider,omitempty"`
	// Probe parameters.
	Params []*TTraceParam `protobuf:"bytes,3,rep,name=Params,proto3" json:"Params,omitempty"`
	// Event timestamp in nanosec since epoch.
	TimestampNanosec uint64 `protobuf:"varint,4,opt,name=TimestampNanosec,proto3" json:"TimestampNanosec,omitempty"`
}

func (x *TTraceEvent) Reset() {
	*x = TTraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TTraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TTraceEvent) ProtoMessage() {}

func (x *TTraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TTraceEvent.ProtoReflect.Descriptor instead.
func (*TTraceEvent) Descriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{24}
}

func (x *TTraceEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TTraceEvent) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *TTraceEvent) GetParams() []*TTraceParam {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *TTraceEvent) GetTimestampNanosec() uint64 {
	if x != nil {
		return x.TimestampNanosec
	}
	return 0
}

type TShuttleTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request events.
	Events []*TTraceEvent `protobuf:"bytes,1,rep,name=Events,proto3" json:"Events,omitempty"`
}

func (x *TShuttleTrace) Reset() {
	*x = TShuttleTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TShuttleTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TShuttleTrace) ProtoMessage() {}

func (x *TShuttleTrace) ProtoReflect() protoreflect.Message {
	mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TShuttleTrace.ProtoReflect.Descriptor instead.
func (*TShuttleTrace) Descriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{25}
}

func (x *TShuttleTrace) GetEvents() []*TTraceEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type TTraceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// trace id of remote trace session
	IsTraced bool `protobuf:"varint,1,opt,name=IsTraced,proto3" json:"IsTraced,omitempty"`
}

func (x *TTraceRequest) Reset() {
	*x = TTraceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TTraceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TTraceRequest) ProtoMessage() {}

func (x *TTraceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TTraceRequest.ProtoReflect.Descriptor instead.
func (*TTraceRequest) Descriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{26}
}

func (x *TTraceRequest) GetIsTraced() bool {
	if x != nil {
		return x.IsTraced
	}
	return false
}

type TTraceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// traced events
	Trace *TShuttleTrace `protobuf:"bytes,1,opt,name=Trace,proto3" json:"Trace,omitempty"`
}

func (x *TTraceResponse) Reset() {
	*x = TTraceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TTraceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TTraceResponse) ProtoMessage() {}

func (x *TTraceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TTraceResponse.ProtoReflect.Descriptor instead.
func (*TTraceResponse) Descriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{27}
}

func (x *TTraceResponse) GetTrace() *TShuttleTrace {
	if x != nil {
		return x.Trace
	}
	return nil
}

type TDashboard_TCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url     *string `protobuf:"bytes,1,opt,name=Url,proto3,oneof" json:"Url,omitempty"`
	Title   *string `protobuf:"bytes,2,opt,name=Title,proto3,oneof" json:"Title,omitempty"`
	Text    *string `protobuf:"bytes,3,opt,name=Text,proto3,oneof" json:"Text,omitempty"`
	RowSpan *uint32 `protobuf:"varint,4,opt,name=RowSpan,proto3,oneof" json:"RowSpan,omitempty"`
	ColSpan *uint32 `protobuf:"varint,5,opt,name=ColSpan,proto3,oneof" json:"ColSpan,omitempty"`
}

func (x *TDashboard_TCell) Reset() {
	*x = TDashboard_TCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDashboard_TCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDashboard_TCell) ProtoMessage() {}

func (x *TDashboard_TCell) ProtoReflect() protoreflect.Message {
	mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDashboard_TCell.ProtoReflect.Descriptor instead.
func (*TDashboard_TCell) Descriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{16, 0}
}

func (x *TDashboard_TCell) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *TDashboard_TCell) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *TDashboard_TCell) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *TDashboard_TCell) GetRowSpan() uint32 {
	if x != nil && x.RowSpan != nil {
		return *x.RowSpan
	}
	return 0
}

func (x *TDashboard_TCell) GetColSpan() uint32 {
	if x != nil && x.ColSpan != nil {
		return *x.ColSpan
	}
	return 0
}

type TDashboard_TRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cells []*TDashboard_TCell `protobuf:"bytes,1,rep,name=Cells,proto3" json:"Cells,omitempty"`
}

func (x *TDashboard_TRow) Reset() {
	*x = TDashboard_TRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDashboard_TRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDashboard_TRow) ProtoMessage() {}

func (x *TDashboard_TRow) ProtoReflect() protoreflect.Message {
	mi := &file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDashboard_TRow.ProtoReflect.Descriptor instead.
func (*TDashboard_TRow) Descriptor() ([]byte, []int) {
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP(), []int{16, 1}
}

func (x *TDashboard_TRow) GetCells() []*TDashboard_TCell {
	if x != nil {
		return x.Cells
	}
	return nil
}

var File_library_cpp_lwtrace_protos_lwtrace_proto protoreflect.FileDescriptor

var file_library_cpp_lwtrace_protos_lwtrace_proto_rawDesc = []byte{
	0x0a, 0x28, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2f, 0x63, 0x70, 0x70, 0x2f, 0x6c, 0x77,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6c, 0x77, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x4e, 0x4c, 0x57, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x22, 0x52, 0x0a, 0x0a, 0x54, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x53, 0x0a, 0x09, 0x54, 0x41, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x69, 0x0a,
	0x09, 0x54, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x4e, 0x4c, 0x57, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x2e, 0x45, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x41, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4e, 0x4c, 0x57, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08,
	0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x5f, 0x0a, 0x0a, 0x54, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4e, 0x4c, 0x57, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0x78, 0x0a, 0x0a, 0x54, 0x4c, 0x6f,
	0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x6f, 0x4e, 0x6f, 0x74,
	0x4c, 0x6f, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x44, 0x6f, 0x4e, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x4c, 0x6f, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x54, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x53,
	0x74, 0x64, 0x65, 0x72, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0d, 0x0a, 0x0b, 0x54,
	0x4b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x30, 0x0a, 0x0c, 0x54, 0x53,
	0x6c, 0x65, 0x65, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x61,
	0x6e, 0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x4e, 0x61, 0x6e, 0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x37, 0x0a, 0x0d,
	0x54, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x4f, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x4f, 0x70, 0x74, 0x73, 0x22, 0x71, 0x0a, 0x10, 0x54, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x4e, 0x4c, 0x57, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x2e, 0x45, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x41, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4e, 0x4c, 0x57, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08,
	0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x7c, 0x0a, 0x14, 0x54, 0x52, 0x75, 0x6e,
	0x4c, 0x6f, 0x67, 0x53, 0x68, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x68, 0x75, 0x74,
	0x74, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x53, 0x68, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x2f, 0x0a, 0x15, 0x54, 0x45, 0x64, 0x69, 0x74, 0x4c,
	0x6f, 0x67, 0x53, 0x68, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x54, 0x44, 0x72, 0x6f, 0x70,
	0x4c, 0x6f, 0x67, 0x53, 0x68, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xff, 0x04, 0x0a, 0x07, 0x54, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x09,
	0x4c, 0x6f, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x4e, 0x4c, 0x57, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x4c, 0x6f, 0x67, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x4c, 0x6f, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x50, 0x0a, 0x13, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x74, 0x64, 0x65, 0x72,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x4e, 0x4c, 0x57, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x54,
	0x6f, 0x53, 0x74, 0x64, 0x65, 0x72, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x50,
	0x72, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x74, 0x64, 0x65, 0x72, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4e, 0x4c, 0x57, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x2e, 0x54, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x35, 0x0a, 0x0a, 0x4b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x4c, 0x57, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x54,
	0x4b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x4b, 0x69, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4e, 0x4c,
	0x57, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x44, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4e, 0x4c, 0x57, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x13, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x67,
	0x53, 0x68, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4e, 0x4c, 0x57, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x54,
	0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x67, 0x53, 0x68, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x13, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x67, 0x53, 0x68, 0x75, 0x74, 0x74,
	0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x14, 0x45, 0x64, 0x69, 0x74,
	0x4c, 0x6f, 0x67, 0x53, 0x68, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4e, 0x4c, 0x57, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x2e, 0x54, 0x45, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x53, 0x68, 0x75, 0x74, 0x74, 0x6c,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x45, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67,
	0x53, 0x68, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a,
	0x14, 0x44, 0x72, 0x6f, 0x70, 0x4c, 0x6f, 0x67, 0x53, 0x68, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4e, 0x4c,
	0x57, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x44, 0x72, 0x6f, 0x70, 0x4c, 0x6f, 0x67, 0x53,
	0x68, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x44, 0x72,
	0x6f, 0x70, 0x4c, 0x6f, 0x67, 0x53, 0x68, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x06, 0x54, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x32, 0x0a,
	0x09, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x4e, 0x4c, 0x57, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0x44, 0x65, 0x73, 0x63, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x32, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4e, 0x4c, 0x57, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e,
	0x54, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x09, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4e, 0x4c, 0x57, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x2e, 0x54, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x84, 0x01, 0x0a, 0x06, 0x54, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x50,
	0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x6f, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x50, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x4c, 0x6f, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x4c, 0x6f, 0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x12, 0x28, 0x0a,
	0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x4e, 0x4c, 0x57, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x94, 0x03, 0x0a, 0x0a, 0x54, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x04, 0x52, 0x6f, 0x77, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4e, 0x4c, 0x57, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e,
	0x54, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x52, 0x6f, 0x77, 0x52,
	0x04, 0x52, 0x6f, 0x77, 0x73, 0x1a, 0xc3, 0x01, 0x0a, 0x05, 0x54, 0x43, 0x65, 0x6c, 0x6c, 0x12,
	0x15, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03,
	0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x6f,
	0x77, 0x53, 0x70, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x07, 0x52,
	0x6f, 0x77, 0x53, 0x70, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x43, 0x6f, 0x6c,
	0x53, 0x70, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x07, 0x43, 0x6f,
	0x6c, 0x53, 0x70, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x55, 0x72, 0x6c,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x54,
	0x65, 0x78, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x6f, 0x77, 0x53, 0x70, 0x61, 0x6e, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x43, 0x6f, 0x6c, 0x53, 0x70, 0x61, 0x6e, 0x1a, 0x38, 0x0a, 0x04, 0x54,
	0x52, 0x6f, 0x77, 0x12, 0x30, 0x0a, 0x05, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4e, 0x4c, 0x57, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x05,
	0x43, 0x65, 0x6c, 0x6c, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8e,
	0x01, 0x0a, 0x08, 0x54, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x4e, 0x4c,
	0x57, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x50, 0x62, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22,
	0xb4, 0x01, 0x0a, 0x0a, 0x54, 0x4c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x62, 0x12, 0x16,
	0x0a, 0x06, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x0f,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x22, 0x5c, 0x0a, 0x0c, 0x54, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x4c, 0x6f, 0x67, 0x50, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4e, 0x4c, 0x57, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e,
	0x54, 0x4c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x62, 0x52, 0x08, 0x4c, 0x6f, 0x67, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0xce, 0x03, 0x0a, 0x06, 0x54, 0x4c, 0x6f, 0x67, 0x50, 0x62, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x43, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xc9, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x18,
	0xca, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c,
	0x69, 0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x11, 0x0a, 0x03, 0x50, 0x69, 0x64, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x50, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18,
	0xad, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4e, 0x4c, 0x57, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x2e, 0x54, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x2b, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0xae, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x4e, 0x4c, 0x57, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x62, 0x52, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x0a,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0xaf, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x4e, 0x4c, 0x57, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x4c, 0x6f, 0x67, 0x50, 0x62, 0x52, 0x0a, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x4c, 0x6f, 0x67, 0x73, 0x22, 0x5c, 0x0a, 0x0a, 0x54, 0x53, 0x68, 0x75, 0x74, 0x74, 0x6c,
	0x65, 0x50, 0x62, 0x12, 0x26, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4e, 0x4c, 0x57, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x4c,
	0x6f, 0x67, 0x50, 0x62, 0x52, 0x05, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4e, 0x4c, 0x57,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x22, 0x3c, 0x0a, 0x08, 0x54, 0x4f, 0x72, 0x62, 0x69, 0x74, 0x50, 0x62, 0x12,
	0x30, 0x0a, 0x08, 0x53, 0x68, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x4e, 0x4c, 0x57, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x53, 0x68,
	0x75, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x62, 0x52, 0x08, 0x53, 0x68, 0x75, 0x74, 0x74, 0x6c, 0x65,
	0x73, 0x22, 0x96, 0x01, 0x0a, 0x0b, 0x54, 0x54, 0x72, 0x61, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x1c, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1e, 0x0a, 0x09, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x00, 0x52, 0x09, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x22, 0x0a, 0x0b, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x53, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x0b, 0x54,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x4c, 0x57,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x54, 0x72, 0x61, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x61,
	0x6e, 0x6f, 0x73, 0x65, 0x63, 0x22, 0x3e, 0x0a, 0x0d, 0x54, 0x53, 0x68, 0x75, 0x74, 0x74, 0x6c,
	0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x4c, 0x57, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x2e, 0x54, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x2b, 0x0a, 0x0d, 0x54, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x64, 0x22, 0x3f, 0x0a, 0x0e, 0x54, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4e, 0x4c, 0x57, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x54,
	0x53, 0x68, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x2a, 0x51, 0x0a, 0x0d, 0x45, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x4f, 0x54, 0x5f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54,
	0x5f, 0x4c, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x5f, 0x4c, 0x45, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x5f, 0x47, 0x54, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4f,
	0x54, 0x5f, 0x47, 0x45, 0x10, 0x05, 0x2a, 0x8e, 0x01, 0x0a, 0x0e, 0x45, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x5f,
	0x4d, 0x4f, 0x56, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x54, 0x5f, 0x4d, 0x55, 0x4c, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x5f,
	0x44, 0x49, 0x56, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x10,
	0x05, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x45, 0x51, 0x10, 0x06,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x45, 0x51, 0x10, 0x07, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x43, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x54, 0x5f, 0x44, 0x45, 0x43, 0x10, 0x09, 0x2a, 0x6f, 0x0a, 0x0c, 0x45, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x50, 0x62, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x54, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x54, 0x5f, 0x49, 0x36,
	0x34, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x54, 0x5f, 0x55, 0x69, 0x36, 0x34, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x50, 0x54, 0x5f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x50, 0x54, 0x5f, 0x53, 0x74, 0x72, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x50,
	0x54, 0x5f, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x54,
	0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x10, 0x06, 0x42, 0x2d, 0x5a, 0x2b, 0x61, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2d, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x72, 0x75, 0x2f, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x2f, 0x63, 0x70, 0x70, 0x2f, 0x6c, 0x77, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescOnce sync.Once
	file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescData = file_library_cpp_lwtrace_protos_lwtrace_proto_rawDesc
)

func file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescGZIP() []byte {
	file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescOnce.Do(func() {
		file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescData = protoimpl.X.CompressGZIP(file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescData)
	})
	return file_library_cpp_lwtrace_protos_lwtrace_proto_rawDescData
}

var file_library_cpp_lwtrace_protos_lwtrace_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_library_cpp_lwtrace_protos_lwtrace_proto_goTypes = []interface{}{
	(EOperatorType)(0),            // 0: NLWTrace.EOperatorType
	(EStatementType)(0),           // 1: NLWTrace.EStatementType
	(EParamTypePb)(0),             // 2: NLWTrace.EParamTypePb
	(*TProbeDesc)(nil),            // 3: NLWTrace.TProbeDesc
	(*TArgument)(nil),             // 4: NLWTrace.TArgument
	(*TOperator)(nil),             // 5: NLWTrace.TOperator
	(*TPredicate)(nil),            // 6: NLWTrace.TPredicate
	(*TLogAction)(nil),            // 7: NLWTrace.TLogAction
	(*TPrintToStderrAction)(nil),  // 8: NLWTrace.TPrintToStderrAction
	(*TKillAction)(nil),           // 9: NLWTrace.TKillAction
	(*TSleepAction)(nil),          // 10: NLWTrace.TSleepAction
	(*TCustomAction)(nil),         // 11: NLWTrace.TCustomAction
	(*TStatementAction)(nil),      // 12: NLWTrace.TStatementAction
	(*TRunLogShuttleAction)(nil),  // 13: NLWTrace.TRunLogShuttleAction
	(*TEditLogShuttleAction)(nil), // 14: NLWTrace.TEditLogShuttleAction
	(*TDropLogShuttleAction)(nil), // 15: NLWTrace.TDropLogShuttleAction
	(*TAction)(nil),               // 16: NLWTrace.TAction
	(*TBlock)(nil),                // 17: NLWTrace.TBlock
	(*TQuery)(nil),                // 18: NLWTrace.TQuery
	(*TDashboard)(nil),            // 19: NLWTrace.TDashboard
	(*TEventPb)(nil),              // 20: NLWTrace.TEventPb
	(*TLogItemPb)(nil),            // 21: NLWTrace.TLogItemPb
	(*TThreadLogPb)(nil),          // 22: NLWTrace.TThreadLogPb
	(*TLogPb)(nil),                // 23: NLWTrace.TLogPb
	(*TShuttlePb)(nil),            // 24: NLWTrace.TShuttlePb
	(*TOrbitPb)(nil),              // 25: NLWTrace.TOrbitPb
	(*TTraceParam)(nil),           // 26: NLWTrace.TTraceParam
	(*TTraceEvent)(nil),           // 27: NLWTrace.TTraceEvent
	(*TShuttleTrace)(nil),         // 28: NLWTrace.TShuttleTrace
	(*TTraceRequest)(nil),         // 29: NLWTrace.TTraceRequest
	(*TTraceResponse)(nil),        // 30: NLWTrace.TTraceResponse
	(*TDashboard_TCell)(nil),      // 31: NLWTrace.TDashboard.TCell
	(*TDashboard_TRow)(nil),       // 32: NLWTrace.TDashboard.TRow
}
var file_library_cpp_lwtrace_protos_lwtrace_proto_depIdxs = []int32{
	0,  // 0: NLWTrace.TOperator.Type:type_name -> NLWTrace.EOperatorType
	4,  // 1: NLWTrace.TOperator.Argument:type_name -> NLWTrace.TArgument
	5,  // 2: NLWTrace.TPredicate.Operators:type_name -> NLWTrace.TOperator
	1,  // 3: NLWTrace.TStatementAction.Type:type_name -> NLWTrace.EStatementType
	4,  // 4: NLWTrace.TStatementAction.Argument:type_name -> NLWTrace.TArgument
	7,  // 5: NLWTrace.TAction.LogAction:type_name -> NLWTrace.TLogAction
	8,  // 6: NLWTrace.TAction.PrintToStderrAction:type_name -> NLWTrace.TPrintToStderrAction
	11, // 7: NLWTrace.TAction.CustomAction:type_name -> NLWTrace.TCustomAction
	9,  // 8: NLWTrace.TAction.KillAction:type_name -> NLWTrace.TKillAction
	10, // 9: NLWTrace.TAction.SleepAction:type_name -> NLWTrace.TSleepAction
	12, // 10: NLWTrace.TAction.StatementAction:type_name -> NLWTrace.TStatementAction
	13, // 11: NLWTrace.TAction.RunLogShuttleAction:type_name -> NLWTrace.TRunLogShuttleAction
	14, // 12: NLWTrace.TAction.EditLogShuttleAction:type_name -> NLWTrace.TEditLogShuttleAction
	15, // 13: NLWTrace.TAction.DropLogShuttleAction:type_name -> NLWTrace.TDropLogShuttleAction
	3,  // 14: NLWTrace.TBlock.ProbeDesc:type_name -> NLWTrace.TProbeDesc
	6,  // 15: NLWTrace.TBlock.Predicate:type_name -> NLWTrace.TPredicate
	16, // 16: NLWTrace.TBlock.Action:type_name -> NLWTrace.TAction
	17, // 17: NLWTrace.TQuery.Blocks:type_name -> NLWTrace.TBlock
	32, // 18: NLWTrace.TDashboard.Rows:type_name -> NLWTrace.TDashboard.TRow
	2,  // 19: NLWTrace.TEventPb.ParamTypes:type_name -> NLWTrace.EParamTypePb
	21, // 20: NLWTrace.TThreadLogPb.LogItems:type_name -> NLWTrace.TLogItemPb
	18, // 21: NLWTrace.TLogPb.Query:type_name -> NLWTrace.TQuery
	20, // 22: NLWTrace.TLogPb.Events:type_name -> NLWTrace.TEventPb
	22, // 23: NLWTrace.TLogPb.ThreadLogs:type_name -> NLWTrace.TThreadLogPb
	23, // 24: NLWTrace.TShuttlePb.Parts:type_name -> NLWTrace.TLogPb
	18, // 25: NLWTrace.TShuttlePb.Query:type_name -> NLWTrace.TQuery
	24, // 26: NLWTrace.TOrbitPb.Shuttles:type_name -> NLWTrace.TShuttlePb
	26, // 27: NLWTrace.TTraceEvent.Params:type_name -> NLWTrace.TTraceParam
	27, // 28: NLWTrace.TShuttleTrace.Events:type_name -> NLWTrace.TTraceEvent
	28, // 29: NLWTrace.TTraceResponse.Trace:type_name -> NLWTrace.TShuttleTrace
	31, // 30: NLWTrace.TDashboard.TRow.Cells:type_name -> NLWTrace.TDashboard.TCell
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_library_cpp_lwtrace_protos_lwtrace_proto_init() }
func file_library_cpp_lwtrace_protos_lwtrace_proto_init() {
	if File_library_cpp_lwtrace_protos_lwtrace_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TProbeDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TArgument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TPredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLogAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TPrintToStderrAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TKillAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSleepAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCustomAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TStatementAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TRunLogShuttleAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TEditLogShuttleAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDropLogShuttleAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDashboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TEventPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLogItemPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TThreadLogPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLogPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TShuttlePb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TOrbitPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TTraceParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TTraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TShuttleTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TTraceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TTraceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDashboard_TCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDashboard_TRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*TTraceParam_IntValue)(nil),
		(*TTraceParam_UintValue)(nil),
		(*TTraceParam_DoubleValue)(nil),
		(*TTraceParam_StrValue)(nil),
	}
	file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes[28].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_library_cpp_lwtrace_protos_lwtrace_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_library_cpp_lwtrace_protos_lwtrace_proto_goTypes,
		DependencyIndexes: file_library_cpp_lwtrace_protos_lwtrace_proto_depIdxs,
		EnumInfos:         file_library_cpp_lwtrace_protos_lwtrace_proto_enumTypes,
		MessageInfos:      file_library_cpp_lwtrace_protos_lwtrace_proto_msgTypes,
	}.Build()
	File_library_cpp_lwtrace_protos_lwtrace_proto = out.File
	file_library_cpp_lwtrace_protos_lwtrace_proto_rawDesc = nil
	file_library_cpp_lwtrace_protos_lwtrace_proto_goTypes = nil
	file_library_cpp_lwtrace_protos_lwtrace_proto_depIdxs = nil
}
